// Generated from C:/Users/bmarr/transpilerToJs/rust/RustParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import RustParserListener from './RustParserListener.js';
import RustParserVisitor from './RustParserVisitor.js';

import RustParserBase from './RustParserBase.js';

const serializedATN = [4,1,130,2475,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
1,0,5,0,394,8,0,10,0,12,0,397,9,0,1,0,5,0,400,8,0,10,0,12,0,403,9,0,1,0,
1,0,1,1,1,1,1,1,1,1,1,2,1,2,5,2,413,8,2,10,2,12,2,416,9,2,1,2,1,2,1,2,5,
2,421,8,2,10,2,12,2,424,9,2,1,2,1,2,1,2,5,2,429,8,2,10,2,12,2,432,9,2,1,
2,3,2,435,8,2,1,3,4,3,438,8,3,11,3,12,3,439,1,3,3,3,443,8,3,1,4,1,4,1,4,
1,4,1,4,3,4,450,8,4,1,5,1,5,1,5,1,5,5,5,456,8,5,10,5,12,5,459,9,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,5,5,468,8,5,10,5,12,5,471,9,5,1,5,1,5,1,5,1,5,1,5,
1,5,1,5,5,5,480,8,5,10,5,12,5,483,9,5,1,5,1,5,3,5,487,8,5,1,6,1,6,1,6,1,
6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,508,8,
7,1,8,1,8,1,8,5,8,513,8,8,10,8,12,8,516,9,8,1,8,3,8,519,8,8,1,9,1,9,1,9,
1,9,1,10,1,10,5,10,527,8,10,10,10,12,10,530,9,10,1,10,1,10,1,10,5,10,535,
8,10,10,10,12,10,538,9,10,1,10,1,10,1,10,5,10,543,8,10,10,10,12,10,546,9,
10,1,10,3,10,549,8,10,1,11,4,11,552,8,11,11,11,12,11,553,1,11,1,11,1,11,
1,11,3,11,560,8,11,1,11,1,11,1,11,1,11,1,11,4,11,567,8,11,11,11,12,11,568,
1,11,1,11,3,11,573,8,11,1,11,1,11,3,11,577,8,11,1,12,1,12,1,12,1,12,3,12,
583,8,12,1,13,1,13,1,14,1,14,1,14,1,14,3,14,591,8,14,1,15,1,15,1,16,1,16,
1,17,5,17,598,8,17,10,17,12,17,601,9,17,1,17,1,17,3,17,605,8,17,1,18,3,18,
608,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
3,18,623,8,18,1,19,1,19,3,19,627,8,19,1,20,3,20,630,8,20,1,20,1,20,1,20,
1,20,1,20,5,20,637,8,20,10,20,12,20,640,9,20,1,20,5,20,643,8,20,10,20,12,
20,646,9,20,1,20,3,20,649,8,20,1,21,1,21,1,21,1,21,3,21,655,8,21,1,21,1,
21,1,22,1,22,3,22,661,8,22,1,23,1,23,1,23,3,23,666,8,23,1,24,1,24,1,24,1,
24,1,25,3,25,673,8,25,1,25,3,25,676,8,25,1,25,1,25,1,25,1,25,1,25,5,25,683,
8,25,10,25,12,25,686,9,25,1,25,3,25,689,8,25,3,25,691,8,25,1,25,3,25,694,
8,25,1,25,1,25,1,25,1,25,3,25,700,8,25,3,25,702,8,25,3,25,704,8,25,1,26,
1,26,1,26,1,26,3,26,710,8,26,1,26,1,26,3,26,714,8,26,1,26,1,26,3,26,718,
8,26,1,26,3,26,721,8,26,1,26,1,26,3,26,725,8,26,1,27,3,27,728,8,27,1,27,
3,27,731,8,27,1,27,3,27,734,8,27,1,27,1,27,3,27,738,8,27,3,27,740,8,27,1,
28,1,28,1,29,1,29,3,29,746,8,29,1,29,1,29,1,29,3,29,751,8,29,1,29,1,29,1,
29,5,29,756,8,29,10,29,12,29,759,9,29,1,29,3,29,762,8,29,3,29,764,8,29,1,
30,5,30,767,8,30,10,30,12,30,770,9,30,1,30,1,30,3,30,774,8,30,1,31,1,31,
3,31,778,8,31,3,31,780,8,31,1,31,3,31,783,8,31,1,31,1,31,1,32,3,32,788,8,
32,1,32,1,32,1,32,1,32,1,33,5,33,795,8,33,10,33,12,33,798,9,33,1,33,1,33,
1,33,3,33,803,8,33,1,34,1,34,1,34,1,34,3,34,809,8,34,1,35,1,35,1,35,1,36,
1,36,1,36,3,36,817,8,36,1,36,3,36,820,8,36,1,36,1,36,3,36,824,8,36,1,36,
1,36,1,37,1,37,3,37,830,8,37,1,38,1,38,1,38,3,38,835,8,38,1,38,3,38,838,
8,38,1,38,1,38,3,38,842,8,38,1,38,1,38,3,38,846,8,38,1,39,1,39,1,39,3,39,
851,8,39,1,39,1,39,3,39,855,8,39,1,39,1,39,3,39,859,8,39,1,39,1,39,1,40,
1,40,1,40,5,40,866,8,40,10,40,12,40,869,9,40,1,40,3,40,872,8,40,1,41,5,41,
875,8,41,10,41,12,41,878,9,41,1,41,3,41,881,8,41,1,41,1,41,1,41,1,41,1,42,
1,42,1,42,5,42,890,8,42,10,42,12,42,893,9,42,1,42,3,42,896,8,42,1,43,5,43,
899,8,43,10,43,12,43,902,9,43,1,43,3,43,905,8,43,1,43,1,43,1,44,1,44,1,44,
3,44,912,8,44,1,44,3,44,915,8,44,1,44,1,44,3,44,919,8,44,1,44,1,44,1,45,
1,45,1,45,5,45,926,8,45,10,45,12,45,929,9,45,1,45,3,45,932,8,45,1,46,5,46,
935,8,46,10,46,12,46,938,9,46,1,46,3,46,941,8,46,1,46,1,46,1,46,1,46,3,46,
947,8,46,1,47,1,47,3,47,951,8,47,1,47,1,47,1,48,1,48,3,48,957,8,48,1,48,
1,48,1,49,1,49,1,49,1,50,1,50,1,50,3,50,967,8,50,1,50,3,50,970,8,50,1,50,
1,50,1,50,1,50,1,51,1,51,1,51,3,51,979,8,51,1,51,1,51,1,51,1,51,3,51,985,
8,51,1,51,1,51,1,52,1,52,3,52,991,8,52,1,52,1,52,1,52,1,52,1,52,3,52,998,
8,52,1,52,1,52,1,53,3,53,1003,8,53,1,53,1,53,1,53,3,53,1008,8,53,1,53,1,
53,3,53,1012,8,53,3,53,1014,8,53,1,53,3,53,1017,8,53,1,53,1,53,5,53,1021,
8,53,10,53,12,53,1024,9,53,1,53,5,53,1027,8,53,10,53,12,53,1030,9,53,1,53,
1,53,1,54,1,54,3,54,1036,8,54,1,55,1,55,3,55,1040,8,55,1,55,1,55,3,55,1044,
8,55,1,55,1,55,5,55,1048,8,55,10,55,12,55,1051,9,55,1,55,5,55,1054,8,55,
10,55,12,55,1057,9,55,1,55,1,55,1,56,3,56,1062,8,56,1,56,1,56,3,56,1066,
8,56,1,56,3,56,1069,8,56,1,56,1,56,1,56,1,56,3,56,1075,8,56,1,56,1,56,5,
56,1079,8,56,10,56,12,56,1082,9,56,1,56,5,56,1085,8,56,10,56,12,56,1088,
9,56,1,56,1,56,1,57,3,57,1093,8,57,1,57,1,57,3,57,1097,8,57,1,57,1,57,5,
57,1101,8,57,10,57,12,57,1104,9,57,1,57,5,57,1107,8,57,10,57,12,57,1110,
9,57,1,57,1,57,1,58,5,58,1115,8,58,10,58,12,58,1118,9,58,1,58,1,58,3,58,
1122,8,58,1,58,1,58,3,58,1126,8,58,3,58,1128,8,58,1,59,1,59,1,59,1,59,5,
59,1134,8,59,10,59,12,59,1137,9,59,1,59,1,59,3,59,1141,8,59,3,59,1143,8,
59,1,59,1,59,1,60,5,60,1148,8,60,10,60,12,60,1151,9,60,1,60,1,60,1,60,3,
60,1156,8,60,1,61,3,61,1159,8,61,1,61,1,61,1,61,3,61,1164,8,61,1,62,3,62,
1167,8,62,1,62,1,62,1,62,3,62,1172,8,62,3,62,1174,8,62,1,62,1,62,3,62,1178,
8,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,5,64,1189,8,64,10,64,12,
64,1192,9,64,1,64,3,64,1195,8,64,1,65,1,65,3,65,1199,8,65,1,66,1,66,1,66,
1,66,1,67,3,67,1206,8,67,1,67,1,67,1,67,3,67,1211,8,67,1,68,1,68,1,68,1,
69,5,69,1217,8,69,10,69,12,69,1220,9,69,1,69,1,69,3,69,1224,8,69,1,69,1,
69,1,69,3,69,1229,8,69,3,69,1231,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,71,
1,71,1,71,1,71,1,71,1,72,1,72,3,72,1246,8,72,1,73,1,73,1,73,3,73,1251,8,
73,1,74,1,74,1,74,1,74,1,74,3,74,1258,8,74,1,75,5,75,1261,8,75,10,75,12,
75,1264,9,75,1,75,1,75,1,75,1,75,3,75,1270,8,75,1,75,1,75,3,75,1274,8,75,
1,75,1,75,1,76,1,76,1,76,1,76,1,76,3,76,1283,8,76,3,76,1285,8,76,1,77,1,
77,4,77,1289,8,77,11,77,12,77,1290,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1299,
8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1308,8,77,1,77,1,77,1,77,1,
77,3,77,1314,8,77,1,77,3,77,1317,8,77,1,77,1,77,3,77,1321,8,77,1,77,3,77,
1324,8,77,1,77,1,77,3,77,1328,8,77,1,77,1,77,5,77,1332,8,77,10,77,12,77,
1335,9,77,1,77,1,77,1,77,1,77,1,77,5,77,1342,8,77,10,77,12,77,1345,9,77,
1,77,3,77,1348,8,77,1,77,1,77,1,77,5,77,1353,8,77,10,77,12,77,1356,9,77,
1,77,3,77,1359,8,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1367,8,77,1,77,1,
77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1378,8,77,1,77,1,77,1,77,1,77,
1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
1,77,1,77,1,77,3,77,1416,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
77,1,77,1,77,1,77,1,77,1,77,3,77,1432,8,77,1,77,1,77,1,77,1,77,1,77,1,77,
1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1448,8,77,5,77,1450,8,77,10,
77,12,77,1453,9,77,1,78,1,78,1,79,1,79,1,80,4,80,1460,8,80,11,80,12,80,1461,
1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1473,8,80,1,81,1,81,1,
82,1,82,3,82,1479,8,82,1,83,1,83,5,83,1483,8,83,10,83,12,83,1486,9,83,1,
83,3,83,1489,8,83,1,83,1,83,1,84,4,84,1494,8,84,11,84,12,84,1495,1,84,3,
84,1499,8,84,1,84,3,84,1502,8,84,1,85,1,85,3,85,1506,8,85,1,85,1,85,1,86,
1,86,1,86,1,87,1,87,1,87,5,87,1516,8,87,10,87,12,87,1519,9,87,1,87,3,87,
1522,8,87,1,87,1,87,1,87,1,87,3,87,1528,8,87,1,88,1,88,1,88,4,88,1533,8,
88,11,88,12,88,1534,1,88,3,88,1538,8,88,1,89,1,89,1,90,1,90,1,90,3,90,1545,
8,90,1,91,1,91,1,91,5,91,1550,8,91,10,91,12,91,1553,9,91,1,91,1,91,3,91,
1557,8,91,1,91,1,91,1,92,1,92,1,92,5,92,1564,8,92,10,92,12,92,1567,9,92,
1,92,1,92,1,92,3,92,1572,8,92,3,92,1574,8,92,1,93,5,93,1577,8,93,10,93,12,
93,1580,9,93,1,93,1,93,1,93,3,93,1585,8,93,1,93,1,93,1,93,3,93,1590,8,93,
1,94,1,94,1,94,1,95,1,95,1,95,5,95,1598,8,95,10,95,12,95,1601,9,95,1,95,
1,95,1,95,5,95,1606,8,95,10,95,12,95,1609,9,95,1,95,3,95,1612,8,95,3,95,
1614,8,95,1,95,1,95,1,96,1,96,1,97,1,97,1,97,3,97,1623,8,97,1,98,1,98,1,
98,3,98,1628,8,98,1,98,1,98,1,99,1,99,1,99,5,99,1635,8,99,10,99,12,99,1638,
9,99,1,99,3,99,1641,8,99,1,100,1,100,1,100,3,100,1646,8,100,1,100,1,100,
1,100,3,100,1651,8,100,1,101,1,101,1,101,1,101,1,101,5,101,1658,8,101,10,
101,12,101,1661,9,101,1,101,3,101,1664,8,101,3,101,1666,8,101,1,101,1,101,
1,102,1,102,1,103,1,103,1,103,5,103,1675,8,103,10,103,12,103,1678,9,103,
1,103,3,103,1681,8,103,1,104,3,104,1684,8,104,1,104,1,104,1,104,3,104,1689,
8,104,1,104,3,104,1692,8,104,1,104,1,104,1,104,1,104,1,104,3,104,1699,8,
104,1,105,1,105,1,105,5,105,1704,8,105,10,105,12,105,1707,9,105,1,105,3,
105,1710,8,105,1,106,5,106,1713,8,106,10,106,12,106,1716,9,106,1,106,1,106,
1,106,3,106,1721,8,106,1,107,3,107,1724,8,107,1,107,1,107,1,107,1,107,3,
107,1730,8,107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,110,1,110,1,110,
1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,
1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1762,8,113,3,113,1764,
8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,
1776,8,114,3,114,1778,8,114,1,115,1,115,1,115,1,115,5,115,1784,8,115,10,
115,12,115,1787,9,115,1,115,3,115,1790,8,115,1,115,1,115,1,116,1,116,1,116,
1,116,5,116,1798,8,116,10,116,12,116,1801,9,116,1,116,1,116,1,116,1,116,
3,116,1807,8,116,1,117,1,117,1,117,1,117,1,117,3,117,1814,8,117,3,117,1816,
8,117,1,118,5,118,1819,8,118,10,118,12,118,1822,9,118,1,118,1,118,3,118,
1826,8,118,1,119,1,119,1,119,1,120,3,120,1832,8,120,1,120,1,120,1,120,5,
120,1837,8,120,10,120,12,120,1840,9,120,1,121,1,121,3,121,1844,8,121,1,122,
1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,
1858,8,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,1869,
8,123,1,123,1,123,3,123,1873,8,123,1,123,3,123,1876,8,123,1,124,3,124,1879,
8,124,1,124,3,124,1882,8,124,1,124,1,124,1,124,3,124,1887,8,124,1,125,1,
125,1,126,1,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,
127,1,127,3,127,1904,8,127,1,128,1,128,1,128,3,128,1909,8,128,1,128,1,128,
3,128,1913,8,128,1,128,1,128,3,128,1917,8,128,1,129,1,129,3,129,1921,8,129,
1,129,1,129,1,130,1,130,1,130,3,130,1928,8,130,1,130,1,130,1,131,1,131,1,
131,3,131,1935,8,131,3,131,1937,8,131,1,131,3,131,1940,8,131,1,132,1,132,
1,132,5,132,1945,8,132,10,132,12,132,1948,9,132,1,133,5,133,1951,8,133,10,
133,12,133,1954,9,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,
133,3,133,1965,8,133,1,133,3,133,1968,8,133,1,133,3,133,1971,8,133,1,134,
5,134,1974,8,134,10,134,12,134,1977,9,134,1,134,1,134,1,135,1,135,1,135,
3,135,1984,8,135,1,135,1,135,1,136,1,136,1,136,5,136,1991,8,136,10,136,12,
136,1994,9,136,1,136,3,136,1997,8,136,1,137,1,137,3,137,2001,8,137,1,137,
1,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,4,138,2012,8,138,11,138,
12,138,2013,1,138,3,138,2017,8,138,3,138,2019,8,138,1,139,1,139,1,139,1,
139,1,140,1,140,3,140,2027,8,140,1,140,1,140,1,141,1,141,1,141,5,141,2034,
8,141,10,141,12,141,2037,9,141,1,141,3,141,2040,8,141,1,142,1,142,3,142,
2044,8,142,1,143,1,143,1,143,3,143,2049,8,143,1,144,1,144,1,144,1,144,1,
144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,2065,8,144,
1,145,1,145,1,145,1,145,1,146,1,146,1,147,1,147,1,147,1,147,4,147,2077,8,
147,11,147,12,147,2078,1,147,3,147,2082,8,147,3,147,2084,8,147,1,147,1,147,
1,148,1,148,1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,150,1,150,
3,150,2100,8,150,1,150,3,150,2103,8,150,1,150,1,150,1,151,1,151,1,151,1,
151,1,152,3,152,2112,8,152,1,152,1,152,1,152,1,152,3,152,2118,8,152,1,152,
1,152,3,152,2122,8,152,1,153,3,153,2125,8,153,1,153,1,153,3,153,2129,8,153,
3,153,2131,8,153,1,154,1,154,1,154,1,155,1,155,3,155,2138,8,155,1,156,1,
156,1,156,5,156,2143,8,156,10,156,12,156,2146,9,156,1,156,3,156,2149,8,156,
1,157,5,157,2152,8,157,10,157,12,157,2155,9,157,1,157,1,157,3,157,2159,8,
157,1,157,3,157,2162,8,157,1,157,1,157,1,158,1,158,1,158,5,158,2169,8,158,
10,158,12,158,2172,9,158,1,158,1,158,1,158,5,158,2177,8,158,10,158,12,158,
2180,9,158,1,158,1,158,1,159,3,159,2185,8,159,1,159,1,159,1,160,3,160,2190,
8,160,1,160,1,160,1,161,1,161,1,161,1,162,1,162,1,162,1,163,1,163,1,164,
1,164,1,164,5,164,2205,8,164,10,164,12,164,2208,9,164,1,164,3,164,2211,8,
164,1,165,1,165,3,165,2215,8,165,1,166,3,166,2218,8,166,1,166,3,166,2221,
8,166,1,166,1,166,1,166,3,166,2226,8,166,1,166,3,166,2229,8,166,1,166,1,
166,1,166,3,166,2234,8,166,1,167,1,167,1,167,5,167,2239,8,167,10,167,12,
167,2242,9,167,1,167,3,167,2245,8,167,1,168,1,168,1,169,3,169,2250,8,169,
1,169,1,169,1,169,5,169,2255,8,169,10,169,12,169,2258,9,169,1,170,1,170,
1,170,1,170,1,170,3,170,2265,8,170,1,171,3,171,2268,8,171,1,171,1,171,1,
171,5,171,2273,8,171,10,171,12,171,2276,9,171,1,172,1,172,1,172,3,172,2281,
8,172,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2289,8,173,1,174,1,174,1,
174,1,174,1,174,1,174,3,174,2297,8,174,1,174,1,174,3,174,2301,8,174,1,174,
3,174,2304,8,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2312,8,174,1,
174,3,174,2315,8,174,1,174,1,174,1,174,1,174,1,174,1,174,5,174,2323,8,174,
10,174,12,174,2326,9,174,1,174,1,174,3,174,2330,8,174,1,174,1,174,3,174,
2334,8,174,1,175,1,175,1,175,1,175,3,175,2340,8,175,1,176,1,176,3,176,2344,
8,176,1,176,1,176,3,176,2348,8,176,1,177,1,177,1,177,5,177,2353,8,177,10,
177,12,177,2356,9,177,1,178,1,178,1,178,5,178,2361,8,178,10,178,12,178,2364,
9,178,1,179,1,179,1,179,5,179,2369,8,179,10,179,12,179,2372,9,179,1,180,
1,180,1,180,1,180,1,181,1,181,1,181,4,181,2381,8,181,11,181,12,181,2382,
1,182,1,182,1,182,1,182,3,182,2389,8,182,1,182,1,182,1,183,1,183,1,183,4,
183,2396,8,183,11,183,12,183,2397,1,184,3,184,2401,8,184,1,184,1,184,1,184,
5,184,2406,8,184,10,184,12,184,2409,9,184,1,185,1,185,3,185,2413,8,185,1,
185,1,185,3,185,2417,8,185,1,186,1,186,3,186,2421,8,186,1,186,1,186,1,186,
3,186,2426,8,186,1,187,1,187,1,187,5,187,2431,8,187,10,187,12,187,2434,9,
187,1,187,3,187,2437,8,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,
2446,8,188,1,188,3,188,2449,8,188,1,189,1,189,1,190,1,190,1,191,1,191,1,
191,1,191,1,191,1,191,3,191,2461,8,191,1,192,1,192,1,193,1,193,1,194,1,194,
1,194,1,194,1,195,1,195,1,195,1,195,1,195,0,1,154,196,0,2,4,6,8,10,12,14,
16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,0,14,3,0,82,
82,84,84,124,124,1,0,70,71,2,0,89,89,91,91,2,0,83,83,88,88,1,0,84,86,1,0,
82,83,1,0,104,109,1,0,93,102,4,0,9,9,30,30,69,75,80,80,2,0,3,3,20,20,3,0,
53,53,55,55,81,81,2,0,54,54,57,58,1,0,1,53,2,0,83,83,85,122,2760,0,395,1,
0,0,0,2,406,1,0,0,0,4,434,1,0,0,0,6,442,1,0,0,0,8,449,1,0,0,0,10,486,1,0,
0,0,12,488,1,0,0,0,14,507,1,0,0,0,16,509,1,0,0,0,18,520,1,0,0,0,20,548,1,
0,0,0,22,576,1,0,0,0,24,582,1,0,0,0,26,584,1,0,0,0,28,590,1,0,0,0,30,592,
1,0,0,0,32,594,1,0,0,0,34,599,1,0,0,0,36,607,1,0,0,0,38,626,1,0,0,0,40,629,
1,0,0,0,42,650,1,0,0,0,44,660,1,0,0,0,46,662,1,0,0,0,48,667,1,0,0,0,50,703,
1,0,0,0,52,705,1,0,0,0,54,727,1,0,0,0,56,741,1,0,0,0,58,763,1,0,0,0,60,768,
1,0,0,0,62,779,1,0,0,0,64,787,1,0,0,0,66,796,1,0,0,0,68,804,1,0,0,0,70,810,
1,0,0,0,72,813,1,0,0,0,74,829,1,0,0,0,76,831,1,0,0,0,78,847,1,0,0,0,80,862,
1,0,0,0,82,876,1,0,0,0,84,886,1,0,0,0,86,900,1,0,0,0,88,908,1,0,0,0,90,922,
1,0,0,0,92,936,1,0,0,0,94,948,1,0,0,0,96,954,1,0,0,0,98,960,1,0,0,0,100,
963,1,0,0,0,102,975,1,0,0,0,104,988,1,0,0,0,106,1002,1,0,0,0,108,1035,1,
0,0,0,110,1037,1,0,0,0,112,1061,1,0,0,0,114,1092,1,0,0,0,116,1116,1,0,0,
0,118,1129,1,0,0,0,120,1149,1,0,0,0,122,1158,1,0,0,0,124,1166,1,0,0,0,126,
1179,1,0,0,0,128,1184,1,0,0,0,130,1198,1,0,0,0,132,1200,1,0,0,0,134,1205,
1,0,0,0,136,1212,1,0,0,0,138,1218,1,0,0,0,140,1232,1,0,0,0,142,1238,1,0,
0,0,144,1243,1,0,0,0,146,1250,1,0,0,0,148,1257,1,0,0,0,150,1262,1,0,0,0,
152,1284,1,0,0,0,154,1366,1,0,0,0,156,1454,1,0,0,0,158,1456,1,0,0,0,160,
1472,1,0,0,0,162,1474,1,0,0,0,164,1478,1,0,0,0,166,1480,1,0,0,0,168,1501,
1,0,0,0,170,1503,1,0,0,0,172,1509,1,0,0,0,174,1527,1,0,0,0,176,1532,1,0,
0,0,178,1539,1,0,0,0,180,1544,1,0,0,0,182,1546,1,0,0,0,184,1560,1,0,0,0,
186,1578,1,0,0,0,188,1591,1,0,0,0,190,1594,1,0,0,0,192,1617,1,0,0,0,194,
1622,1,0,0,0,196,1624,1,0,0,0,198,1631,1,0,0,0,200,1650,1,0,0,0,202,1652,
1,0,0,0,204,1669,1,0,0,0,206,1671,1,0,0,0,208,1683,1,0,0,0,210,1700,1,0,
0,0,212,1714,1,0,0,0,214,1723,1,0,0,0,216,1731,1,0,0,0,218,1734,1,0,0,0,
220,1738,1,0,0,0,222,1745,1,0,0,0,224,1751,1,0,0,0,226,1754,1,0,0,0,228,
1765,1,0,0,0,230,1779,1,0,0,0,232,1799,1,0,0,0,234,1815,1,0,0,0,236,1820,
1,0,0,0,238,1827,1,0,0,0,240,1831,1,0,0,0,242,1843,1,0,0,0,244,1857,1,0,
0,0,246,1875,1,0,0,0,248,1878,1,0,0,0,250,1888,1,0,0,0,252,1890,1,0,0,0,
254,1903,1,0,0,0,256,1916,1,0,0,0,258,1918,1,0,0,0,260,1924,1,0,0,0,262,
1939,1,0,0,0,264,1941,1,0,0,0,266,1952,1,0,0,0,268,1975,1,0,0,0,270,1980,
1,0,0,0,272,1987,1,0,0,0,274,1998,1,0,0,0,276,2018,1,0,0,0,278,2020,1,0,
0,0,280,2024,1,0,0,0,282,2030,1,0,0,0,284,2043,1,0,0,0,286,2048,1,0,0,0,
288,2064,1,0,0,0,290,2066,1,0,0,0,292,2070,1,0,0,0,294,2072,1,0,0,0,296,
2087,1,0,0,0,298,2093,1,0,0,0,300,2097,1,0,0,0,302,2106,1,0,0,0,304,2111,
1,0,0,0,306,2124,1,0,0,0,308,2132,1,0,0,0,310,2137,1,0,0,0,312,2139,1,0,
0,0,314,2153,1,0,0,0,316,2170,1,0,0,0,318,2184,1,0,0,0,320,2189,1,0,0,0,
322,2193,1,0,0,0,324,2196,1,0,0,0,326,2199,1,0,0,0,328,2201,1,0,0,0,330,
2214,1,0,0,0,332,2233,1,0,0,0,334,2240,1,0,0,0,336,2246,1,0,0,0,338,2249,
1,0,0,0,340,2264,1,0,0,0,342,2267,1,0,0,0,344,2277,1,0,0,0,346,2288,1,0,
0,0,348,2333,1,0,0,0,350,2339,1,0,0,0,352,2347,1,0,0,0,354,2349,1,0,0,0,
356,2357,1,0,0,0,358,2365,1,0,0,0,360,2373,1,0,0,0,362,2377,1,0,0,0,364,
2384,1,0,0,0,366,2392,1,0,0,0,368,2400,1,0,0,0,370,2410,1,0,0,0,372,2418,
1,0,0,0,374,2427,1,0,0,0,376,2438,1,0,0,0,378,2450,1,0,0,0,380,2452,1,0,
0,0,382,2460,1,0,0,0,384,2462,1,0,0,0,386,2464,1,0,0,0,388,2466,1,0,0,0,
390,2470,1,0,0,0,392,394,3,140,70,0,393,392,1,0,0,0,394,397,1,0,0,0,395,
393,1,0,0,0,395,396,1,0,0,0,396,401,1,0,0,0,397,395,1,0,0,0,398,400,3,34,
17,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,
404,1,0,0,0,403,401,1,0,0,0,404,405,5,0,0,1,405,1,1,0,0,0,406,407,3,338,
169,0,407,408,5,88,0,0,408,409,3,4,2,0,409,3,1,0,0,0,410,414,5,129,0,0,411,
413,3,6,3,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,1,0,
0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,435,5,130,0,0,418,422,5,127,0,0,
419,421,3,6,3,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,
1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,435,5,128,0,0,426,430,5,125,
0,0,427,429,3,6,3,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,
431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,435,5,126,0,0,434,410,1,
0,0,0,434,418,1,0,0,0,434,426,1,0,0,0,435,5,1,0,0,0,436,438,3,8,4,0,437,
436,1,0,0,0,438,439,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,443,1,0,
0,0,441,443,3,4,2,0,442,437,1,0,0,0,442,441,1,0,0,0,443,7,1,0,0,0,444,450,
3,382,191,0,445,450,3,384,192,0,446,450,3,386,193,0,447,450,3,30,15,0,448,
450,5,123,0,0,449,444,1,0,0,0,449,445,1,0,0,0,449,446,1,0,0,0,449,447,1,
0,0,0,449,448,1,0,0,0,450,9,1,0,0,0,451,452,3,338,169,0,452,453,5,88,0,0,
453,457,5,129,0,0,454,456,3,6,3,0,455,454,1,0,0,0,456,459,1,0,0,0,457,455,
1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,461,5,130,0,
0,461,462,5,117,0,0,462,487,1,0,0,0,463,464,3,338,169,0,464,465,5,88,0,0,
465,469,5,127,0,0,466,468,3,6,3,0,467,466,1,0,0,0,468,471,1,0,0,0,469,467,
1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,0,0,472,473,5,128,0,
0,473,474,5,117,0,0,474,487,1,0,0,0,475,476,3,338,169,0,476,477,5,88,0,0,
477,481,5,125,0,0,478,480,3,6,3,0,479,478,1,0,0,0,480,483,1,0,0,0,481,479,
1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,485,5,126,0,
0,485,487,1,0,0,0,486,451,1,0,0,0,486,463,1,0,0,0,486,475,1,0,0,0,487,11,
1,0,0,0,488,489,5,54,0,0,489,490,5,88,0,0,490,491,3,378,189,0,491,492,3,
14,7,0,492,13,1,0,0,0,493,494,5,129,0,0,494,495,3,16,8,0,495,496,5,130,0,
0,496,497,5,117,0,0,497,508,1,0,0,0,498,499,5,127,0,0,499,500,3,16,8,0,500,
501,5,128,0,0,501,502,5,117,0,0,502,508,1,0,0,0,503,504,5,125,0,0,504,505,
3,16,8,0,505,506,5,126,0,0,506,508,1,0,0,0,507,493,1,0,0,0,507,498,1,0,0,
0,507,503,1,0,0,0,508,15,1,0,0,0,509,514,3,18,9,0,510,511,5,117,0,0,511,
513,3,18,9,0,512,510,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,
0,0,515,518,1,0,0,0,516,514,1,0,0,0,517,519,5,117,0,0,518,517,1,0,0,0,518,
519,1,0,0,0,519,17,1,0,0,0,520,521,3,20,10,0,521,522,5,121,0,0,522,523,3,
32,16,0,523,19,1,0,0,0,524,528,5,129,0,0,525,527,3,22,11,0,526,525,1,0,0,
0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,
1,0,0,0,531,549,5,130,0,0,532,536,5,127,0,0,533,535,3,22,11,0,534,533,1,
0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,
536,1,0,0,0,539,549,5,128,0,0,540,544,5,125,0,0,541,543,3,22,11,0,542,541,
1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,
546,544,1,0,0,0,547,549,5,126,0,0,548,524,1,0,0,0,548,532,1,0,0,0,548,540,
1,0,0,0,549,21,1,0,0,0,550,552,3,24,12,0,551,550,1,0,0,0,552,553,1,0,0,0,
553,551,1,0,0,0,553,554,1,0,0,0,554,577,1,0,0,0,555,577,3,20,10,0,556,559,
5,123,0,0,557,560,3,378,189,0,558,560,5,24,0,0,559,557,1,0,0,0,559,558,1,
0,0,0,560,561,1,0,0,0,561,562,5,118,0,0,562,577,3,26,13,0,563,564,5,123,
0,0,564,566,5,129,0,0,565,567,3,22,11,0,566,565,1,0,0,0,567,568,1,0,0,0,
568,566,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,572,5,130,0,0,571,573,
3,28,14,0,572,571,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,575,3,30,15,
0,575,577,1,0,0,0,576,551,1,0,0,0,576,555,1,0,0,0,576,556,1,0,0,0,576,563,
1,0,0,0,577,23,1,0,0,0,578,583,3,382,191,0,579,583,3,384,192,0,580,583,3,
386,193,0,581,583,3,30,15,0,582,578,1,0,0,0,582,579,1,0,0,0,582,580,1,0,
0,0,582,581,1,0,0,0,583,25,1,0,0,0,584,585,3,378,189,0,585,27,1,0,0,0,586,
591,3,382,191,0,587,591,3,384,192,0,588,591,3,386,193,0,589,591,5,123,0,
0,590,586,1,0,0,0,590,587,1,0,0,0,590,588,1,0,0,0,590,589,1,0,0,0,591,29,
1,0,0,0,592,593,7,0,0,0,593,31,1,0,0,0,594,595,3,4,2,0,595,33,1,0,0,0,596,
598,3,142,71,0,597,596,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,
0,0,0,600,604,1,0,0,0,601,599,1,0,0,0,602,605,3,36,18,0,603,605,3,38,19,
0,604,602,1,0,0,0,604,603,1,0,0,0,605,35,1,0,0,0,606,608,3,376,188,0,607,
606,1,0,0,0,607,608,1,0,0,0,608,622,1,0,0,0,609,623,3,40,20,0,610,623,3,
42,21,0,611,623,3,48,24,0,612,623,3,52,26,0,613,623,3,72,36,0,614,623,3,
74,37,0,615,623,3,88,44,0,616,623,3,100,50,0,617,623,3,102,51,0,618,623,
3,104,52,0,619,623,3,106,53,0,620,623,3,108,54,0,621,623,3,114,57,0,622,
609,1,0,0,0,622,610,1,0,0,0,622,611,1,0,0,0,622,612,1,0,0,0,622,613,1,0,
0,0,622,614,1,0,0,0,622,615,1,0,0,0,622,616,1,0,0,0,622,617,1,0,0,0,622,
618,1,0,0,0,622,619,1,0,0,0,622,620,1,0,0,0,622,621,1,0,0,0,623,37,1,0,0,
0,624,627,3,10,5,0,625,627,3,12,6,0,626,624,1,0,0,0,626,625,1,0,0,0,627,
39,1,0,0,0,628,630,5,32,0,0,629,628,1,0,0,0,629,630,1,0,0,0,630,631,1,0,
0,0,631,632,5,18,0,0,632,648,3,378,189,0,633,649,5,117,0,0,634,638,5,125,
0,0,635,637,3,140,70,0,636,635,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,
639,1,0,0,0,639,644,1,0,0,0,640,638,1,0,0,0,641,643,3,34,17,0,642,641,1,
0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,0,646,
644,1,0,0,0,647,649,5,126,0,0,648,633,1,0,0,0,648,634,1,0,0,0,649,41,1,0,
0,0,650,651,5,8,0,0,651,652,5,5,0,0,652,654,3,44,22,0,653,655,3,46,23,0,
654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,5,117,0,0,657,43,
1,0,0,0,658,661,3,378,189,0,659,661,5,24,0,0,660,658,1,0,0,0,660,659,1,0,
0,0,661,45,1,0,0,0,662,665,5,1,0,0,663,666,3,378,189,0,664,666,5,111,0,0,
665,663,1,0,0,0,665,664,1,0,0,0,666,47,1,0,0,0,667,668,5,33,0,0,668,669,
3,50,25,0,669,670,5,117,0,0,670,49,1,0,0,0,671,673,3,338,169,0,672,671,1,
0,0,0,672,673,1,0,0,0,673,674,1,0,0,0,674,676,5,119,0,0,675,672,1,0,0,0,
675,676,1,0,0,0,676,693,1,0,0,0,677,694,5,84,0,0,678,690,5,125,0,0,679,684,
3,50,25,0,680,681,5,116,0,0,681,683,3,50,25,0,682,680,1,0,0,0,683,686,1,
0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,687,
689,5,116,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,691,1,0,0,0,690,679,1,
0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,694,5,126,0,0,693,677,1,0,0,0,
693,678,1,0,0,0,694,704,1,0,0,0,695,701,3,338,169,0,696,699,5,1,0,0,697,
700,3,378,189,0,698,700,5,111,0,0,699,697,1,0,0,0,699,698,1,0,0,0,700,702,
1,0,0,0,701,696,1,0,0,0,701,702,1,0,0,0,702,704,1,0,0,0,703,675,1,0,0,0,
703,695,1,0,0,0,704,51,1,0,0,0,705,706,3,54,27,0,706,707,5,10,0,0,707,709,
3,378,189,0,708,710,3,118,59,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,
0,0,0,711,713,5,129,0,0,712,714,3,58,29,0,713,712,1,0,0,0,713,714,1,0,0,
0,714,715,1,0,0,0,715,717,5,130,0,0,716,718,3,70,35,0,717,716,1,0,0,0,717,
718,1,0,0,0,718,720,1,0,0,0,719,721,3,128,64,0,720,719,1,0,0,0,720,721,1,
0,0,0,721,724,1,0,0,0,722,725,3,166,83,0,723,725,5,117,0,0,724,722,1,0,0,
0,724,723,1,0,0,0,725,53,1,0,0,0,726,728,5,3,0,0,727,726,1,0,0,0,727,728,
1,0,0,0,728,730,1,0,0,0,729,731,5,36,0,0,730,729,1,0,0,0,730,731,1,0,0,0,
731,733,1,0,0,0,732,734,5,32,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,739,
1,0,0,0,735,737,5,8,0,0,736,738,3,56,28,0,737,736,1,0,0,0,737,738,1,0,0,
0,738,740,1,0,0,0,739,735,1,0,0,0,739,740,1,0,0,0,740,55,1,0,0,0,741,742,
7,1,0,0,742,57,1,0,0,0,743,745,3,60,30,0,744,746,5,116,0,0,745,744,1,0,0,
0,745,746,1,0,0,0,746,764,1,0,0,0,747,748,3,60,30,0,748,749,5,116,0,0,749,
751,1,0,0,0,750,747,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,757,3,66,
33,0,753,754,5,116,0,0,754,756,3,66,33,0,755,753,1,0,0,0,756,759,1,0,0,0,
757,755,1,0,0,0,757,758,1,0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,760,762,
5,116,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,743,1,0,0,
0,763,750,1,0,0,0,764,59,1,0,0,0,765,767,3,142,71,0,766,765,1,0,0,0,767,
770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,773,1,0,0,0,770,768,1,0,
0,0,771,774,3,62,31,0,772,774,3,64,32,0,773,771,1,0,0,0,773,772,1,0,0,0,
774,61,1,0,0,0,775,777,5,89,0,0,776,778,3,336,168,0,777,776,1,0,0,0,777,
778,1,0,0,0,778,780,1,0,0,0,779,775,1,0,0,0,779,780,1,0,0,0,780,782,1,0,
0,0,781,783,5,20,0,0,782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,
785,5,24,0,0,785,63,1,0,0,0,786,788,5,20,0,0,787,786,1,0,0,0,787,788,1,0,
0,0,788,789,1,0,0,0,789,790,5,24,0,0,790,791,5,118,0,0,791,792,3,286,143,
0,792,65,1,0,0,0,793,795,3,142,71,0,794,793,1,0,0,0,795,798,1,0,0,0,796,
794,1,0,0,0,796,797,1,0,0,0,797,802,1,0,0,0,798,796,1,0,0,0,799,803,3,68,
34,0,800,803,5,114,0,0,801,803,3,286,143,0,802,799,1,0,0,0,802,800,1,0,0,
0,802,801,1,0,0,0,803,67,1,0,0,0,804,805,3,240,120,0,805,808,5,118,0,0,806,
809,3,286,143,0,807,809,5,114,0,0,808,806,1,0,0,0,808,807,1,0,0,0,809,69,
1,0,0,0,810,811,5,120,0,0,811,812,3,286,143,0,812,71,1,0,0,0,813,814,5,31,
0,0,814,816,3,378,189,0,815,817,3,118,59,0,816,815,1,0,0,0,816,817,1,0,0,
0,817,819,1,0,0,0,818,820,3,128,64,0,819,818,1,0,0,0,819,820,1,0,0,0,820,
823,1,0,0,0,821,822,5,103,0,0,822,824,3,286,143,0,823,821,1,0,0,0,823,824,
1,0,0,0,824,825,1,0,0,0,825,826,5,117,0,0,826,73,1,0,0,0,827,830,3,76,38,
0,828,830,3,78,39,0,829,827,1,0,0,0,829,828,1,0,0,0,830,75,1,0,0,0,831,832,
5,27,0,0,832,834,3,378,189,0,833,835,3,118,59,0,834,833,1,0,0,0,834,835,
1,0,0,0,835,837,1,0,0,0,836,838,3,128,64,0,837,836,1,0,0,0,837,838,1,0,0,
0,838,845,1,0,0,0,839,841,5,125,0,0,840,842,3,80,40,0,841,840,1,0,0,0,841,
842,1,0,0,0,842,843,1,0,0,0,843,846,5,126,0,0,844,846,5,117,0,0,845,839,
1,0,0,0,845,844,1,0,0,0,846,77,1,0,0,0,847,848,5,27,0,0,848,850,3,378,189,
0,849,851,3,118,59,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,
854,5,129,0,0,853,855,3,84,42,0,854,853,1,0,0,0,854,855,1,0,0,0,855,856,
1,0,0,0,856,858,5,130,0,0,857,859,3,128,64,0,858,857,1,0,0,0,858,859,1,0,
0,0,859,860,1,0,0,0,860,861,5,117,0,0,861,79,1,0,0,0,862,867,3,82,41,0,863,
864,5,116,0,0,864,866,3,82,41,0,865,863,1,0,0,0,866,869,1,0,0,0,867,865,
1,0,0,0,867,868,1,0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,870,872,5,116,0,
0,871,870,1,0,0,0,871,872,1,0,0,0,872,81,1,0,0,0,873,875,3,142,71,0,874,
873,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,880,1,0,
0,0,878,876,1,0,0,0,879,881,3,376,188,0,880,879,1,0,0,0,880,881,1,0,0,0,
881,882,1,0,0,0,882,883,3,378,189,0,883,884,5,118,0,0,884,885,3,286,143,
0,885,83,1,0,0,0,886,891,3,86,43,0,887,888,5,116,0,0,888,890,3,86,43,0,889,
887,1,0,0,0,890,893,1,0,0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,895,1,0,
0,0,893,891,1,0,0,0,894,896,5,116,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,
85,1,0,0,0,897,899,3,142,71,0,898,897,1,0,0,0,899,902,1,0,0,0,900,898,1,
0,0,0,900,901,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,903,905,3,376,188,
0,904,903,1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,906,907,3,286,143,0,907,
87,1,0,0,0,908,909,5,7,0,0,909,911,3,378,189,0,910,912,3,118,59,0,911,910,
1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,915,3,128,64,0,914,913,1,0,0,
0,914,915,1,0,0,0,915,916,1,0,0,0,916,918,5,125,0,0,917,919,3,90,45,0,918,
917,1,0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,921,5,126,0,0,921,89,1,0,
0,0,922,927,3,92,46,0,923,924,5,116,0,0,924,926,3,92,46,0,925,923,1,0,0,
0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,931,1,0,0,0,929,927,
1,0,0,0,930,932,5,116,0,0,931,930,1,0,0,0,931,932,1,0,0,0,932,91,1,0,0,0,
933,935,3,142,71,0,934,933,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,
1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,939,941,3,376,188,0,940,939,1,0,
0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,946,3,378,189,0,943,947,3,94,47,
0,944,947,3,96,48,0,945,947,3,98,49,0,946,943,1,0,0,0,946,944,1,0,0,0,946,
945,1,0,0,0,946,947,1,0,0,0,947,93,1,0,0,0,948,950,5,129,0,0,949,951,3,84,
42,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,5,130,0,0,953,
95,1,0,0,0,954,956,5,125,0,0,955,957,3,80,40,0,956,955,1,0,0,0,956,957,1,
0,0,0,957,958,1,0,0,0,958,959,5,126,0,0,959,97,1,0,0,0,960,961,5,103,0,0,
961,962,3,154,77,0,962,99,1,0,0,0,963,964,5,52,0,0,964,966,3,378,189,0,965,
967,3,118,59,0,966,965,1,0,0,0,966,967,1,0,0,0,967,969,1,0,0,0,968,970,3,
128,64,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,972,5,125,0,
0,972,973,3,80,40,0,973,974,5,126,0,0,974,101,1,0,0,0,975,978,5,3,0,0,976,
979,3,378,189,0,977,979,5,111,0,0,978,976,1,0,0,0,978,977,1,0,0,0,979,980,
1,0,0,0,980,981,5,118,0,0,981,984,3,286,143,0,982,983,5,103,0,0,983,985,
3,154,77,0,984,982,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,987,5,117,
0,0,987,103,1,0,0,0,988,990,5,26,0,0,989,991,5,20,0,0,990,989,1,0,0,0,990,
991,1,0,0,0,991,992,1,0,0,0,992,993,3,378,189,0,993,994,5,118,0,0,994,997,
3,286,143,0,995,996,5,103,0,0,996,998,3,154,77,0,997,995,1,0,0,0,997,998,
1,0,0,0,998,999,1,0,0,0,999,1000,5,117,0,0,1000,105,1,0,0,0,1001,1003,5,
32,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1005,5,
29,0,0,1005,1007,3,378,189,0,1006,1008,3,118,59,0,1007,1006,1,0,0,0,1007,
1008,1,0,0,0,1008,1013,1,0,0,0,1009,1011,5,118,0,0,1010,1012,3,328,164,0,
1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1014,1,0,0,0,1013,1009,1,0,0,0,
1013,1014,1,0,0,0,1014,1016,1,0,0,0,1015,1017,3,128,64,0,1016,1015,1,0,0,
0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1022,5,125,0,0,1019,1021,3,140,
70,0,1020,1019,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,
0,0,1023,1028,1,0,0,0,1024,1022,1,0,0,0,1025,1027,3,138,69,0,1026,1025,1,
0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,1031,1,
0,0,0,1030,1028,1,0,0,0,1031,1032,5,126,0,0,1032,107,1,0,0,0,1033,1036,3,
110,55,0,1034,1036,3,112,56,0,1035,1033,1,0,0,0,1035,1034,1,0,0,0,1036,109,
1,0,0,0,1037,1039,5,13,0,0,1038,1040,3,118,59,0,1039,1038,1,0,0,0,1039,1040,
1,0,0,0,1040,1041,1,0,0,0,1041,1043,3,286,143,0,1042,1044,3,128,64,0,1043,
1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1049,5,125,0,0,1046,
1048,3,140,70,0,1047,1046,1,0,0,0,1048,1051,1,0,0,0,1049,1047,1,0,0,0,1049,
1050,1,0,0,0,1050,1055,1,0,0,0,1051,1049,1,0,0,0,1052,1054,3,138,69,0,1053,
1052,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,
1058,1,0,0,0,1057,1055,1,0,0,0,1058,1059,5,126,0,0,1059,111,1,0,0,0,1060,
1062,5,32,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,
1065,5,13,0,0,1064,1066,3,118,59,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,
1068,1,0,0,0,1067,1069,5,88,0,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,
1070,1,0,0,0,1070,1071,3,368,184,0,1071,1072,5,11,0,0,1072,1074,3,286,143,
0,1073,1075,3,128,64,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,
0,0,1076,1080,5,125,0,0,1077,1079,3,140,70,0,1078,1077,1,0,0,0,1079,1082,
1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,1086,1,0,0,0,1082,1080,
1,0,0,0,1083,1085,3,138,69,0,1084,1083,1,0,0,0,1085,1088,1,0,0,0,1086,1084,
1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,0,1088,1086,1,0,0,0,1089,1090,
5,126,0,0,1090,113,1,0,0,0,1091,1093,5,32,0,0,1092,1091,1,0,0,0,1092,1093,
1,0,0,0,1093,1094,1,0,0,0,1094,1096,5,8,0,0,1095,1097,3,56,28,0,1096,1095,
1,0,0,0,1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,1102,5,125,0,0,1099,1101,
3,140,70,0,1100,1099,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,
1,0,0,0,1103,1108,1,0,0,0,1104,1102,1,0,0,0,1105,1107,3,116,58,0,1106,1105,
1,0,0,0,1107,1110,1,0,0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,1111,
1,0,0,0,1110,1108,1,0,0,0,1111,1112,5,126,0,0,1112,115,1,0,0,0,1113,1115,
3,142,71,0,1114,1113,1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,1116,1117,
1,0,0,0,1117,1127,1,0,0,0,1118,1116,1,0,0,0,1119,1128,3,10,5,0,1120,1122,
3,376,188,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,1125,1,0,0,0,1123,1126,
3,104,52,0,1124,1126,3,52,26,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,
1128,1,0,0,0,1127,1119,1,0,0,0,1127,1121,1,0,0,0,1128,117,1,0,0,0,1129,1142,
5,107,0,0,1130,1131,3,120,60,0,1131,1132,5,116,0,0,1132,1134,1,0,0,0,1133,
1130,1,0,0,0,1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,1,0,0,0,1136,
1138,1,0,0,0,1137,1135,1,0,0,0,1138,1140,3,120,60,0,1139,1141,5,116,0,0,
1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1143,1,0,0,0,1142,1135,1,0,0,0,
1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,1145,5,106,0,0,1145,119,1,0,0,0,
1146,1148,3,142,71,0,1147,1146,1,0,0,0,1148,1151,1,0,0,0,1149,1147,1,0,0,
0,1149,1150,1,0,0,0,1150,1155,1,0,0,0,1151,1149,1,0,0,0,1152,1156,3,122,
61,0,1153,1156,3,124,62,0,1154,1156,3,126,63,0,1155,1152,1,0,0,0,1155,1153,
1,0,0,0,1155,1154,1,0,0,0,1156,121,1,0,0,0,1157,1159,3,142,71,0,1158,1157,
1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,1163,5,81,0,0,1161,1162,
5,118,0,0,1162,1164,3,334,167,0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,
123,1,0,0,0,1165,1167,3,142,71,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,
1168,1,0,0,0,1168,1173,3,378,189,0,1169,1171,5,118,0,0,1170,1172,3,328,164,
0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,0,1173,1169,1,0,0,
0,1173,1174,1,0,0,0,1174,1177,1,0,0,0,1175,1176,5,103,0,0,1176,1178,3,286,
143,0,1177,1175,1,0,0,0,1177,1178,1,0,0,0,1178,125,1,0,0,0,1179,1180,5,3,
0,0,1180,1181,3,378,189,0,1181,1182,5,118,0,0,1182,1183,3,286,143,0,1183,
127,1,0,0,0,1184,1190,5,34,0,0,1185,1186,3,130,65,0,1186,1187,5,116,0,0,
1187,1189,1,0,0,0,1188,1185,1,0,0,0,1189,1192,1,0,0,0,1190,1188,1,0,0,0,
1190,1191,1,0,0,0,1191,1194,1,0,0,0,1192,1190,1,0,0,0,1193,1195,3,130,65,
0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,129,1,0,0,0,1196,1199,3,132,66,
0,1197,1199,3,134,67,0,1198,1196,1,0,0,0,1198,1197,1,0,0,0,1199,131,1,0,
0,0,1200,1201,3,336,168,0,1201,1202,5,118,0,0,1202,1203,3,334,167,0,1203,
133,1,0,0,0,1204,1206,3,136,68,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,
1207,1,0,0,0,1207,1208,3,286,143,0,1208,1210,5,118,0,0,1209,1211,3,328,164,
0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,135,1,0,0,0,1212,1213,5,11,0,
0,1213,1214,3,118,59,0,1214,137,1,0,0,0,1215,1217,3,142,71,0,1216,1215,1,
0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,1230,1,
0,0,0,1220,1218,1,0,0,0,1221,1231,3,10,5,0,1222,1224,3,376,188,0,1223,1222,
1,0,0,0,1223,1224,1,0,0,0,1224,1228,1,0,0,0,1225,1229,3,72,36,0,1226,1229,
3,102,51,0,1227,1229,3,52,26,0,1228,1225,1,0,0,0,1228,1226,1,0,0,0,1228,
1227,1,0,0,0,1229,1231,1,0,0,0,1230,1221,1,0,0,0,1230,1223,1,0,0,0,1231,
139,1,0,0,0,1232,1233,5,122,0,0,1233,1234,5,88,0,0,1234,1235,5,127,0,0,1235,
1236,3,144,72,0,1236,1237,5,128,0,0,1237,141,1,0,0,0,1238,1239,5,122,0,0,
1239,1240,5,127,0,0,1240,1241,3,144,72,0,1241,1242,5,128,0,0,1242,143,1,
0,0,0,1243,1245,3,338,169,0,1244,1246,3,146,73,0,1245,1244,1,0,0,0,1245,
1246,1,0,0,0,1246,145,1,0,0,0,1247,1251,3,4,2,0,1248,1249,5,103,0,0,1249,
1251,3,162,81,0,1250,1247,1,0,0,0,1250,1248,1,0,0,0,1251,147,1,0,0,0,1252,
1258,5,117,0,0,1253,1258,3,34,17,0,1254,1258,3,150,75,0,1255,1258,3,152,
76,0,1256,1258,3,10,5,0,1257,1252,1,0,0,0,1257,1253,1,0,0,0,1257,1254,1,
0,0,0,1257,1255,1,0,0,0,1257,1256,1,0,0,0,1258,149,1,0,0,0,1259,1261,3,142,
71,0,1260,1259,1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,1262,1263,1,0,
0,0,1263,1265,1,0,0,0,1264,1262,1,0,0,0,1265,1266,5,15,0,0,1266,1269,3,242,
121,0,1267,1268,5,118,0,0,1268,1270,3,286,143,0,1269,1267,1,0,0,0,1269,1270,
1,0,0,0,1270,1273,1,0,0,0,1271,1272,5,103,0,0,1272,1274,3,154,77,0,1273,
1271,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1276,5,117,0,0,1276,
151,1,0,0,0,1277,1278,3,154,77,0,1278,1279,5,117,0,0,1279,1285,1,0,0,0,1280,
1282,3,160,80,0,1281,1283,5,117,0,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,
1283,1285,1,0,0,0,1284,1277,1,0,0,0,1284,1280,1,0,0,0,1285,153,1,0,0,0,1286,
1288,6,77,-1,0,1287,1289,3,142,71,0,1288,1287,1,0,0,0,1289,1290,1,0,0,0,
1290,1288,1,0,0,0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1293,3,154,77,
40,1293,1367,1,0,0,0,1294,1367,3,162,81,0,1295,1367,3,164,82,0,1296,1298,
7,2,0,0,1297,1299,5,20,0,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,1300,
1,0,0,0,1300,1367,3,154,77,30,1301,1302,5,84,0,0,1302,1367,3,154,77,29,1303,
1304,7,3,0,0,1304,1367,3,154,77,28,1305,1307,5,113,0,0,1306,1308,3,154,77,
0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,1367,1,0,0,0,1309,1310,5,115,
0,0,1310,1367,3,154,77,15,1311,1313,5,4,0,0,1312,1314,5,81,0,0,1313,1312,
1,0,0,0,1313,1314,1,0,0,0,1314,1316,1,0,0,0,1315,1317,3,154,77,0,1316,1315,
1,0,0,0,1316,1317,1,0,0,0,1317,1367,1,0,0,0,1318,1320,5,2,0,0,1319,1321,
5,81,0,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,1323,1,0,0,0,1322,1324,
3,154,77,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1367,1,0,0,0,1325,1327,
5,23,0,0,1326,1328,3,154,77,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1367,
1,0,0,0,1329,1333,5,129,0,0,1330,1332,3,140,70,0,1331,1330,1,0,0,0,1332,
1335,1,0,0,0,1333,1331,1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,
1333,1,0,0,0,1336,1337,3,154,77,0,1337,1338,5,130,0,0,1338,1367,1,0,0,0,
1339,1343,5,127,0,0,1340,1342,3,140,70,0,1341,1340,1,0,0,0,1342,1345,1,0,
0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,
0,0,1346,1348,3,174,87,0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,1349,1,
0,0,0,1349,1367,5,128,0,0,1350,1354,5,129,0,0,1351,1353,3,140,70,0,1352,
1351,1,0,0,0,1353,1356,1,0,0,0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,
1358,1,0,0,0,1356,1354,1,0,0,0,1357,1359,3,176,88,0,1358,1357,1,0,0,0,1358,
1359,1,0,0,0,1359,1360,1,0,0,0,1360,1367,5,130,0,0,1361,1367,3,180,90,0,
1362,1367,3,194,97,0,1363,1367,3,208,104,0,1364,1367,3,160,80,0,1365,1367,
3,2,1,0,1366,1286,1,0,0,0,1366,1294,1,0,0,0,1366,1295,1,0,0,0,1366,1296,
1,0,0,0,1366,1301,1,0,0,0,1366,1303,1,0,0,0,1366,1305,1,0,0,0,1366,1309,
1,0,0,0,1366,1311,1,0,0,0,1366,1318,1,0,0,0,1366,1325,1,0,0,0,1366,1329,
1,0,0,0,1366,1339,1,0,0,0,1366,1350,1,0,0,0,1366,1361,1,0,0,0,1366,1362,
1,0,0,0,1366,1363,1,0,0,0,1366,1364,1,0,0,0,1366,1365,1,0,0,0,1367,1451,
1,0,0,0,1368,1369,10,26,0,0,1369,1370,7,4,0,0,1370,1450,3,154,77,27,1371,
1372,10,25,0,0,1372,1373,7,5,0,0,1373,1450,3,154,77,26,1374,1377,10,24,0,
0,1375,1378,3,388,194,0,1376,1378,3,390,195,0,1377,1375,1,0,0,0,1377,1376,
1,0,0,0,1378,1379,1,0,0,0,1379,1380,3,154,77,25,1380,1450,1,0,0,0,1381,1382,
10,23,0,0,1382,1383,5,89,0,0,1383,1450,3,154,77,24,1384,1385,10,22,0,0,1385,
1386,5,87,0,0,1386,1450,3,154,77,23,1387,1388,10,21,0,0,1388,1389,5,90,0,
0,1389,1450,3,154,77,22,1390,1391,10,20,0,0,1391,1392,3,156,78,0,1392,1393,
3,154,77,21,1393,1450,1,0,0,0,1394,1395,10,19,0,0,1395,1396,5,91,0,0,1396,
1450,3,154,77,20,1397,1398,10,18,0,0,1398,1399,5,92,0,0,1399,1450,3,154,
77,19,1400,1401,10,14,0,0,1401,1402,5,115,0,0,1402,1450,3,154,77,15,1403,
1404,10,13,0,0,1404,1405,5,103,0,0,1405,1450,3,154,77,14,1406,1407,10,12,
0,0,1407,1408,3,158,79,0,1408,1409,3,154,77,13,1409,1450,1,0,0,0,1410,1411,
10,37,0,0,1411,1412,5,112,0,0,1412,1413,3,344,172,0,1413,1415,5,129,0,0,
1414,1416,3,206,103,0,1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,
0,0,1417,1418,5,130,0,0,1418,1450,1,0,0,0,1419,1420,10,36,0,0,1420,1421,
5,112,0,0,1421,1450,3,378,189,0,1422,1423,10,35,0,0,1423,1424,5,112,0,0,
1424,1450,3,178,89,0,1425,1426,10,34,0,0,1426,1427,5,112,0,0,1427,1450,5,
37,0,0,1428,1429,10,33,0,0,1429,1431,5,129,0,0,1430,1432,3,206,103,0,1431,
1430,1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,1450,5,130,0,0,1434,
1435,10,32,0,0,1435,1436,5,127,0,0,1436,1437,3,154,77,0,1437,1438,5,128,
0,0,1438,1450,1,0,0,0,1439,1440,10,31,0,0,1440,1450,5,124,0,0,1441,1442,
10,27,0,0,1442,1443,5,1,0,0,1443,1450,3,288,144,0,1444,1445,10,17,0,0,1445,
1447,5,113,0,0,1446,1448,3,154,77,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,
1448,1450,1,0,0,0,1449,1368,1,0,0,0,1449,1371,1,0,0,0,1449,1374,1,0,0,0,
1449,1381,1,0,0,0,1449,1384,1,0,0,0,1449,1387,1,0,0,0,1449,1390,1,0,0,0,
1449,1394,1,0,0,0,1449,1397,1,0,0,0,1449,1400,1,0,0,0,1449,1403,1,0,0,0,
1449,1406,1,0,0,0,1449,1410,1,0,0,0,1449,1419,1,0,0,0,1449,1422,1,0,0,0,
1449,1425,1,0,0,0,1449,1428,1,0,0,0,1449,1434,1,0,0,0,1449,1439,1,0,0,0,
1449,1441,1,0,0,0,1449,1444,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,0,0,0,
1451,1452,1,0,0,0,1452,155,1,0,0,0,1453,1451,1,0,0,0,1454,1455,7,6,0,0,1455,
157,1,0,0,0,1456,1457,7,7,0,0,1457,159,1,0,0,0,1458,1460,3,142,71,0,1459,
1458,1,0,0,0,1460,1461,1,0,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,
1463,1,0,0,0,1463,1464,3,160,80,0,1464,1473,1,0,0,0,1465,1473,3,166,83,0,
1466,1473,3,170,85,0,1467,1473,3,172,86,0,1468,1473,3,214,107,0,1469,1473,
3,226,113,0,1470,1473,3,228,114,0,1471,1473,3,230,115,0,1472,1459,1,0,0,
0,1472,1465,1,0,0,0,1472,1466,1,0,0,0,1472,1467,1,0,0,0,1472,1468,1,0,0,
0,1472,1469,1,0,0,0,1472,1470,1,0,0,0,1472,1471,1,0,0,0,1473,161,1,0,0,0,
1474,1475,7,8,0,0,1475,163,1,0,0,0,1476,1479,3,342,171,0,1477,1479,3,362,
181,0,1478,1476,1,0,0,0,1478,1477,1,0,0,0,1479,165,1,0,0,0,1480,1484,5,125,
0,0,1481,1483,3,140,70,0,1482,1481,1,0,0,0,1483,1486,1,0,0,0,1484,1482,1,
0,0,0,1484,1485,1,0,0,0,1485,1488,1,0,0,0,1486,1484,1,0,0,0,1487,1489,3,
168,84,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,1490,1,0,0,0,1490,1491,
5,126,0,0,1491,167,1,0,0,0,1492,1494,3,148,74,0,1493,1492,1,0,0,0,1494,1495,
1,0,0,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,1498,1,0,0,0,1497,1499,
3,154,77,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1502,1,0,0,0,1500,1502,
3,154,77,0,1501,1493,1,0,0,0,1501,1500,1,0,0,0,1502,169,1,0,0,0,1503,1505,
5,36,0,0,1504,1506,5,19,0,0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,1507,
1,0,0,0,1507,1508,3,166,83,0,1508,171,1,0,0,0,1509,1510,5,32,0,0,1510,1511,
3,166,83,0,1511,173,1,0,0,0,1512,1517,3,154,77,0,1513,1514,5,116,0,0,1514,
1516,3,154,77,0,1515,1513,1,0,0,0,1516,1519,1,0,0,0,1517,1515,1,0,0,0,1517,
1518,1,0,0,0,1518,1521,1,0,0,0,1519,1517,1,0,0,0,1520,1522,5,116,0,0,1521,
1520,1,0,0,0,1521,1522,1,0,0,0,1522,1528,1,0,0,0,1523,1524,3,154,77,0,1524,
1525,5,117,0,0,1525,1526,3,154,77,0,1526,1528,1,0,0,0,1527,1512,1,0,0,0,
1527,1523,1,0,0,0,1528,175,1,0,0,0,1529,1530,3,154,77,0,1530,1531,5,116,
0,0,1531,1533,1,0,0,0,1532,1529,1,0,0,0,1533,1534,1,0,0,0,1534,1532,1,0,
0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,1538,3,154,77,0,1537,1536,1,
0,0,0,1537,1538,1,0,0,0,1538,177,1,0,0,0,1539,1540,5,75,0,0,1540,179,1,0,
0,0,1541,1545,3,182,91,0,1542,1545,3,190,95,0,1543,1545,3,192,96,0,1544,
1541,1,0,0,0,1544,1542,1,0,0,0,1544,1543,1,0,0,0,1545,181,1,0,0,0,1546,1547,
3,342,171,0,1547,1551,5,125,0,0,1548,1550,3,140,70,0,1549,1548,1,0,0,0,1550,
1553,1,0,0,0,1551,1549,1,0,0,0,1551,1552,1,0,0,0,1552,1556,1,0,0,0,1553,
1551,1,0,0,0,1554,1557,3,184,92,0,1555,1557,3,188,94,0,1556,1554,1,0,0,0,
1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1558,1,0,0,0,1558,1559,5,126,0,
0,1559,183,1,0,0,0,1560,1565,3,186,93,0,1561,1562,5,116,0,0,1562,1564,3,
186,93,0,1563,1561,1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,
1,0,0,0,1566,1573,1,0,0,0,1567,1565,1,0,0,0,1568,1569,5,116,0,0,1569,1574,
3,188,94,0,1570,1572,5,116,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,
1574,1,0,0,0,1573,1568,1,0,0,0,1573,1571,1,0,0,0,1574,185,1,0,0,0,1575,1577,
3,142,71,0,1576,1575,1,0,0,0,1577,1580,1,0,0,0,1578,1576,1,0,0,0,1578,1579,
1,0,0,0,1579,1589,1,0,0,0,1580,1578,1,0,0,0,1581,1590,3,378,189,0,1582,1585,
3,378,189,0,1583,1585,3,178,89,0,1584,1582,1,0,0,0,1584,1583,1,0,0,0,1585,
1586,1,0,0,0,1586,1587,5,118,0,0,1587,1588,3,154,77,0,1588,1590,1,0,0,0,
1589,1581,1,0,0,0,1589,1584,1,0,0,0,1590,187,1,0,0,0,1591,1592,5,113,0,0,
1592,1593,3,154,77,0,1593,189,1,0,0,0,1594,1595,3,342,171,0,1595,1599,5,
129,0,0,1596,1598,3,140,70,0,1597,1596,1,0,0,0,1598,1601,1,0,0,0,1599,1597,
1,0,0,0,1599,1600,1,0,0,0,1600,1613,1,0,0,0,1601,1599,1,0,0,0,1602,1607,
3,154,77,0,1603,1604,5,116,0,0,1604,1606,3,154,77,0,1605,1603,1,0,0,0,1606,
1609,1,0,0,0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,1611,1,0,0,0,1609,
1607,1,0,0,0,1610,1612,5,116,0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,
1614,1,0,0,0,1613,1602,1,0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,
1616,5,130,0,0,1616,191,1,0,0,0,1617,1618,3,342,171,0,1618,193,1,0,0,0,1619,
1623,3,196,98,0,1620,1623,3,202,101,0,1621,1623,3,204,102,0,1622,1619,1,
0,0,0,1622,1620,1,0,0,0,1622,1621,1,0,0,0,1623,195,1,0,0,0,1624,1625,3,342,
171,0,1625,1627,5,125,0,0,1626,1628,3,198,99,0,1627,1626,1,0,0,0,1627,1628,
1,0,0,0,1628,1629,1,0,0,0,1629,1630,5,126,0,0,1630,197,1,0,0,0,1631,1636,
3,200,100,0,1632,1633,5,116,0,0,1633,1635,3,200,100,0,1634,1632,1,0,0,0,
1635,1638,1,0,0,0,1636,1634,1,0,0,0,1636,1637,1,0,0,0,1637,1640,1,0,0,0,
1638,1636,1,0,0,0,1639,1641,5,116,0,0,1640,1639,1,0,0,0,1640,1641,1,0,0,
0,1641,199,1,0,0,0,1642,1651,3,378,189,0,1643,1646,3,378,189,0,1644,1646,
3,178,89,0,1645,1643,1,0,0,0,1645,1644,1,0,0,0,1646,1647,1,0,0,0,1647,1648,
5,118,0,0,1648,1649,3,154,77,0,1649,1651,1,0,0,0,1650,1642,1,0,0,0,1650,
1645,1,0,0,0,1651,201,1,0,0,0,1652,1653,3,342,171,0,1653,1665,5,129,0,0,
1654,1659,3,154,77,0,1655,1656,5,116,0,0,1656,1658,3,154,77,0,1657,1655,
1,0,0,0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,1663,
1,0,0,0,1661,1659,1,0,0,0,1662,1664,5,116,0,0,1663,1662,1,0,0,0,1663,1664,
1,0,0,0,1664,1666,1,0,0,0,1665,1654,1,0,0,0,1665,1666,1,0,0,0,1666,1667,
1,0,0,0,1667,1668,5,130,0,0,1668,203,1,0,0,0,1669,1670,3,342,171,0,1670,
205,1,0,0,0,1671,1676,3,154,77,0,1672,1673,5,116,0,0,1673,1675,3,154,77,
0,1674,1672,1,0,0,0,1675,1678,1,0,0,0,1676,1674,1,0,0,0,1676,1677,1,0,0,
0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,1679,1681,5,116,0,0,1680,1679,1,0,
0,0,1680,1681,1,0,0,0,1681,207,1,0,0,0,1682,1684,5,19,0,0,1683,1682,1,0,
0,0,1683,1684,1,0,0,0,1684,1691,1,0,0,0,1685,1692,5,92,0,0,1686,1688,5,90,
0,0,1687,1689,3,210,105,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,1690,
1,0,0,0,1690,1692,5,90,0,0,1691,1685,1,0,0,0,1691,1686,1,0,0,0,1692,1698,
1,0,0,0,1693,1699,3,154,77,0,1694,1695,5,120,0,0,1695,1696,3,288,144,0,1696,
1697,3,166,83,0,1697,1699,1,0,0,0,1698,1693,1,0,0,0,1698,1694,1,0,0,0,1699,
209,1,0,0,0,1700,1705,3,212,106,0,1701,1702,5,116,0,0,1702,1704,3,212,106,
0,1703,1701,1,0,0,0,1704,1707,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,
0,1706,1709,1,0,0,0,1707,1705,1,0,0,0,1708,1710,5,116,0,0,1709,1708,1,0,
0,0,1709,1710,1,0,0,0,1710,211,1,0,0,0,1711,1713,3,142,71,0,1712,1711,1,
0,0,0,1713,1716,1,0,0,0,1714,1712,1,0,0,0,1714,1715,1,0,0,0,1715,1717,1,
0,0,0,1716,1714,1,0,0,0,1717,1720,3,240,120,0,1718,1719,5,118,0,0,1719,1721,
3,286,143,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,213,1,0,0,0,1722,1724,
3,224,112,0,1723,1722,1,0,0,0,1723,1724,1,0,0,0,1724,1729,1,0,0,0,1725,1730,
3,216,108,0,1726,1730,3,218,109,0,1727,1730,3,220,110,0,1728,1730,3,222,
111,0,1729,1725,1,0,0,0,1729,1726,1,0,0,0,1729,1727,1,0,0,0,1729,1728,1,
0,0,0,1730,215,1,0,0,0,1731,1732,5,16,0,0,1732,1733,3,166,83,0,1733,217,
1,0,0,0,1734,1735,5,35,0,0,1735,1736,3,154,77,0,1736,1737,3,166,83,0,1737,
219,1,0,0,0,1738,1739,5,35,0,0,1739,1740,5,15,0,0,1740,1741,3,240,120,0,
1741,1742,5,103,0,0,1742,1743,3,154,77,0,1743,1744,3,166,83,0,1744,221,1,
0,0,0,1745,1746,5,11,0,0,1746,1747,3,240,120,0,1747,1748,5,14,0,0,1748,1749,
3,154,77,0,1749,1750,3,166,83,0,1750,223,1,0,0,0,1751,1752,5,81,0,0,1752,
1753,5,118,0,0,1753,225,1,0,0,0,1754,1755,5,12,0,0,1755,1756,3,154,77,0,
1756,1763,3,166,83,0,1757,1761,5,6,0,0,1758,1762,3,166,83,0,1759,1762,3,
226,113,0,1760,1762,3,228,114,0,1761,1758,1,0,0,0,1761,1759,1,0,0,0,1761,
1760,1,0,0,0,1762,1764,1,0,0,0,1763,1757,1,0,0,0,1763,1764,1,0,0,0,1764,
227,1,0,0,0,1765,1766,5,12,0,0,1766,1767,5,15,0,0,1767,1768,3,240,120,0,
1768,1769,5,103,0,0,1769,1770,3,154,77,0,1770,1777,3,166,83,0,1771,1775,
5,6,0,0,1772,1776,3,166,83,0,1773,1776,3,226,113,0,1774,1776,3,228,114,0,
1775,1772,1,0,0,0,1775,1773,1,0,0,0,1775,1774,1,0,0,0,1776,1778,1,0,0,0,
1777,1771,1,0,0,0,1777,1778,1,0,0,0,1778,229,1,0,0,0,1779,1780,5,17,0,0,
1780,1781,3,154,77,0,1781,1785,5,125,0,0,1782,1784,3,140,70,0,1783,1782,
1,0,0,0,1784,1787,1,0,0,0,1785,1783,1,0,0,0,1785,1786,1,0,0,0,1786,1789,
1,0,0,0,1787,1785,1,0,0,0,1788,1790,3,232,116,0,1789,1788,1,0,0,0,1789,1790,
1,0,0,0,1790,1791,1,0,0,0,1791,1792,5,126,0,0,1792,231,1,0,0,0,1793,1794,
3,236,118,0,1794,1795,5,121,0,0,1795,1796,3,234,117,0,1796,1798,1,0,0,0,
1797,1793,1,0,0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,
1800,1802,1,0,0,0,1801,1799,1,0,0,0,1802,1803,3,236,118,0,1803,1804,5,121,
0,0,1804,1806,3,154,77,0,1805,1807,5,116,0,0,1806,1805,1,0,0,0,1806,1807,
1,0,0,0,1807,233,1,0,0,0,1808,1809,3,154,77,0,1809,1810,5,116,0,0,1810,1816,
1,0,0,0,1811,1813,3,160,80,0,1812,1814,5,116,0,0,1813,1812,1,0,0,0,1813,
1814,1,0,0,0,1814,1816,1,0,0,0,1815,1808,1,0,0,0,1815,1811,1,0,0,0,1816,
235,1,0,0,0,1817,1819,3,142,71,0,1818,1817,1,0,0,0,1819,1822,1,0,0,0,1820,
1818,1,0,0,0,1820,1821,1,0,0,0,1821,1823,1,0,0,0,1822,1820,1,0,0,0,1823,
1825,3,240,120,0,1824,1826,3,238,119,0,1825,1824,1,0,0,0,1825,1826,1,0,0,
0,1826,237,1,0,0,0,1827,1828,5,12,0,0,1828,1829,3,154,77,0,1829,239,1,0,
0,0,1830,1832,5,90,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1833,1,0,
0,0,1833,1838,3,242,121,0,1834,1835,5,90,0,0,1835,1837,3,242,121,0,1836,
1834,1,0,0,0,1837,1840,1,0,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,
241,1,0,0,0,1840,1838,1,0,0,0,1841,1844,3,244,122,0,1842,1844,3,254,127,
0,1843,1841,1,0,0,0,1843,1842,1,0,0,0,1844,243,1,0,0,0,1845,1858,3,246,123,
0,1846,1858,3,248,124,0,1847,1858,3,250,125,0,1848,1858,3,252,126,0,1849,
1858,3,258,129,0,1850,1858,3,260,130,0,1851,1858,3,270,135,0,1852,1858,3,
274,137,0,1853,1858,3,278,139,0,1854,1858,3,280,140,0,1855,1858,3,284,142,
0,1856,1858,3,2,1,0,1857,1845,1,0,0,0,1857,1846,1,0,0,0,1857,1847,1,0,0,
0,1857,1848,1,0,0,0,1857,1849,1,0,0,0,1857,1850,1,0,0,0,1857,1851,1,0,0,
0,1857,1852,1,0,0,0,1857,1853,1,0,0,0,1857,1854,1,0,0,0,1857,1855,1,0,0,
0,1857,1856,1,0,0,0,1858,245,1,0,0,0,1859,1876,5,30,0,0,1860,1876,5,9,0,
0,1861,1876,5,69,0,0,1862,1876,5,72,0,0,1863,1876,5,70,0,0,1864,1876,5,71,
0,0,1865,1876,5,73,0,0,1866,1876,5,74,0,0,1867,1869,5,83,0,0,1868,1867,1,
0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,1876,5,75,0,0,1871,1873,5,
83,0,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1876,5,
80,0,0,1875,1859,1,0,0,0,1875,1860,1,0,0,0,1875,1861,1,0,0,0,1875,1862,1,
0,0,0,1875,1863,1,0,0,0,1875,1864,1,0,0,0,1875,1865,1,0,0,0,1875,1866,1,
0,0,0,1875,1868,1,0,0,0,1875,1872,1,0,0,0,1876,247,1,0,0,0,1877,1879,5,22,
0,0,1878,1877,1,0,0,0,1878,1879,1,0,0,0,1879,1881,1,0,0,0,1880,1882,5,20,
0,0,1881,1880,1,0,0,0,1881,1882,1,0,0,0,1882,1883,1,0,0,0,1883,1886,3,378,
189,0,1884,1885,5,110,0,0,1885,1887,3,240,120,0,1886,1884,1,0,0,0,1886,1887,
1,0,0,0,1887,249,1,0,0,0,1888,1889,5,111,0,0,1889,251,1,0,0,0,1890,1891,
5,113,0,0,1891,253,1,0,0,0,1892,1893,3,256,128,0,1893,1894,5,115,0,0,1894,
1895,3,256,128,0,1895,1904,1,0,0,0,1896,1897,3,256,128,0,1897,1898,5,113,
0,0,1898,1904,1,0,0,0,1899,1900,3,256,128,0,1900,1901,5,114,0,0,1901,1902,
3,256,128,0,1902,1904,1,0,0,0,1903,1892,1,0,0,0,1903,1896,1,0,0,0,1903,1899,
1,0,0,0,1904,255,1,0,0,0,1905,1917,5,69,0,0,1906,1917,5,72,0,0,1907,1909,
5,83,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1910,1,0,0,0,1910,1917,
5,75,0,0,1911,1913,5,83,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,
1,0,0,0,1914,1917,5,80,0,0,1915,1917,3,284,142,0,1916,1905,1,0,0,0,1916,
1906,1,0,0,0,1916,1908,1,0,0,0,1916,1912,1,0,0,0,1916,1915,1,0,0,0,1917,
257,1,0,0,0,1918,1920,7,2,0,0,1919,1921,5,20,0,0,1920,1919,1,0,0,0,1920,
1921,1,0,0,0,1921,1922,1,0,0,0,1922,1923,3,244,122,0,1923,259,1,0,0,0,1924,
1925,3,342,171,0,1925,1927,5,125,0,0,1926,1928,3,262,131,0,1927,1926,1,0,
0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1930,5,126,0,0,1930,261,1,0,
0,0,1931,1936,3,264,132,0,1932,1934,5,116,0,0,1933,1935,3,268,134,0,1934,
1933,1,0,0,0,1934,1935,1,0,0,0,1935,1937,1,0,0,0,1936,1932,1,0,0,0,1936,
1937,1,0,0,0,1937,1940,1,0,0,0,1938,1940,3,268,134,0,1939,1931,1,0,0,0,1939,
1938,1,0,0,0,1940,263,1,0,0,0,1941,1946,3,266,133,0,1942,1943,5,116,0,0,
1943,1945,3,266,133,0,1944,1942,1,0,0,0,1945,1948,1,0,0,0,1946,1944,1,0,
0,0,1946,1947,1,0,0,0,1947,265,1,0,0,0,1948,1946,1,0,0,0,1949,1951,3,142,
71,0,1950,1949,1,0,0,0,1951,1954,1,0,0,0,1952,1950,1,0,0,0,1952,1953,1,0,
0,0,1953,1970,1,0,0,0,1954,1952,1,0,0,0,1955,1956,3,178,89,0,1956,1957,5,
118,0,0,1957,1958,3,240,120,0,1958,1971,1,0,0,0,1959,1960,3,378,189,0,1960,
1961,5,118,0,0,1961,1962,3,240,120,0,1962,1971,1,0,0,0,1963,1965,5,22,0,
0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1967,1,0,0,0,1966,1968,5,20,0,
0,1967,1966,1,0,0,0,1967,1968,1,0,0,0,1968,1969,1,0,0,0,1969,1971,3,378,
189,0,1970,1955,1,0,0,0,1970,1959,1,0,0,0,1970,1964,1,0,0,0,1971,267,1,0,
0,0,1972,1974,3,142,71,0,1973,1972,1,0,0,0,1974,1977,1,0,0,0,1975,1973,1,
0,0,0,1975,1976,1,0,0,0,1976,1978,1,0,0,0,1977,1975,1,0,0,0,1978,1979,5,
113,0,0,1979,269,1,0,0,0,1980,1981,3,342,171,0,1981,1983,5,129,0,0,1982,
1984,3,272,136,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,1,0,0,0,1985,
1986,5,130,0,0,1986,271,1,0,0,0,1987,1992,3,240,120,0,1988,1989,5,116,0,
0,1989,1991,3,240,120,0,1990,1988,1,0,0,0,1991,1994,1,0,0,0,1992,1990,1,
0,0,0,1992,1993,1,0,0,0,1993,1996,1,0,0,0,1994,1992,1,0,0,0,1995,1997,5,
116,0,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,273,1,0,0,0,1998,2000,5,
129,0,0,1999,2001,3,276,138,0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,
1,0,0,0,2002,2003,5,130,0,0,2003,275,1,0,0,0,2004,2005,3,240,120,0,2005,
2006,5,116,0,0,2006,2019,1,0,0,0,2007,2019,3,252,126,0,2008,2011,3,240,120,
0,2009,2010,5,116,0,0,2010,2012,3,240,120,0,2011,2009,1,0,0,0,2012,2013,
1,0,0,0,2013,2011,1,0,0,0,2013,2014,1,0,0,0,2014,2016,1,0,0,0,2015,2017,
5,116,0,0,2016,2015,1,0,0,0,2016,2017,1,0,0,0,2017,2019,1,0,0,0,2018,2004,
1,0,0,0,2018,2007,1,0,0,0,2018,2008,1,0,0,0,2019,277,1,0,0,0,2020,2021,5,
129,0,0,2021,2022,3,240,120,0,2022,2023,5,130,0,0,2023,279,1,0,0,0,2024,
2026,5,127,0,0,2025,2027,3,282,141,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,
2027,2028,1,0,0,0,2028,2029,5,128,0,0,2029,281,1,0,0,0,2030,2035,3,240,120,
0,2031,2032,5,116,0,0,2032,2034,3,240,120,0,2033,2031,1,0,0,0,2034,2037,
1,0,0,0,2035,2033,1,0,0,0,2035,2036,1,0,0,0,2036,2039,1,0,0,0,2037,2035,
1,0,0,0,2038,2040,5,116,0,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,283,
1,0,0,0,2041,2044,3,342,171,0,2042,2044,3,362,181,0,2043,2041,1,0,0,0,2043,
2042,1,0,0,0,2044,285,1,0,0,0,2045,2049,3,288,144,0,2046,2049,3,322,161,
0,2047,2049,3,318,159,0,2048,2045,1,0,0,0,2048,2046,1,0,0,0,2048,2047,1,
0,0,0,2049,287,1,0,0,0,2050,2065,3,290,145,0,2051,2065,3,324,162,0,2052,
2065,3,320,160,0,2053,2065,3,368,184,0,2054,2065,3,294,147,0,2055,2065,3,
292,146,0,2056,2065,3,302,151,0,2057,2065,3,300,150,0,2058,2065,3,296,148,
0,2059,2065,3,298,149,0,2060,2065,3,326,163,0,2061,2065,3,366,183,0,2062,
2065,3,304,152,0,2063,2065,3,2,1,0,2064,2050,1,0,0,0,2064,2051,1,0,0,0,2064,
2052,1,0,0,0,2064,2053,1,0,0,0,2064,2054,1,0,0,0,2064,2055,1,0,0,0,2064,
2056,1,0,0,0,2064,2057,1,0,0,0,2064,2058,1,0,0,0,2064,2059,1,0,0,0,2064,
2060,1,0,0,0,2064,2061,1,0,0,0,2064,2062,1,0,0,0,2064,2063,1,0,0,0,2065,
289,1,0,0,0,2066,2067,5,129,0,0,2067,2068,3,286,143,0,2068,2069,5,130,0,
0,2069,291,1,0,0,0,2070,2071,5,88,0,0,2071,293,1,0,0,0,2072,2083,5,129,0,
0,2073,2074,3,286,143,0,2074,2075,5,116,0,0,2075,2077,1,0,0,0,2076,2073,
1,0,0,0,2077,2078,1,0,0,0,2078,2076,1,0,0,0,2078,2079,1,0,0,0,2079,2081,
1,0,0,0,2080,2082,3,286,143,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2084,
1,0,0,0,2083,2076,1,0,0,0,2083,2084,1,0,0,0,2084,2085,1,0,0,0,2085,2086,
5,130,0,0,2086,295,1,0,0,0,2087,2088,5,127,0,0,2088,2089,3,286,143,0,2089,
2090,5,117,0,0,2090,2091,3,154,77,0,2091,2092,5,128,0,0,2092,297,1,0,0,0,
2093,2094,5,127,0,0,2094,2095,3,286,143,0,2095,2096,5,128,0,0,2096,299,1,
0,0,0,2097,2099,5,89,0,0,2098,2100,3,336,168,0,2099,2098,1,0,0,0,2099,2100,
1,0,0,0,2100,2102,1,0,0,0,2101,2103,5,20,0,0,2102,2101,1,0,0,0,2102,2103,
1,0,0,0,2103,2104,1,0,0,0,2104,2105,3,288,144,0,2105,301,1,0,0,0,2106,2107,
5,84,0,0,2107,2108,7,9,0,0,2108,2109,3,288,144,0,2109,303,1,0,0,0,2110,2112,
3,136,68,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,1,0,0,0,2113,2114,
3,306,153,0,2114,2115,5,10,0,0,2115,2117,5,129,0,0,2116,2118,3,310,155,0,
2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2119,1,0,0,0,2119,2121,5,130,0,
0,2120,2122,3,308,154,0,2121,2120,1,0,0,0,2121,2122,1,0,0,0,2122,305,1,0,
0,0,2123,2125,5,32,0,0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,2125,2130,1,0,
0,0,2126,2128,5,8,0,0,2127,2129,3,56,28,0,2128,2127,1,0,0,0,2128,2129,1,
0,0,0,2129,2131,1,0,0,0,2130,2126,1,0,0,0,2130,2131,1,0,0,0,2131,307,1,0,
0,0,2132,2133,5,120,0,0,2133,2134,3,288,144,0,2134,309,1,0,0,0,2135,2138,
3,312,156,0,2136,2138,3,316,158,0,2137,2135,1,0,0,0,2137,2136,1,0,0,0,2138,
311,1,0,0,0,2139,2144,3,314,157,0,2140,2141,5,116,0,0,2141,2143,3,314,157,
0,2142,2140,1,0,0,0,2143,2146,1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,0,
0,2145,2148,1,0,0,0,2146,2144,1,0,0,0,2147,2149,5,116,0,0,2148,2147,1,0,
0,0,2148,2149,1,0,0,0,2149,313,1,0,0,0,2150,2152,3,142,71,0,2151,2150,1,
0,0,0,2152,2155,1,0,0,0,2153,2151,1,0,0,0,2153,2154,1,0,0,0,2154,2161,1,
0,0,0,2155,2153,1,0,0,0,2156,2159,3,378,189,0,2157,2159,5,111,0,0,2158,2156,
1,0,0,0,2158,2157,1,0,0,0,2159,2160,1,0,0,0,2160,2162,5,118,0,0,2161,2158,
1,0,0,0,2161,2162,1,0,0,0,2162,2163,1,0,0,0,2163,2164,3,286,143,0,2164,315,
1,0,0,0,2165,2166,3,314,157,0,2166,2167,5,116,0,0,2167,2169,1,0,0,0,2168,
2165,1,0,0,0,2169,2172,1,0,0,0,2170,2168,1,0,0,0,2170,2171,1,0,0,0,2171,
2173,1,0,0,0,2172,2170,1,0,0,0,2173,2174,3,314,157,0,2174,2178,5,116,0,0,
2175,2177,3,142,71,0,2176,2175,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,
0,2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,2178,1,0,0,0,2181,2182,5,114,
0,0,2182,317,1,0,0,0,2183,2185,5,38,0,0,2184,2183,1,0,0,0,2184,2185,1,0,
0,0,2185,2186,1,0,0,0,2186,2187,3,328,164,0,2187,319,1,0,0,0,2188,2190,5,
38,0,0,2189,2188,1,0,0,0,2189,2190,1,0,0,0,2190,2191,1,0,0,0,2191,2192,3,
332,166,0,2192,321,1,0,0,0,2193,2194,5,13,0,0,2194,2195,3,328,164,0,2195,
323,1,0,0,0,2196,2197,5,13,0,0,2197,2198,3,332,166,0,2198,325,1,0,0,0,2199,
2200,5,111,0,0,2200,327,1,0,0,0,2201,2206,3,330,165,0,2202,2203,5,82,0,0,
2203,2205,3,330,165,0,2204,2202,1,0,0,0,2205,2208,1,0,0,0,2206,2204,1,0,
0,0,2206,2207,1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,0,0,0,2209,2211,5,82,
0,0,2210,2209,1,0,0,0,2210,2211,1,0,0,0,2211,329,1,0,0,0,2212,2215,3,336,
168,0,2213,2215,3,332,166,0,2214,2212,1,0,0,0,2214,2213,1,0,0,0,2215,331,
1,0,0,0,2216,2218,5,124,0,0,2217,2216,1,0,0,0,2217,2218,1,0,0,0,2218,2220,
1,0,0,0,2219,2221,3,136,68,0,2220,2219,1,0,0,0,2220,2221,1,0,0,0,2221,2222,
1,0,0,0,2222,2234,3,368,184,0,2223,2225,5,129,0,0,2224,2226,5,124,0,0,2225,
2224,1,0,0,0,2225,2226,1,0,0,0,2226,2228,1,0,0,0,2227,2229,3,136,68,0,2228,
2227,1,0,0,0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,2231,3,368,184,0,2231,
2232,5,130,0,0,2232,2234,1,0,0,0,2233,2217,1,0,0,0,2233,2223,1,0,0,0,2234,
333,1,0,0,0,2235,2236,3,336,168,0,2236,2237,5,82,0,0,2237,2239,1,0,0,0,2238,
2235,1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,1,0,0,0,2241,
2244,1,0,0,0,2242,2240,1,0,0,0,2243,2245,3,336,168,0,2244,2243,1,0,0,0,2244,
2245,1,0,0,0,2245,335,1,0,0,0,2246,2247,7,10,0,0,2247,337,1,0,0,0,2248,2250,
5,119,0,0,2249,2248,1,0,0,0,2249,2250,1,0,0,0,2250,2251,1,0,0,0,2251,2256,
3,340,170,0,2252,2253,5,119,0,0,2253,2255,3,340,170,0,2254,2252,1,0,0,0,
2255,2258,1,0,0,0,2256,2254,1,0,0,0,2256,2257,1,0,0,0,2257,339,1,0,0,0,2258,
2256,1,0,0,0,2259,2265,3,378,189,0,2260,2265,5,28,0,0,2261,2265,5,24,0,0,
2262,2265,5,5,0,0,2263,2265,5,56,0,0,2264,2259,1,0,0,0,2264,2260,1,0,0,0,
2264,2261,1,0,0,0,2264,2262,1,0,0,0,2264,2263,1,0,0,0,2265,341,1,0,0,0,2266,
2268,5,119,0,0,2267,2266,1,0,0,0,2267,2268,1,0,0,0,2268,2269,1,0,0,0,2269,
2274,3,344,172,0,2270,2271,5,119,0,0,2271,2273,3,344,172,0,2272,2270,1,0,
0,0,2273,2276,1,0,0,0,2274,2272,1,0,0,0,2274,2275,1,0,0,0,2275,343,1,0,0,
0,2276,2274,1,0,0,0,2277,2280,3,346,173,0,2278,2279,5,119,0,0,2279,2281,
3,348,174,0,2280,2278,1,0,0,0,2280,2281,1,0,0,0,2281,345,1,0,0,0,2282,2289,
3,378,189,0,2283,2289,5,28,0,0,2284,2289,5,24,0,0,2285,2289,5,25,0,0,2286,
2289,5,5,0,0,2287,2289,5,56,0,0,2288,2282,1,0,0,0,2288,2283,1,0,0,0,2288,
2284,1,0,0,0,2288,2285,1,0,0,0,2288,2286,1,0,0,0,2288,2287,1,0,0,0,2289,
347,1,0,0,0,2290,2291,5,107,0,0,2291,2334,5,106,0,0,2292,2293,5,107,0,0,
2293,2296,3,354,177,0,2294,2295,5,116,0,0,2295,2297,3,356,178,0,2296,2294,
1,0,0,0,2296,2297,1,0,0,0,2297,2300,1,0,0,0,2298,2299,5,116,0,0,2299,2301,
3,358,179,0,2300,2298,1,0,0,0,2300,2301,1,0,0,0,2301,2303,1,0,0,0,2302,2304,
5,116,0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2305,1,0,0,0,2305,2306,
5,106,0,0,2306,2334,1,0,0,0,2307,2308,5,107,0,0,2308,2311,3,356,178,0,2309,
2310,5,116,0,0,2310,2312,3,358,179,0,2311,2309,1,0,0,0,2311,2312,1,0,0,0,
2312,2314,1,0,0,0,2313,2315,5,116,0,0,2314,2313,1,0,0,0,2314,2315,1,0,0,
0,2315,2316,1,0,0,0,2316,2317,5,106,0,0,2317,2334,1,0,0,0,2318,2324,5,107,
0,0,2319,2320,3,350,175,0,2320,2321,5,116,0,0,2321,2323,1,0,0,0,2322,2319,
1,0,0,0,2323,2326,1,0,0,0,2324,2322,1,0,0,0,2324,2325,1,0,0,0,2325,2327,
1,0,0,0,2326,2324,1,0,0,0,2327,2329,3,350,175,0,2328,2330,5,116,0,0,2329,
2328,1,0,0,0,2329,2330,1,0,0,0,2330,2331,1,0,0,0,2331,2332,5,106,0,0,2332,
2334,1,0,0,0,2333,2290,1,0,0,0,2333,2292,1,0,0,0,2333,2307,1,0,0,0,2333,
2318,1,0,0,0,2334,349,1,0,0,0,2335,2340,3,336,168,0,2336,2340,3,286,143,
0,2337,2340,3,352,176,0,2338,2340,3,360,180,0,2339,2335,1,0,0,0,2339,2336,
1,0,0,0,2339,2337,1,0,0,0,2339,2338,1,0,0,0,2340,351,1,0,0,0,2341,2348,3,
166,83,0,2342,2344,5,83,0,0,2343,2342,1,0,0,0,2343,2344,1,0,0,0,2344,2345,
1,0,0,0,2345,2348,3,162,81,0,2346,2348,3,340,170,0,2347,2341,1,0,0,0,2347,
2343,1,0,0,0,2347,2346,1,0,0,0,2348,353,1,0,0,0,2349,2354,3,336,168,0,2350,
2351,5,116,0,0,2351,2353,3,336,168,0,2352,2350,1,0,0,0,2353,2356,1,0,0,0,
2354,2352,1,0,0,0,2354,2355,1,0,0,0,2355,355,1,0,0,0,2356,2354,1,0,0,0,2357,
2362,3,286,143,0,2358,2359,5,116,0,0,2359,2361,3,286,143,0,2360,2358,1,0,
0,0,2361,2364,1,0,0,0,2362,2360,1,0,0,0,2362,2363,1,0,0,0,2363,357,1,0,0,
0,2364,2362,1,0,0,0,2365,2370,3,360,180,0,2366,2367,5,116,0,0,2367,2369,
3,360,180,0,2368,2366,1,0,0,0,2369,2372,1,0,0,0,2370,2368,1,0,0,0,2370,2371,
1,0,0,0,2371,359,1,0,0,0,2372,2370,1,0,0,0,2373,2374,3,378,189,0,2374,2375,
5,103,0,0,2375,2376,3,286,143,0,2376,361,1,0,0,0,2377,2380,3,364,182,0,2378,
2379,5,119,0,0,2379,2381,3,344,172,0,2380,2378,1,0,0,0,2381,2382,1,0,0,0,
2382,2380,1,0,0,0,2382,2383,1,0,0,0,2383,363,1,0,0,0,2384,2385,5,107,0,0,
2385,2388,3,286,143,0,2386,2387,5,1,0,0,2387,2389,3,368,184,0,2388,2386,
1,0,0,0,2388,2389,1,0,0,0,2389,2390,1,0,0,0,2390,2391,5,106,0,0,2391,365,
1,0,0,0,2392,2395,3,364,182,0,2393,2394,5,119,0,0,2394,2396,3,370,185,0,
2395,2393,1,0,0,0,2396,2397,1,0,0,0,2397,2395,1,0,0,0,2397,2398,1,0,0,0,
2398,367,1,0,0,0,2399,2401,5,119,0,0,2400,2399,1,0,0,0,2400,2401,1,0,0,0,
2401,2402,1,0,0,0,2402,2407,3,370,185,0,2403,2404,5,119,0,0,2404,2406,3,
370,185,0,2405,2403,1,0,0,0,2406,2409,1,0,0,0,2407,2405,1,0,0,0,2407,2408,
1,0,0,0,2408,369,1,0,0,0,2409,2407,1,0,0,0,2410,2412,3,346,173,0,2411,2413,
5,119,0,0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,2416,1,0,0,0,2414,2417,
3,348,174,0,2415,2417,3,372,186,0,2416,2414,1,0,0,0,2416,2415,1,0,0,0,2416,
2417,1,0,0,0,2417,371,1,0,0,0,2418,2420,5,129,0,0,2419,2421,3,374,187,0,
2420,2419,1,0,0,0,2420,2421,1,0,0,0,2421,2422,1,0,0,0,2422,2425,5,130,0,
0,2423,2424,5,120,0,0,2424,2426,3,286,143,0,2425,2423,1,0,0,0,2425,2426,
1,0,0,0,2426,373,1,0,0,0,2427,2432,3,286,143,0,2428,2429,5,116,0,0,2429,
2431,3,286,143,0,2430,2428,1,0,0,0,2431,2434,1,0,0,0,2432,2430,1,0,0,0,2432,
2433,1,0,0,0,2433,2436,1,0,0,0,2434,2432,1,0,0,0,2435,2437,5,116,0,0,2436,
2435,1,0,0,0,2436,2437,1,0,0,0,2437,375,1,0,0,0,2438,2448,5,21,0,0,2439,
2445,5,129,0,0,2440,2446,5,5,0,0,2441,2446,5,24,0,0,2442,2446,5,28,0,0,2443,
2444,5,14,0,0,2444,2446,3,338,169,0,2445,2440,1,0,0,0,2445,2441,1,0,0,0,
2445,2442,1,0,0,0,2445,2443,1,0,0,0,2446,2447,1,0,0,0,2447,2449,5,130,0,
0,2448,2439,1,0,0,0,2448,2449,1,0,0,0,2449,377,1,0,0,0,2450,2451,7,11,0,
0,2451,379,1,0,0,0,2452,2453,7,12,0,0,2453,381,1,0,0,0,2454,2461,3,380,190,
0,2455,2461,3,378,189,0,2456,2461,5,54,0,0,2457,2461,5,55,0,0,2458,2461,
5,56,0,0,2459,2461,5,81,0,0,2460,2454,1,0,0,0,2460,2455,1,0,0,0,2460,2456,
1,0,0,0,2460,2457,1,0,0,0,2460,2458,1,0,0,0,2460,2459,1,0,0,0,2461,383,1,
0,0,0,2462,2463,3,162,81,0,2463,385,1,0,0,0,2464,2465,7,13,0,0,2465,387,
1,0,0,0,2466,2467,5,107,0,0,2467,2468,4,194,21,0,2468,2469,5,107,0,0,2469,
389,1,0,0,0,2470,2471,5,106,0,0,2471,2472,4,195,22,0,2472,2473,5,106,0,0,
2473,391,1,0,0,0,345,395,401,414,422,430,434,439,442,449,457,469,481,486,
507,514,518,528,536,544,548,553,559,568,572,576,582,590,599,604,607,622,
626,629,638,644,648,654,660,665,672,675,684,688,690,693,699,701,703,709,
713,717,720,724,727,730,733,737,739,745,750,757,761,763,768,773,777,779,
782,787,796,802,808,816,819,823,829,834,837,841,845,850,854,858,867,871,
876,880,891,895,900,904,911,914,918,927,931,936,940,946,950,956,966,969,
978,984,990,997,1002,1007,1011,1013,1016,1022,1028,1035,1039,1043,1049,1055,
1061,1065,1068,1074,1080,1086,1092,1096,1102,1108,1116,1121,1125,1127,1135,
1140,1142,1149,1155,1158,1163,1166,1171,1173,1177,1190,1194,1198,1205,1210,
1218,1223,1228,1230,1245,1250,1257,1262,1269,1273,1282,1284,1290,1298,1307,
1313,1316,1320,1323,1327,1333,1343,1347,1354,1358,1366,1377,1415,1431,1447,
1449,1451,1461,1472,1478,1484,1488,1495,1498,1501,1505,1517,1521,1527,1534,
1537,1544,1551,1556,1565,1571,1573,1578,1584,1589,1599,1607,1611,1613,1622,
1627,1636,1640,1645,1650,1659,1663,1665,1676,1680,1683,1688,1691,1698,1705,
1709,1714,1720,1723,1729,1761,1763,1775,1777,1785,1789,1799,1806,1813,1815,
1820,1825,1831,1838,1843,1857,1868,1872,1875,1878,1881,1886,1903,1908,1912,
1916,1920,1927,1934,1936,1939,1946,1952,1964,1967,1970,1975,1983,1992,1996,
2000,2013,2016,2018,2026,2035,2039,2043,2048,2064,2078,2081,2083,2099,2102,
2111,2117,2121,2124,2128,2130,2137,2144,2148,2153,2158,2161,2170,2178,2184,
2189,2206,2210,2214,2217,2220,2225,2228,2233,2240,2244,2249,2256,2264,2267,
2274,2280,2288,2296,2300,2303,2311,2314,2324,2329,2333,2339,2343,2347,2354,
2362,2370,2382,2388,2397,2400,2407,2412,2416,2420,2425,2432,2436,2445,2448,
2460];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class RustParser extends RustParserBase {

    static grammarFileName = "RustParser.g4";
    static literalNames = [ null, "'as'", "'break'", "'const'", "'continue'", 
                            "'crate'", "'else'", "'enum'", "'extern'", "'false'", 
                            "'fn'", "'for'", "'if'", "'impl'", "'in'", "'let'", 
                            "'loop'", "'match'", "'mod'", "'move'", "'mut'", 
                            "'pub'", "'ref'", "'return'", "'self'", "'Self'", 
                            "'static'", "'struct'", "'super'", "'trait'", 
                            "'true'", "'type'", "'unsafe'", "'use'", "'where'", 
                            "'while'", "'async'", "'await'", "'dyn'", "'abstract'", 
                            "'become'", "'box'", "'do'", "'final'", "'macro'", 
                            "'override'", "'priv'", "'typeof'", "'unsized'", 
                            "'virtual'", "'yield'", "'try'", "'union'", 
                            "''static'", "'macro_rules'", "''_'", "'$crate'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
                            "'!'", "'&'", "'|'", "'&&'", "'||'", "'+='", 
                            "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", 
                            "'|='", "'<<='", "'>>='", "'='", "'=='", "'!='", 
                            "'>'", "'<'", "'>='", "'<='", "'@'", "'_'", 
                            "'.'", "'..'", "'...'", "'..='", "','", "';'", 
                            "':'", "'::'", "'->'", "'=>'", "'#'", "'$'", 
                            "'?'", "'{'", "'}'", "'['", "']'", "'('", "')'" ];
    static symbolicNames = [ null, "KW_AS", "KW_BREAK", "KW_CONST", "KW_CONTINUE", 
                             "KW_CRATE", "KW_ELSE", "KW_ENUM", "KW_EXTERN", 
                             "KW_FALSE", "KW_FN", "KW_FOR", "KW_IF", "KW_IMPL", 
                             "KW_IN", "KW_LET", "KW_LOOP", "KW_MATCH", "KW_MOD", 
                             "KW_MOVE", "KW_MUT", "KW_PUB", "KW_REF", "KW_RETURN", 
                             "KW_SELFVALUE", "KW_SELFTYPE", "KW_STATIC", 
                             "KW_STRUCT", "KW_SUPER", "KW_TRAIT", "KW_TRUE", 
                             "KW_TYPE", "KW_UNSAFE", "KW_USE", "KW_WHERE", 
                             "KW_WHILE", "KW_ASYNC", "KW_AWAIT", "KW_DYN", 
                             "KW_ABSTRACT", "KW_BECOME", "KW_BOX", "KW_DO", 
                             "KW_FINAL", "KW_MACRO", "KW_OVERRIDE", "KW_PRIV", 
                             "KW_TYPEOF", "KW_UNSIZED", "KW_VIRTUAL", "KW_YIELD", 
                             "KW_TRY", "KW_UNION", "KW_STATICLIFETIME", 
                             "KW_MACRORULES", "KW_UNDERLINELIFETIME", "KW_DOLLARCRATE", 
                             "NON_KEYWORD_IDENTIFIER", "RAW_IDENTIFIER", 
                             "LINE_COMMENT", "BLOCK_COMMENT", "INNER_LINE_DOC", 
                             "INNER_BLOCK_DOC", "OUTER_LINE_DOC", "OUTER_BLOCK_DOC", 
                             "BLOCK_COMMENT_OR_DOC", "SHEBANG", "WHITESPACE", 
                             "NEWLINE", "CHAR_LITERAL", "STRING_LITERAL", 
                             "RAW_STRING_LITERAL", "BYTE_LITERAL", "BYTE_STRING_LITERAL", 
                             "RAW_BYTE_STRING_LITERAL", "INTEGER_LITERAL", 
                             "DEC_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
                             "BIN_LITERAL", "FLOAT_LITERAL", "LIFETIME_OR_LABEL", 
                             "PLUS", "MINUS", "STAR", "SLASH", "PERCENT", 
                             "CARET", "NOT", "AND", "OR", "ANDAND", "OROR", 
                             "PLUSEQ", "MINUSEQ", "STAREQ", "SLASHEQ", "PERCENTEQ", 
                             "CARETEQ", "ANDEQ", "OREQ", "SHLEQ", "SHREQ", 
                             "EQ", "EQEQ", "NE", "GT", "LT", "GE", "LE", 
                             "AT", "UNDERSCORE", "DOT", "DOTDOT", "DOTDOTDOT", 
                             "DOTDOTEQ", "COMMA", "SEMI", "COLON", "PATHSEP", 
                             "RARROW", "FATARROW", "POUND", "DOLLAR", "QUESTION", 
                             "LCURLYBRACE", "RCURLYBRACE", "LSQUAREBRACKET", 
                             "RSQUAREBRACKET", "LPAREN", "RPAREN" ];
    static ruleNames = [ "crate", "macroInvocation", "delimTokenTree", "tokenTree", 
                         "tokenTreeToken", "macroInvocationSemi", "macroRulesDefinition", 
                         "macroRulesDef", "macroRules", "macroRule", "macroMatcher", 
                         "macroMatch", "macroMatchToken", "macroFragSpec", 
                         "macroRepSep", "macroRepOp", "macroTranscriber", 
                         "item", "visItem", "macroItem", "module", "externCrate", 
                         "crateRef", "asClause", "useDeclaration", "useTree", 
                         "function_", "functionQualifiers", "abi", "functionParameters", 
                         "selfParam", "shorthandSelf", "typedSelf", "functionParam", 
                         "functionParamPattern", "functionReturnType", "typeAlias", 
                         "struct_", "structStruct", "tupleStruct", "structFields", 
                         "structField", "tupleFields", "tupleField", "enumeration", 
                         "enumItems", "enumItem", "enumItemTuple", "enumItemStruct", 
                         "enumItemDiscriminant", "union_", "constantItem", 
                         "staticItem", "trait_", "implementation", "inherentImpl", 
                         "traitImpl", "externBlock", "externalItem", "genericParams", 
                         "genericParam", "lifetimeParam", "typeParam", "constParam", 
                         "whereClause", "whereClauseItem", "lifetimeWhereClauseItem", 
                         "typeBoundWhereClauseItem", "forLifetimes", "associatedItem", 
                         "innerAttribute", "outerAttribute", "attr", "attrInput", 
                         "statement", "letStatement", "expressionStatement", 
                         "expression", "comparisonOperator", "compoundAssignOperator", 
                         "expressionWithBlock", "literalExpression", "pathExpression", 
                         "blockExpression", "statements", "asyncBlockExpression", 
                         "unsafeBlockExpression", "arrayElements", "tupleElements", 
                         "tupleIndex", "structExpression", "structExprStruct", 
                         "structExprFields", "structExprField", "structBase", 
                         "structExprTuple", "structExprUnit", "enumerationVariantExpression", 
                         "enumExprStruct", "enumExprFields", "enumExprField", 
                         "enumExprTuple", "enumExprFieldless", "callParams", 
                         "closureExpression", "closureParameters", "closureParam", 
                         "loopExpression", "infiniteLoopExpression", "predicateLoopExpression", 
                         "predicatePatternLoopExpression", "iteratorLoopExpression", 
                         "loopLabel", "ifExpression", "ifLetExpression", 
                         "matchExpression", "matchArms", "matchArmExpression", 
                         "matchArm", "matchArmGuard", "pattern", "patternNoTopAlt", 
                         "patternWithoutRange", "literalPattern", "identifierPattern", 
                         "wildcardPattern", "restPattern", "rangePattern", 
                         "rangePatternBound", "referencePattern", "structPattern", 
                         "structPatternElements", "structPatternFields", 
                         "structPatternField", "structPatternEtCetera", 
                         "tupleStructPattern", "tupleStructItems", "tuplePattern", 
                         "tuplePatternItems", "groupedPattern", "slicePattern", 
                         "slicePatternItems", "pathPattern", "type_", "typeNoBounds", 
                         "parenthesizedType", "neverType", "tupleType", 
                         "arrayType", "sliceType", "referenceType", "rawPointerType", 
                         "bareFunctionType", "functionTypeQualifiers", "bareFunctionReturnType", 
                         "functionParametersMaybeNamedVariadic", "maybeNamedFunctionParameters", 
                         "maybeNamedParam", "maybeNamedFunctionParametersVariadic", 
                         "traitObjectType", "traitObjectTypeOneBound", "implTraitType", 
                         "implTraitTypeOneBound", "inferredType", "typeParamBounds", 
                         "typeParamBound", "traitBound", "lifetimeBounds", 
                         "lifetime", "simplePath", "simplePathSegment", 
                         "pathInExpression", "pathExprSegment", "pathIdentSegment", 
                         "genericArgs", "genericArg", "genericArgsConst", 
                         "genericArgsLifetimes", "genericArgsTypes", "genericArgsBindings", 
                         "genericArgsBinding", "qualifiedPathInExpression", 
                         "qualifiedPathType", "qualifiedPathInType", "typePath", 
                         "typePathSegment", "typePathFn", "typePathInputs", 
                         "visibility", "identifier", "keyword", "macroIdentifierLikeToken", 
                         "macroLiteralToken", "macroPunctuationToken", "shl", 
                         "shr" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = RustParser.ruleNames;
        this.literalNames = RustParser.literalNames;
        this.symbolicNames = RustParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 77:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 194:
    	    		return this.shl_sempred(localctx, predIndex);
    	case 195:
    	    		return this.shr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 26);
    		case 1:
    			return this.precpred(this._ctx, 25);
    		case 2:
    			return this.precpred(this._ctx, 24);
    		case 3:
    			return this.precpred(this._ctx, 23);
    		case 4:
    			return this.precpred(this._ctx, 22);
    		case 5:
    			return this.precpred(this._ctx, 21);
    		case 6:
    			return this.precpred(this._ctx, 20);
    		case 7:
    			return this.precpred(this._ctx, 19);
    		case 8:
    			return this.precpred(this._ctx, 18);
    		case 9:
    			return this.precpred(this._ctx, 14);
    		case 10:
    			return this.precpred(this._ctx, 13);
    		case 11:
    			return this.precpred(this._ctx, 12);
    		case 12:
    			return this.precpred(this._ctx, 37);
    		case 13:
    			return this.precpred(this._ctx, 36);
    		case 14:
    			return this.precpred(this._ctx, 35);
    		case 15:
    			return this.precpred(this._ctx, 34);
    		case 16:
    			return this.precpred(this._ctx, 33);
    		case 17:
    			return this.precpred(this._ctx, 32);
    		case 18:
    			return this.precpred(this._ctx, 31);
    		case 19:
    			return this.precpred(this._ctx, 27);
    		case 20:
    			return this.precpred(this._ctx, 17);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    shl_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 21:
    			return this.next('<');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    shr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 22:
    			return this.next('>');
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	crate() {
	    let localctx = new CrateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, RustParser.RULE_crate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 392;
	                this.innerAttribute(); 
	            }
	            this.state = 397;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	        }

	        this.state = 401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3173262760) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 122683411) !== 0) || _la===119 || _la===122) {
	            this.state = 398;
	            this.item();
	            this.state = 403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 404;
	        this.match(RustParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroInvocation() {
	    let localctx = new MacroInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, RustParser.RULE_macroInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.simplePath();
	        this.state = 407;
	        this.match(RustParser.NOT);
	        this.state = 408;
	        this.delimTokenTree();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimTokenTree() {
	    let localctx = new DelimTokenTreeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, RustParser.RULE_delimTokenTree);
	    var _la = 0;
	    try {
	        this.state = 434;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 410;
	            this.match(RustParser.LPAREN);
	            this.state = 414;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 411;
	                this.tokenTree();
	                this.state = 416;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 417;
	            this.match(RustParser.RPAREN);
	            break;
	        case 127:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 418;
	            this.match(RustParser.LSQUAREBRACKET);
	            this.state = 422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 419;
	                this.tokenTree();
	                this.state = 424;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 425;
	            this.match(RustParser.RSQUAREBRACKET);
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 426;
	            this.match(RustParser.LCURLYBRACE);
	            this.state = 430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 427;
	                this.tokenTree();
	                this.state = 432;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 433;
	            this.match(RustParser.RCURLYBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokenTree() {
	    let localctx = new TokenTreeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, RustParser.RULE_tokenTree);
	    try {
	        this.state = 442;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 437; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 436;
	            		this.tokenTreeToken();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 439; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,6, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 125:
	        case 127:
	        case 129:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 441;
	            this.delimTokenTree();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tokenTreeToken() {
	    let localctx = new TokenTreeTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, RustParser.RULE_tokenTreeToken);
	    try {
	        this.state = 449;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 444;
	            this.macroIdentifierLikeToken();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 445;
	            this.macroLiteralToken();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 446;
	            this.macroPunctuationToken();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 447;
	            this.macroRepOp();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 448;
	            this.match(RustParser.DOLLAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroInvocationSemi() {
	    let localctx = new MacroInvocationSemiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, RustParser.RULE_macroInvocationSemi);
	    var _la = 0;
	    try {
	        this.state = 486;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 451;
	            this.simplePath();
	            this.state = 452;
	            this.match(RustParser.NOT);
	            this.state = 453;
	            this.match(RustParser.LPAREN);
	            this.state = 457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 454;
	                this.tokenTree();
	                this.state = 459;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 460;
	            this.match(RustParser.RPAREN);
	            this.state = 461;
	            this.match(RustParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 463;
	            this.simplePath();
	            this.state = 464;
	            this.match(RustParser.NOT);
	            this.state = 465;
	            this.match(RustParser.LSQUAREBRACKET);
	            this.state = 469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 466;
	                this.tokenTree();
	                this.state = 471;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 472;
	            this.match(RustParser.RSQUAREBRACKET);
	            this.state = 473;
	            this.match(RustParser.SEMI);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 475;
	            this.simplePath();
	            this.state = 476;
	            this.match(RustParser.NOT);
	            this.state = 477;
	            this.match(RustParser.LCURLYBRACE);
	            this.state = 481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 478;
	                this.tokenTree();
	                this.state = 483;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 484;
	            this.match(RustParser.RCURLYBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroRulesDefinition() {
	    let localctx = new MacroRulesDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, RustParser.RULE_macroRulesDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 488;
	        this.match(RustParser.KW_MACRORULES);
	        this.state = 489;
	        this.match(RustParser.NOT);
	        this.state = 490;
	        this.identifier();
	        this.state = 491;
	        this.macroRulesDef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroRulesDef() {
	    let localctx = new MacroRulesDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, RustParser.RULE_macroRulesDef);
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 493;
	            this.match(RustParser.LPAREN);
	            this.state = 494;
	            this.macroRules();
	            this.state = 495;
	            this.match(RustParser.RPAREN);
	            this.state = 496;
	            this.match(RustParser.SEMI);
	            break;
	        case 127:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 498;
	            this.match(RustParser.LSQUAREBRACKET);
	            this.state = 499;
	            this.macroRules();
	            this.state = 500;
	            this.match(RustParser.RSQUAREBRACKET);
	            this.state = 501;
	            this.match(RustParser.SEMI);
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 503;
	            this.match(RustParser.LCURLYBRACE);
	            this.state = 504;
	            this.macroRules();
	            this.state = 505;
	            this.match(RustParser.RCURLYBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroRules() {
	    let localctx = new MacroRulesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, RustParser.RULE_macroRules);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this.macroRule();
	        this.state = 514;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 510;
	                this.match(RustParser.SEMI);
	                this.state = 511;
	                this.macroRule(); 
	            }
	            this.state = 516;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	        this.state = 518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===117) {
	            this.state = 517;
	            this.match(RustParser.SEMI);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroRule() {
	    let localctx = new MacroRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, RustParser.RULE_macroRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this.macroMatcher();
	        this.state = 521;
	        this.match(RustParser.FATARROW);
	        this.state = 522;
	        this.macroTranscriber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroMatcher() {
	    let localctx = new MacroMatcherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, RustParser.RULE_macroMatcher);
	    var _la = 0;
	    try {
	        this.state = 548;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 524;
	            this.match(RustParser.LPAREN);
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 525;
	                this.macroMatch();
	                this.state = 530;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 531;
	            this.match(RustParser.RPAREN);
	            break;
	        case 127:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 532;
	            this.match(RustParser.LSQUAREBRACKET);
	            this.state = 536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 533;
	                this.macroMatch();
	                this.state = 538;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 539;
	            this.match(RustParser.RSQUAREBRACKET);
	            break;
	        case 125:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 540;
	            this.match(RustParser.LCURLYBRACE);
	            this.state = 544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0)) {
	                this.state = 541;
	                this.macroMatch();
	                this.state = 546;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 547;
	            this.match(RustParser.RCURLYBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroMatch() {
	    let localctx = new MacroMatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, RustParser.RULE_macroMatch);
	    var _la = 0;
	    try {
	        this.state = 576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 551; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 550;
	            		this.macroMatchToken();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 553; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,20, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 555;
	            this.macroMatcher();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 556;
	            this.match(RustParser.DOLLAR);
	            this.state = 559;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 54:
	            case 57:
	            case 58:
	                this.state = 557;
	                this.identifier();
	                break;
	            case 24:
	                this.state = 558;
	                this.match(RustParser.KW_SELFVALUE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 561;
	            this.match(RustParser.COLON);
	            this.state = 562;
	            this.macroFragSpec();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 563;
	            this.match(RustParser.DOLLAR);
	            this.state = 564;
	            this.match(RustParser.LPAREN);
	            this.state = 566; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 565;
	                this.macroMatch();
	                this.state = 568; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294965375) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 369098751) !== 0));
	            this.state = 570;
	            this.match(RustParser.RPAREN);
	            this.state = 572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 134217727) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 4294924415) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 8388607) !== 0)) {
	                this.state = 571;
	                this.macroRepSep();
	            }

	            this.state = 574;
	            this.macroRepOp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroMatchToken() {
	    let localctx = new MacroMatchTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, RustParser.RULE_macroMatchToken);
	    try {
	        this.state = 582;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 578;
	            this.macroIdentifierLikeToken();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 579;
	            this.macroLiteralToken();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 580;
	            this.macroPunctuationToken();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 581;
	            this.macroRepOp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroFragSpec() {
	    let localctx = new MacroFragSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, RustParser.RULE_macroFragSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroRepSep() {
	    let localctx = new MacroRepSepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, RustParser.RULE_macroRepSep);
	    try {
	        this.state = 590;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 586;
	            this.macroIdentifierLikeToken();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 587;
	            this.macroLiteralToken();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 588;
	            this.macroPunctuationToken();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 589;
	            this.match(RustParser.DOLLAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroRepOp() {
	    let localctx = new MacroRepOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, RustParser.RULE_macroRepOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        _la = this._input.LA(1);
	        if(!(_la===82 || _la===84 || _la===124)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroTranscriber() {
	    let localctx = new MacroTranscriberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, RustParser.RULE_macroTranscriber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 594;
	        this.delimTokenTree();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	item() {
	    let localctx = new ItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, RustParser.RULE_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 596;
	            this.outerAttribute();
	            this.state = 601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 604;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 7:
	        case 8:
	        case 10:
	        case 13:
	        case 18:
	        case 21:
	        case 26:
	        case 27:
	        case 29:
	        case 31:
	        case 32:
	        case 33:
	        case 36:
	        case 52:
	            this.state = 602;
	            this.visItem();
	            break;
	        case 5:
	        case 24:
	        case 28:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 119:
	            this.state = 603;
	            this.macroItem();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	visItem() {
	    let localctx = new VisItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, RustParser.RULE_visItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 607;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 606;
	            this.visibility();
	        }

	        this.state = 622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 609;
	            this.module();
	            break;

	        case 2:
	            this.state = 610;
	            this.externCrate();
	            break;

	        case 3:
	            this.state = 611;
	            this.useDeclaration();
	            break;

	        case 4:
	            this.state = 612;
	            this.function_();
	            break;

	        case 5:
	            this.state = 613;
	            this.typeAlias();
	            break;

	        case 6:
	            this.state = 614;
	            this.struct_();
	            break;

	        case 7:
	            this.state = 615;
	            this.enumeration();
	            break;

	        case 8:
	            this.state = 616;
	            this.union_();
	            break;

	        case 9:
	            this.state = 617;
	            this.constantItem();
	            break;

	        case 10:
	            this.state = 618;
	            this.staticItem();
	            break;

	        case 11:
	            this.state = 619;
	            this.trait_();
	            break;

	        case 12:
	            this.state = 620;
	            this.implementation();
	            break;

	        case 13:
	            this.state = 621;
	            this.externBlock();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroItem() {
	    let localctx = new MacroItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, RustParser.RULE_macroItem);
	    try {
	        this.state = 626;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 624;
	            this.macroInvocationSemi();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 625;
	            this.macroRulesDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, RustParser.RULE_module);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 628;
	            this.match(RustParser.KW_UNSAFE);
	        }

	        this.state = 631;
	        this.match(RustParser.KW_MOD);
	        this.state = 632;
	        this.identifier();
	        this.state = 648;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 117:
	            this.state = 633;
	            this.match(RustParser.SEMI);
	            break;
	        case 125:
	            this.state = 634;
	            this.match(RustParser.LCURLYBRACE);
	            this.state = 638;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 635;
	                    this.innerAttribute(); 
	                }
	                this.state = 640;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	            }

	            this.state = 644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3173262760) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 122683411) !== 0) || _la===119 || _la===122) {
	                this.state = 641;
	                this.item();
	                this.state = 646;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 647;
	            this.match(RustParser.RCURLYBRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externCrate() {
	    let localctx = new ExternCrateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, RustParser.RULE_externCrate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.match(RustParser.KW_EXTERN);
	        this.state = 651;
	        this.match(RustParser.KW_CRATE);
	        this.state = 652;
	        this.crateRef();
	        this.state = 654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 653;
	            this.asClause();
	        }

	        this.state = 656;
	        this.match(RustParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	crateRef() {
	    let localctx = new CrateRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, RustParser.RULE_crateRef);
	    try {
	        this.state = 660;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 57:
	        case 58:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 658;
	            this.identifier();
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 659;
	            this.match(RustParser.KW_SELFVALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asClause() {
	    let localctx = new AsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, RustParser.RULE_asClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662;
	        this.match(RustParser.KW_AS);
	        this.state = 665;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 57:
	        case 58:
	            this.state = 663;
	            this.identifier();
	            break;
	        case 111:
	            this.state = 664;
	            this.match(RustParser.UNDERSCORE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useDeclaration() {
	    let localctx = new UseDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, RustParser.RULE_useDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        this.match(RustParser.KW_USE);
	        this.state = 668;
	        this.useTree();
	        this.state = 669;
	        this.match(RustParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useTree() {
	    let localctx = new UseTreeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, RustParser.RULE_useTree);
	    var _la = 0;
	    try {
	        this.state = 703;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 285212704) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 29) !== 0) || _la===119) {
	                this.state = 672;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	                if(la_===1) {
	                    this.state = 671;
	                    this.simplePath();

	                }
	                this.state = 674;
	                this.match(RustParser.PATHSEP);
	            }

	            this.state = 693;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 84:
	                this.state = 677;
	                this.match(RustParser.STAR);
	                break;
	            case 125:
	                this.state = 678;
	                this.match(RustParser.LCURLYBRACE);
	                this.state = 690;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 285212704) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 1073741853) !== 0) || _la===119 || _la===125) {
	                    this.state = 679;
	                    this.useTree();
	                    this.state = 684;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 680;
	                            this.match(RustParser.COMMA);
	                            this.state = 681;
	                            this.useTree(); 
	                        }
	                        this.state = 686;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	                    }

	                    this.state = 688;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===116) {
	                        this.state = 687;
	                        this.match(RustParser.COMMA);
	                    }

	                }

	                this.state = 692;
	                this.match(RustParser.RCURLYBRACE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 695;
	            this.simplePath();
	            this.state = 701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 696;
	                this.match(RustParser.KW_AS);
	                this.state = 699;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 54:
	                case 57:
	                case 58:
	                    this.state = 697;
	                    this.identifier();
	                    break;
	                case 111:
	                    this.state = 698;
	                    this.match(RustParser.UNDERSCORE);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new Function_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, RustParser.RULE_function_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.functionQualifiers();
	        this.state = 706;
	        this.match(RustParser.KW_FN);
	        this.state = 707;
	        this.identifier();
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 708;
	            this.genericParams();
	        }

	        this.state = 711;
	        this.match(RustParser.LPAREN);
	        this.state = 713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1397763872) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 132120641) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 7919743) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5411025) !== 0)) {
	            this.state = 712;
	            this.functionParameters();
	        }

	        this.state = 715;
	        this.match(RustParser.RPAREN);
	        this.state = 717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===120) {
	            this.state = 716;
	            this.functionReturnType();
	        }

	        this.state = 720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 719;
	            this.whereClause();
	        }

	        this.state = 724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.state = 722;
	            this.blockExpression();
	            break;
	        case 117:
	            this.state = 723;
	            this.match(RustParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionQualifiers() {
	    let localctx = new FunctionQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, RustParser.RULE_functionQualifiers);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 726;
	            this.match(RustParser.KW_CONST);
	        }

	        this.state = 730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 729;
	            this.match(RustParser.KW_ASYNC);
	        }

	        this.state = 733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 732;
	            this.match(RustParser.KW_UNSAFE);
	        }

	        this.state = 739;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 735;
	            this.match(RustParser.KW_EXTERN);
	            this.state = 737;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===70 || _la===71) {
	                this.state = 736;
	                this.abi();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abi() {
	    let localctx = new AbiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, RustParser.RULE_abi);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        _la = this._input.LA(1);
	        if(!(_la===70 || _la===71)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParameters() {
	    let localctx = new FunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, RustParser.RULE_functionParameters);
	    var _la = 0;
	    try {
	        this.state = 763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 743;
	            this.selfParam();
	            this.state = 745;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 744;
	                this.match(RustParser.COMMA);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 750;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	            if(la_===1) {
	                this.state = 747;
	                this.selfParam();
	                this.state = 748;
	                this.match(RustParser.COMMA);

	            }
	            this.state = 752;
	            this.functionParam();
	            this.state = 757;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 753;
	                    this.match(RustParser.COMMA);
	                    this.state = 754;
	                    this.functionParam(); 
	                }
	                this.state = 759;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
	            }

	            this.state = 761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 760;
	                this.match(RustParser.COMMA);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selfParam() {
	    let localctx = new SelfParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, RustParser.RULE_selfParam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 765;
	            this.outerAttribute();
	            this.state = 770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 773;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 771;
	            this.shorthandSelf();
	            break;

	        case 2:
	            this.state = 772;
	            this.typedSelf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shorthandSelf() {
	    let localctx = new ShorthandSelfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, RustParser.RULE_shorthandSelf);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===89) {
	            this.state = 775;
	            this.match(RustParser.AND);
	            this.state = 777;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 268435461) !== 0)) {
	                this.state = 776;
	                this.lifetime();
	            }

	        }

	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 781;
	            this.match(RustParser.KW_MUT);
	        }

	        this.state = 784;
	        this.match(RustParser.KW_SELFVALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedSelf() {
	    let localctx = new TypedSelfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, RustParser.RULE_typedSelf);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 786;
	            this.match(RustParser.KW_MUT);
	        }

	        this.state = 789;
	        this.match(RustParser.KW_SELFVALUE);
	        this.state = 790;
	        this.match(RustParser.COLON);
	        this.state = 791;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParam() {
	    let localctx = new FunctionParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, RustParser.RULE_functionParam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 793;
	            this.outerAttribute();
	            this.state = 798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 802;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 799;
	            this.functionParamPattern();
	            break;

	        case 2:
	            this.state = 800;
	            this.match(RustParser.DOTDOTDOT);
	            break;

	        case 3:
	            this.state = 801;
	            this.type_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParamPattern() {
	    let localctx = new FunctionParamPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, RustParser.RULE_functionParamPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this.pattern();
	        this.state = 805;
	        this.match(RustParser.COLON);
	        this.state = 808;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 8:
	        case 10:
	        case 11:
	        case 13:
	        case 24:
	        case 25:
	        case 28:
	        case 32:
	        case 38:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 81:
	        case 84:
	        case 88:
	        case 89:
	        case 107:
	        case 111:
	        case 119:
	        case 124:
	        case 127:
	        case 129:
	            this.state = 806;
	            this.type_();
	            break;
	        case 114:
	            this.state = 807;
	            this.match(RustParser.DOTDOTDOT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionReturnType() {
	    let localctx = new FunctionReturnTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, RustParser.RULE_functionReturnType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 810;
	        this.match(RustParser.RARROW);
	        this.state = 811;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAlias() {
	    let localctx = new TypeAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, RustParser.RULE_typeAlias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 813;
	        this.match(RustParser.KW_TYPE);
	        this.state = 814;
	        this.identifier();
	        this.state = 816;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 815;
	            this.genericParams();
	        }

	        this.state = 819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 818;
	            this.whereClause();
	        }

	        this.state = 823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 821;
	            this.match(RustParser.EQ);
	            this.state = 822;
	            this.type_();
	        }

	        this.state = 825;
	        this.match(RustParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_() {
	    let localctx = new Struct_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, RustParser.RULE_struct_);
	    try {
	        this.state = 829;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 827;
	            this.structStruct();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 828;
	            this.tupleStruct();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structStruct() {
	    let localctx = new StructStructContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, RustParser.RULE_structStruct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.match(RustParser.KW_STRUCT);
	        this.state = 832;
	        this.identifier();
	        this.state = 834;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 833;
	            this.genericParams();
	        }

	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 836;
	            this.whereClause();
	        }

	        this.state = 845;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.state = 839;
	            this.match(RustParser.LCURLYBRACE);
	            this.state = 841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21 || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 25) !== 0) || _la===122) {
	                this.state = 840;
	                this.structFields();
	            }

	            this.state = 843;
	            this.match(RustParser.RCURLYBRACE);
	            break;
	        case 117:
	            this.state = 844;
	            this.match(RustParser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleStruct() {
	    let localctx = new TupleStructContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, RustParser.RULE_tupleStruct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this.match(RustParser.KW_STRUCT);
	        this.state = 848;
	        this.identifier();
	        this.state = 850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 849;
	            this.genericParams();
	        }

	        this.state = 852;
	        this.match(RustParser.LPAREN);
	        this.state = 854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 320875808) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 132120641) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 1140851081) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1321) !== 0)) {
	            this.state = 853;
	            this.tupleFields();
	        }

	        this.state = 856;
	        this.match(RustParser.RPAREN);
	        this.state = 858;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 857;
	            this.whereClause();
	        }

	        this.state = 860;
	        this.match(RustParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structFields() {
	    let localctx = new StructFieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, RustParser.RULE_structFields);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.structField();
	        this.state = 867;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 863;
	                this.match(RustParser.COMMA);
	                this.state = 864;
	                this.structField(); 
	            }
	            this.state = 869;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	        this.state = 871;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 870;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structField() {
	    let localctx = new StructFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, RustParser.RULE_structField);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 873;
	            this.outerAttribute();
	            this.state = 878;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 880;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 879;
	            this.visibility();
	        }

	        this.state = 882;
	        this.identifier();
	        this.state = 883;
	        this.match(RustParser.COLON);
	        this.state = 884;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleFields() {
	    let localctx = new TupleFieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, RustParser.RULE_tupleFields);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 886;
	        this.tupleField();
	        this.state = 891;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 887;
	                this.match(RustParser.COMMA);
	                this.state = 888;
	                this.tupleField(); 
	            }
	            this.state = 893;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	        this.state = 895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 894;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleField() {
	    let localctx = new TupleFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, RustParser.RULE_tupleField);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 900;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 897;
	            this.outerAttribute();
	            this.state = 902;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 904;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 903;
	            this.visibility();
	        }

	        this.state = 906;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumeration() {
	    let localctx = new EnumerationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, RustParser.RULE_enumeration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.match(RustParser.KW_ENUM);
	        this.state = 909;
	        this.identifier();
	        this.state = 911;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 910;
	            this.genericParams();
	        }

	        this.state = 914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 913;
	            this.whereClause();
	        }

	        this.state = 916;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21 || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 25) !== 0) || _la===122) {
	            this.state = 917;
	            this.enumItems();
	        }

	        this.state = 920;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumItems() {
	    let localctx = new EnumItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, RustParser.RULE_enumItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        this.enumItem();
	        this.state = 927;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 923;
	                this.match(RustParser.COMMA);
	                this.state = 924;
	                this.enumItem(); 
	            }
	            this.state = 929;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
	        }

	        this.state = 931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 930;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumItem() {
	    let localctx = new EnumItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, RustParser.RULE_enumItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 933;
	            this.outerAttribute();
	            this.state = 938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 940;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 939;
	            this.visibility();
	        }

	        this.state = 942;
	        this.identifier();
	        this.state = 946;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 129:
	        	this.state = 943;
	        	this.enumItemTuple();
	        	break;
	        case 125:
	        	this.state = 944;
	        	this.enumItemStruct();
	        	break;
	        case 103:
	        	this.state = 945;
	        	this.enumItemDiscriminant();
	        	break;
	        case 116:
	        case 126:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumItemTuple() {
	    let localctx = new EnumItemTupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, RustParser.RULE_enumItemTuple);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 948;
	        this.match(RustParser.LPAREN);
	        this.state = 950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 320875808) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 132120641) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 1140851081) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1321) !== 0)) {
	            this.state = 949;
	            this.tupleFields();
	        }

	        this.state = 952;
	        this.match(RustParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumItemStruct() {
	    let localctx = new EnumItemStructContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, RustParser.RULE_enumItemStruct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 954;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21 || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 25) !== 0) || _la===122) {
	            this.state = 955;
	            this.structFields();
	        }

	        this.state = 958;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumItemDiscriminant() {
	    let localctx = new EnumItemDiscriminantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, RustParser.RULE_enumItemDiscriminant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 960;
	        this.match(RustParser.EQ);
	        this.state = 961;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	union_() {
	    let localctx = new Union_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, RustParser.RULE_union_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 963;
	        this.match(RustParser.KW_UNION);
	        this.state = 964;
	        this.identifier();
	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 965;
	            this.genericParams();
	        }

	        this.state = 969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 968;
	            this.whereClause();
	        }

	        this.state = 971;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 972;
	        this.structFields();
	        this.state = 973;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantItem() {
	    let localctx = new ConstantItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, RustParser.RULE_constantItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this.match(RustParser.KW_CONST);
	        this.state = 978;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 57:
	        case 58:
	            this.state = 976;
	            this.identifier();
	            break;
	        case 111:
	            this.state = 977;
	            this.match(RustParser.UNDERSCORE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 980;
	        this.match(RustParser.COLON);
	        this.state = 981;
	        this.type_();
	        this.state = 984;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 982;
	            this.match(RustParser.EQ);
	            this.state = 983;
	            this.expression(0);
	        }

	        this.state = 986;
	        this.match(RustParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticItem() {
	    let localctx = new StaticItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, RustParser.RULE_staticItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 988;
	        this.match(RustParser.KW_STATIC);
	        this.state = 990;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 989;
	            this.match(RustParser.KW_MUT);
	        }

	        this.state = 992;
	        this.identifier();
	        this.state = 993;
	        this.match(RustParser.COLON);
	        this.state = 994;
	        this.type_();
	        this.state = 997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 995;
	            this.match(RustParser.EQ);
	            this.state = 996;
	            this.expression(0);
	        }

	        this.state = 999;
	        this.match(RustParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trait_() {
	    let localctx = new Trait_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, RustParser.RULE_trait_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 1001;
	            this.match(RustParser.KW_UNSAFE);
	        }

	        this.state = 1004;
	        this.match(RustParser.KW_TRAIT);
	        this.state = 1005;
	        this.identifier();
	        this.state = 1007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 1006;
	            this.genericParams();
	        }

	        this.state = 1013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1009;
	            this.match(RustParser.COLON);
	            this.state = 1011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 318769184) !== 0) || ((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 268435519) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1057) !== 0)) {
	                this.state = 1010;
	                this.typeParamBounds();
	            }

	        }

	        this.state = 1016;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 1015;
	            this.whereClause();
	        }

	        this.state = 1018;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1022;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,112,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1019;
	                this.innerAttribute(); 
	            }
	            this.state = 1024;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,112,this._ctx);
	        }

	        this.state = 1028;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2434794792) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634833) !== 0) || _la===119 || _la===122) {
	            this.state = 1025;
	            this.associatedItem();
	            this.state = 1030;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1031;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implementation() {
	    let localctx = new ImplementationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, RustParser.RULE_implementation);
	    try {
	        this.state = 1035;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1033;
	            this.inherentImpl();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1034;
	            this.traitImpl();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inherentImpl() {
	    let localctx = new InherentImplContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, RustParser.RULE_inherentImpl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1037;
	        this.match(RustParser.KW_IMPL);
	        this.state = 1039;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        if(la_===1) {
	            this.state = 1038;
	            this.genericParams();

	        }
	        this.state = 1041;
	        this.type_();
	        this.state = 1043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 1042;
	            this.whereClause();
	        }

	        this.state = 1045;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1049;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1046;
	                this.innerAttribute(); 
	            }
	            this.state = 1051;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	        }

	        this.state = 1055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2434794792) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634833) !== 0) || _la===119 || _la===122) {
	            this.state = 1052;
	            this.associatedItem();
	            this.state = 1057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1058;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitImpl() {
	    let localctx = new TraitImplContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, RustParser.RULE_traitImpl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1061;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 1060;
	            this.match(RustParser.KW_UNSAFE);
	        }

	        this.state = 1063;
	        this.match(RustParser.KW_IMPL);
	        this.state = 1065;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 1064;
	            this.genericParams();
	        }

	        this.state = 1068;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 1067;
	            this.match(RustParser.NOT);
	        }

	        this.state = 1070;
	        this.typePath();
	        this.state = 1071;
	        this.match(RustParser.KW_FOR);
	        this.state = 1072;
	        this.type_();
	        this.state = 1074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 1073;
	            this.whereClause();
	        }

	        this.state = 1076;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1080;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,123,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1077;
	                this.innerAttribute(); 
	            }
	            this.state = 1082;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,123,this._ctx);
	        }

	        this.state = 1086;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2434794792) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634833) !== 0) || _la===119 || _la===122) {
	            this.state = 1083;
	            this.associatedItem();
	            this.state = 1088;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1089;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externBlock() {
	    let localctx = new ExternBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, RustParser.RULE_externBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1092;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 1091;
	            this.match(RustParser.KW_UNSAFE);
	        }

	        this.state = 1094;
	        this.match(RustParser.KW_EXTERN);
	        this.state = 1096;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===70 || _la===71) {
	            this.state = 1095;
	            this.abi();
	        }

	        this.state = 1098;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1102;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,127,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1099;
	                this.innerAttribute(); 
	            }
	            this.state = 1104;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,127,this._ctx);
	        }

	        this.state = 1108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 354420008) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634833) !== 0) || _la===119 || _la===122) {
	            this.state = 1105;
	            this.externalItem();
	            this.state = 1110;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1111;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalItem() {
	    let localctx = new ExternalItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, RustParser.RULE_externalItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1116;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1113;
	            this.outerAttribute();
	            this.state = 1118;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1127;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 24:
	        case 28:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 119:
	            this.state = 1119;
	            this.macroInvocationSemi();
	            break;
	        case 3:
	        case 8:
	        case 10:
	        case 21:
	        case 26:
	        case 32:
	        case 36:
	            this.state = 1121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 1120;
	                this.visibility();
	            }

	            this.state = 1125;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 26:
	                this.state = 1123;
	                this.staticItem();
	                break;
	            case 3:
	            case 8:
	            case 10:
	            case 32:
	            case 36:
	                this.state = 1124;
	                this.function_();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericParams() {
	    let localctx = new GenericParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, RustParser.RULE_genericParams);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1129;
	        this.match(RustParser.LT);
	        this.state = 1142;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3 || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 134217753) !== 0) || _la===122) {
	            this.state = 1135;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1130;
	                    this.genericParam();
	                    this.state = 1131;
	                    this.match(RustParser.COMMA); 
	                }
	                this.state = 1137;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
	            }

	            this.state = 1138;
	            this.genericParam();
	            this.state = 1140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 1139;
	                this.match(RustParser.COMMA);
	            }

	        }

	        this.state = 1144;
	        this.match(RustParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericParam() {
	    let localctx = new GenericParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, RustParser.RULE_genericParam);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1149;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1146;
	                this.outerAttribute(); 
	            }
	            this.state = 1151;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
	        }

	        this.state = 1155;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1152;
	            this.lifetimeParam();
	            break;

	        case 2:
	            this.state = 1153;
	            this.typeParam();
	            break;

	        case 3:
	            this.state = 1154;
	            this.constParam();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lifetimeParam() {
	    let localctx = new LifetimeParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, RustParser.RULE_lifetimeParam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1158;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===122) {
	            this.state = 1157;
	            this.outerAttribute();
	        }

	        this.state = 1160;
	        this.match(RustParser.LIFETIME_OR_LABEL);
	        this.state = 1163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1161;
	            this.match(RustParser.COLON);
	            this.state = 1162;
	            this.lifetimeBounds();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParam() {
	    let localctx = new TypeParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, RustParser.RULE_typeParam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1166;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===122) {
	            this.state = 1165;
	            this.outerAttribute();
	        }

	        this.state = 1168;
	        this.identifier();
	        this.state = 1173;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1169;
	            this.match(RustParser.COLON);
	            this.state = 1171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 318769184) !== 0) || ((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 268435519) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1057) !== 0)) {
	                this.state = 1170;
	                this.typeParamBounds();
	            }

	        }

	        this.state = 1177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1175;
	            this.match(RustParser.EQ);
	            this.state = 1176;
	            this.type_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constParam() {
	    let localctx = new ConstParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, RustParser.RULE_constParam);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1179;
	        this.match(RustParser.KW_CONST);
	        this.state = 1180;
	        this.identifier();
	        this.state = 1181;
	        this.match(RustParser.COLON);
	        this.state = 1182;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, RustParser.RULE_whereClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1184;
	        this.match(RustParser.KW_WHERE);
	        this.state = 1190;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1185;
	                this.whereClauseItem();
	                this.state = 1186;
	                this.match(RustParser.COMMA); 
	            }
	            this.state = 1192;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
	        }

	        this.state = 1194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 318778656) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 132120641) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 1140851081) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1313) !== 0)) {
	            this.state = 1193;
	            this.whereClauseItem();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClauseItem() {
	    let localctx = new WhereClauseItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, RustParser.RULE_whereClauseItem);
	    try {
	        this.state = 1198;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1196;
	            this.lifetimeWhereClauseItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1197;
	            this.typeBoundWhereClauseItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lifetimeWhereClauseItem() {
	    let localctx = new LifetimeWhereClauseItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, RustParser.RULE_lifetimeWhereClauseItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1200;
	        this.lifetime();
	        this.state = 1201;
	        this.match(RustParser.COLON);
	        this.state = 1202;
	        this.lifetimeBounds();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBoundWhereClauseItem() {
	    let localctx = new TypeBoundWhereClauseItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, RustParser.RULE_typeBoundWhereClauseItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1205;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        if(la_===1) {
	            this.state = 1204;
	            this.forLifetimes();

	        }
	        this.state = 1207;
	        this.type_();
	        this.state = 1208;
	        this.match(RustParser.COLON);
	        this.state = 1210;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 318769184) !== 0) || ((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 268435519) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1057) !== 0)) {
	            this.state = 1209;
	            this.typeParamBounds();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forLifetimes() {
	    let localctx = new ForLifetimesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, RustParser.RULE_forLifetimes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1212;
	        this.match(RustParser.KW_FOR);
	        this.state = 1213;
	        this.genericParams();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	associatedItem() {
	    let localctx = new AssociatedItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, RustParser.RULE_associatedItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1215;
	            this.outerAttribute();
	            this.state = 1220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1230;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 24:
	        case 28:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 119:
	            this.state = 1221;
	            this.macroInvocationSemi();
	            break;
	        case 3:
	        case 8:
	        case 10:
	        case 21:
	        case 31:
	        case 32:
	        case 36:
	            this.state = 1223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 1222;
	                this.visibility();
	            }

	            this.state = 1228;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1225;
	                this.typeAlias();
	                break;

	            case 2:
	                this.state = 1226;
	                this.constantItem();
	                break;

	            case 3:
	                this.state = 1227;
	                this.function_();
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerAttribute() {
	    let localctx = new InnerAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, RustParser.RULE_innerAttribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1232;
	        this.match(RustParser.POUND);
	        this.state = 1233;
	        this.match(RustParser.NOT);
	        this.state = 1234;
	        this.match(RustParser.LSQUAREBRACKET);
	        this.state = 1235;
	        this.attr();
	        this.state = 1236;
	        this.match(RustParser.RSQUAREBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outerAttribute() {
	    let localctx = new OuterAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, RustParser.RULE_outerAttribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1238;
	        this.match(RustParser.POUND);
	        this.state = 1239;
	        this.match(RustParser.LSQUAREBRACKET);
	        this.state = 1240;
	        this.attr();
	        this.state = 1241;
	        this.match(RustParser.RSQUAREBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr() {
	    let localctx = new AttrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, RustParser.RULE_attr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1243;
	        this.simplePath();
	        this.state = 1245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 103)) & ~0x1f) === 0 && ((1 << (_la - 103)) & 88080385) !== 0)) {
	            this.state = 1244;
	            this.attrInput();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attrInput() {
	    let localctx = new AttrInputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, RustParser.RULE_attrInput);
	    try {
	        this.state = 1250;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	        case 127:
	        case 129:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1247;
	            this.delimTokenTree();
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1248;
	            this.match(RustParser.EQ);
	            this.state = 1249;
	            this.literalExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, RustParser.RULE_statement);
	    try {
	        this.state = 1257;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1252;
	            this.match(RustParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1253;
	            this.item();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1254;
	            this.letStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1255;
	            this.expressionStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1256;
	            this.macroInvocationSemi();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatement() {
	    let localctx = new LetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, RustParser.RULE_letStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1259;
	            this.outerAttribute();
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1265;
	        this.match(RustParser.KW_LET);
	        this.state = 1266;
	        this.patternNoTopAlt();
	        this.state = 1269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1267;
	            this.match(RustParser.COLON);
	            this.state = 1268;
	            this.type_();
	        }

	        this.state = 1273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1271;
	            this.match(RustParser.EQ);
	            this.state = 1272;
	            this.expression(0);
	        }

	        this.state = 1275;
	        this.match(RustParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, RustParser.RULE_expressionStatement);
	    try {
	        this.state = 1284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1277;
	            this.expression(0);
	            this.state = 1278;
	            this.match(RustParser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1280;
	            this.expressionWithBlock();
	            this.state = 1282;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	            if(la_===1) {
	                this.state = 1281;
	                this.match(RustParser.SEMI);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 154;
	    this.enterRecursionRule(localctx, 154, RustParser.RULE_expression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1366;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AttributedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1288; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1287;
	            		this.outerAttribute();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1290; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,161, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1292;
	            this.expression(40);
	            break;

	        case 2:
	            localctx = new LiteralExpression_Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1294;
	            this.literalExpression();
	            break;

	        case 3:
	            localctx = new PathExpression_Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1295;
	            this.pathExpression();
	            break;

	        case 4:
	            localctx = new BorrowExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1296;
	            _la = this._input.LA(1);
	            if(!(_la===89 || _la===91)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1297;
	                this.match(RustParser.KW_MUT);
	            }

	            this.state = 1300;
	            this.expression(30);
	            break;

	        case 5:
	            localctx = new DereferenceExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1301;
	            this.match(RustParser.STAR);
	            this.state = 1302;
	            this.expression(29);
	            break;

	        case 6:
	            localctx = new NegationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1303;
	            _la = this._input.LA(1);
	            if(!(_la===83 || _la===88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1304;
	            this.expression(28);
	            break;

	        case 7:
	            localctx = new RangeExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1305;
	            this.match(RustParser.DOTDOT);
	            this.state = 1307;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	            if(la_===1) {
	                this.state = 1306;
	                this.expression(0);

	            }
	            break;

	        case 8:
	            localctx = new RangeExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1309;
	            this.match(RustParser.DOTDOTEQ);
	            this.state = 1310;
	            this.expression(15);
	            break;

	        case 9:
	            localctx = new ContinueExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1311;
	            this.match(RustParser.KW_CONTINUE);
	            this.state = 1313;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	            if(la_===1) {
	                this.state = 1312;
	                this.match(RustParser.LIFETIME_OR_LABEL);

	            }
	            this.state = 1316;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	            if(la_===1) {
	                this.state = 1315;
	                this.expression(0);

	            }
	            break;

	        case 10:
	            localctx = new BreakExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1318;
	            this.match(RustParser.KW_BREAK);
	            this.state = 1320;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	            if(la_===1) {
	                this.state = 1319;
	                this.match(RustParser.LIFETIME_OR_LABEL);

	            }
	            this.state = 1323;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	            if(la_===1) {
	                this.state = 1322;
	                this.expression(0);

	            }
	            break;

	        case 11:
	            localctx = new ReturnExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1325;
	            this.match(RustParser.KW_RETURN);
	            this.state = 1327;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	            if(la_===1) {
	                this.state = 1326;
	                this.expression(0);

	            }
	            break;

	        case 12:
	            localctx = new GroupedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1329;
	            this.match(RustParser.LPAREN);
	            this.state = 1333;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1330;
	                    this.innerAttribute(); 
	                }
	                this.state = 1335;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
	            }

	            this.state = 1336;
	            this.expression(0);
	            this.state = 1337;
	            this.match(RustParser.RPAREN);
	            break;

	        case 13:
	            localctx = new ArrayExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1339;
	            this.match(RustParser.LSQUAREBRACKET);
	            this.state = 1343;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1340;
	                    this.innerAttribute(); 
	                }
	                this.state = 1345;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	            }

	            this.state = 1347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1401625140) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634841) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5542209) !== 0)) {
	                this.state = 1346;
	                this.arrayElements();
	            }

	            this.state = 1349;
	            this.match(RustParser.RSQUAREBRACKET);
	            break;

	        case 14:
	            localctx = new TupleExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1350;
	            this.match(RustParser.LPAREN);
	            this.state = 1354;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,172,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1351;
	                    this.innerAttribute(); 
	                }
	                this.state = 1356;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,172,this._ctx);
	            }

	            this.state = 1358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1401625140) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634841) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5542209) !== 0)) {
	                this.state = 1357;
	                this.tupleElements();
	            }

	            this.state = 1360;
	            this.match(RustParser.RPAREN);
	            break;

	        case 15:
	            localctx = new StructExpression_Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1361;
	            this.structExpression();
	            break;

	        case 16:
	            localctx = new EnumerationVariantExpression_Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1362;
	            this.enumerationVariantExpression();
	            break;

	        case 17:
	            localctx = new ClosureExpression_Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1363;
	            this.closureExpression();
	            break;

	        case 18:
	            localctx = new ExpressionWithBlock_Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1364;
	            this.expressionWithBlock();
	            break;

	        case 19:
	            localctx = new MacroInvocationAsExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1365;
	            this.macroInvocation();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1451;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,180,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1449;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ArithmeticOrLogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1368;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 1369;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 84)) & ~0x1f) === 0 && ((1 << (_la - 84)) & 7) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1370;
	                    this.expression(27);
	                    break;

	                case 2:
	                    localctx = new ArithmeticOrLogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1371;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 1372;
	                    _la = this._input.LA(1);
	                    if(!(_la===82 || _la===83)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1373;
	                    this.expression(26);
	                    break;

	                case 3:
	                    localctx = new ArithmeticOrLogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1374;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 1377;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 107:
	                        this.state = 1375;
	                        this.shl();
	                        break;
	                    case 106:
	                        this.state = 1376;
	                        this.shr();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    this.state = 1379;
	                    this.expression(25);
	                    break;

	                case 4:
	                    localctx = new ArithmeticOrLogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1381;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 1382;
	                    this.match(RustParser.AND);
	                    this.state = 1383;
	                    this.expression(24);
	                    break;

	                case 5:
	                    localctx = new ArithmeticOrLogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1384;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 1385;
	                    this.match(RustParser.CARET);
	                    this.state = 1386;
	                    this.expression(23);
	                    break;

	                case 6:
	                    localctx = new ArithmeticOrLogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1387;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 1388;
	                    this.match(RustParser.OR);
	                    this.state = 1389;
	                    this.expression(22);
	                    break;

	                case 7:
	                    localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1390;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 1391;
	                    this.comparisonOperator();
	                    this.state = 1392;
	                    this.expression(21);
	                    break;

	                case 8:
	                    localctx = new LazyBooleanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1394;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1395;
	                    this.match(RustParser.ANDAND);
	                    this.state = 1396;
	                    this.expression(20);
	                    break;

	                case 9:
	                    localctx = new LazyBooleanExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1397;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1398;
	                    this.match(RustParser.OROR);
	                    this.state = 1399;
	                    this.expression(19);
	                    break;

	                case 10:
	                    localctx = new RangeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1400;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1401;
	                    this.match(RustParser.DOTDOTEQ);
	                    this.state = 1402;
	                    this.expression(15);
	                    break;

	                case 11:
	                    localctx = new AssignmentExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1403;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1404;
	                    this.match(RustParser.EQ);
	                    this.state = 1405;
	                    this.expression(14);
	                    break;

	                case 12:
	                    localctx = new CompoundAssignmentExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1406;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1407;
	                    this.compoundAssignOperator();
	                    this.state = 1408;
	                    this.expression(13);
	                    break;

	                case 13:
	                    localctx = new MethodCallExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1410;
	                    if (!( this.precpred(this._ctx, 37))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
	                    }
	                    this.state = 1411;
	                    this.match(RustParser.DOT);
	                    this.state = 1412;
	                    this.pathExprSegment();
	                    this.state = 1413;
	                    this.match(RustParser.LPAREN);
	                    this.state = 1415;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1401625140) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634841) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5542209) !== 0)) {
	                        this.state = 1414;
	                        this.callParams();
	                    }

	                    this.state = 1417;
	                    this.match(RustParser.RPAREN);
	                    break;

	                case 14:
	                    localctx = new FieldExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1419;
	                    if (!( this.precpred(this._ctx, 36))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
	                    }
	                    this.state = 1420;
	                    this.match(RustParser.DOT);
	                    this.state = 1421;
	                    this.identifier();
	                    break;

	                case 15:
	                    localctx = new TupleIndexingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1422;
	                    if (!( this.precpred(this._ctx, 35))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
	                    }
	                    this.state = 1423;
	                    this.match(RustParser.DOT);
	                    this.state = 1424;
	                    this.tupleIndex();
	                    break;

	                case 16:
	                    localctx = new AwaitExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1425;
	                    if (!( this.precpred(this._ctx, 34))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 34)");
	                    }
	                    this.state = 1426;
	                    this.match(RustParser.DOT);
	                    this.state = 1427;
	                    this.match(RustParser.KW_AWAIT);
	                    break;

	                case 17:
	                    localctx = new CallExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1428;
	                    if (!( this.precpred(this._ctx, 33))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
	                    }
	                    this.state = 1429;
	                    this.match(RustParser.LPAREN);
	                    this.state = 1431;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1401625140) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634841) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5542209) !== 0)) {
	                        this.state = 1430;
	                        this.callParams();
	                    }

	                    this.state = 1433;
	                    this.match(RustParser.RPAREN);
	                    break;

	                case 18:
	                    localctx = new IndexExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1434;
	                    if (!( this.precpred(this._ctx, 32))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
	                    }
	                    this.state = 1435;
	                    this.match(RustParser.LSQUAREBRACKET);
	                    this.state = 1436;
	                    this.expression(0);
	                    this.state = 1437;
	                    this.match(RustParser.RSQUAREBRACKET);
	                    break;

	                case 19:
	                    localctx = new ErrorPropagationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1439;
	                    if (!( this.precpred(this._ctx, 31))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
	                    }
	                    this.state = 1440;
	                    this.match(RustParser.QUESTION);
	                    break;

	                case 20:
	                    localctx = new TypeCastExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1441;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 1442;
	                    this.match(RustParser.KW_AS);
	                    this.state = 1443;
	                    this.typeNoBounds();
	                    break;

	                case 21:
	                    localctx = new RangeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, RustParser.RULE_expression);
	                    this.state = 1444;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1445;
	                    this.match(RustParser.DOTDOT);
	                    this.state = 1447;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	                    if(la_===1) {
	                        this.state = 1446;
	                        this.expression(0);

	                    }
	                    break;

	                } 
	            }
	            this.state = 1453;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,180,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, RustParser.RULE_comparisonOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1454;
	        _la = this._input.LA(1);
	        if(!(((((_la - 104)) & ~0x1f) === 0 && ((1 << (_la - 104)) & 63) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundAssignOperator() {
	    let localctx = new CompoundAssignOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, RustParser.RULE_compoundAssignOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1456;
	        _la = this._input.LA(1);
	        if(!(((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 1023) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionWithBlock() {
	    let localctx = new ExpressionWithBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, RustParser.RULE_expressionWithBlock);
	    try {
	        this.state = 1472;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1459; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1458;
	            		this.outerAttribute();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1461; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,181, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1463;
	            this.expressionWithBlock();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1465;
	            this.blockExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1466;
	            this.asyncBlockExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1467;
	            this.unsafeBlockExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1468;
	            this.loopExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1469;
	            this.ifExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1470;
	            this.ifLetExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1471;
	            this.matchExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalExpression() {
	    let localctx = new LiteralExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, RustParser.RULE_literalExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1474;
	        _la = this._input.LA(1);
	        if(!(_la===9 || _la===30 || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 2175) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExpression() {
	    let localctx = new PathExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, RustParser.RULE_pathExpression);
	    try {
	        this.state = 1478;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 24:
	        case 25:
	        case 28:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1476;
	            this.pathInExpression();
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1477;
	            this.qualifiedPathInExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockExpression() {
	    let localctx = new BlockExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, RustParser.RULE_blockExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1484;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1481;
	                this.innerAttribute(); 
	            }
	            this.state = 1486;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
	        }

	        this.state = 1488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4289707964) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 122683419) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5543233) !== 0)) {
	            this.state = 1487;
	            this.statements();
	        }

	        this.state = 1490;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, RustParser.RULE_statements);
	    var _la = 0;
	    try {
	        this.state = 1501;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1493; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1492;
	            		this.statement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1495; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,186, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1498;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1401625140) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634841) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5542209) !== 0)) {
	                this.state = 1497;
	                this.expression(0);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1500;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asyncBlockExpression() {
	    let localctx = new AsyncBlockExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, RustParser.RULE_asyncBlockExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1503;
	        this.match(RustParser.KW_ASYNC);
	        this.state = 1505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 1504;
	            this.match(RustParser.KW_MOVE);
	        }

	        this.state = 1507;
	        this.blockExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsafeBlockExpression() {
	    let localctx = new UnsafeBlockExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, RustParser.RULE_unsafeBlockExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1509;
	        this.match(RustParser.KW_UNSAFE);
	        this.state = 1510;
	        this.blockExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayElements() {
	    let localctx = new ArrayElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, RustParser.RULE_arrayElements);
	    var _la = 0;
	    try {
	        this.state = 1527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1512;
	            this.expression(0);
	            this.state = 1517;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,190,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1513;
	                    this.match(RustParser.COMMA);
	                    this.state = 1514;
	                    this.expression(0); 
	                }
	                this.state = 1519;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,190,this._ctx);
	            }

	            this.state = 1521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 1520;
	                this.match(RustParser.COMMA);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1523;
	            this.expression(0);
	            this.state = 1524;
	            this.match(RustParser.SEMI);
	            this.state = 1525;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleElements() {
	    let localctx = new TupleElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, RustParser.RULE_tupleElements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1532; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1529;
	        		this.expression(0);
	        		this.state = 1530;
	        		this.match(RustParser.COMMA);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1534; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,193, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1401625140) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634841) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5542209) !== 0)) {
	            this.state = 1536;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleIndex() {
	    let localctx = new TupleIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, RustParser.RULE_tupleIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1539;
	        this.match(RustParser.INTEGER_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structExpression() {
	    let localctx = new StructExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, RustParser.RULE_structExpression);
	    try {
	        this.state = 1544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1541;
	            this.structExprStruct();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1542;
	            this.structExprTuple();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1543;
	            this.structExprUnit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structExprStruct() {
	    let localctx = new StructExprStructContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, RustParser.RULE_structExprStruct);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.pathInExpression();
	        this.state = 1547;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1551;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1548;
	                this.innerAttribute(); 
	            }
	            this.state = 1553;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
	        }

	        this.state = 1556;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 54:
	        case 57:
	        case 58:
	        case 75:
	        case 122:
	        	this.state = 1554;
	        	this.structExprFields();
	        	break;
	        case 113:
	        	this.state = 1555;
	        	this.structBase();
	        	break;
	        case 126:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1558;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structExprFields() {
	    let localctx = new StructExprFieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, RustParser.RULE_structExprFields);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1560;
	        this.structExprField();
	        this.state = 1565;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,198,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1561;
	                this.match(RustParser.COMMA);
	                this.state = 1562;
	                this.structExprField(); 
	            }
	            this.state = 1567;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,198,this._ctx);
	        }

	        this.state = 1573;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1568;
	            this.match(RustParser.COMMA);
	            this.state = 1569;
	            this.structBase();
	            break;

	        case 2:
	            this.state = 1571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 1570;
	                this.match(RustParser.COMMA);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structExprField() {
	    let localctx = new StructExprFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, RustParser.RULE_structExprField);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1575;
	            this.outerAttribute();
	            this.state = 1580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1589;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1581;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 1584;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 54:
	            case 57:
	            case 58:
	                this.state = 1582;
	                this.identifier();
	                break;
	            case 75:
	                this.state = 1583;
	                this.tupleIndex();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1586;
	            this.match(RustParser.COLON);
	            this.state = 1587;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structBase() {
	    let localctx = new StructBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, RustParser.RULE_structBase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1591;
	        this.match(RustParser.DOTDOT);
	        this.state = 1592;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structExprTuple() {
	    let localctx = new StructExprTupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, RustParser.RULE_structExprTuple);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1594;
	        this.pathInExpression();
	        this.state = 1595;
	        this.match(RustParser.LPAREN);
	        this.state = 1599;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,204,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1596;
	                this.innerAttribute(); 
	            }
	            this.state = 1601;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,204,this._ctx);
	        }

	        this.state = 1613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1401625140) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634841) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5542209) !== 0)) {
	            this.state = 1602;
	            this.expression(0);
	            this.state = 1607;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,205,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1603;
	                    this.match(RustParser.COMMA);
	                    this.state = 1604;
	                    this.expression(0); 
	                }
	                this.state = 1609;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,205,this._ctx);
	            }

	            this.state = 1611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 1610;
	                this.match(RustParser.COMMA);
	            }

	        }

	        this.state = 1615;
	        this.match(RustParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structExprUnit() {
	    let localctx = new StructExprUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, RustParser.RULE_structExprUnit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1617;
	        this.pathInExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationVariantExpression() {
	    let localctx = new EnumerationVariantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, RustParser.RULE_enumerationVariantExpression);
	    try {
	        this.state = 1622;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1619;
	            this.enumExprStruct();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1620;
	            this.enumExprTuple();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1621;
	            this.enumExprFieldless();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumExprStruct() {
	    let localctx = new EnumExprStructContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, RustParser.RULE_enumExprStruct);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1624;
	        this.pathInExpression();
	        this.state = 1625;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 2097177) !== 0)) {
	            this.state = 1626;
	            this.enumExprFields();
	        }

	        this.state = 1629;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumExprFields() {
	    let localctx = new EnumExprFieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, RustParser.RULE_enumExprFields);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1631;
	        this.enumExprField();
	        this.state = 1636;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1632;
	                this.match(RustParser.COMMA);
	                this.state = 1633;
	                this.enumExprField(); 
	            }
	            this.state = 1638;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
	        }

	        this.state = 1640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 1639;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumExprField() {
	    let localctx = new EnumExprFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, RustParser.RULE_enumExprField);
	    try {
	        this.state = 1650;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1642;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1645;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 54:
	            case 57:
	            case 58:
	                this.state = 1643;
	                this.identifier();
	                break;
	            case 75:
	                this.state = 1644;
	                this.tupleIndex();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1647;
	            this.match(RustParser.COLON);
	            this.state = 1648;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumExprTuple() {
	    let localctx = new EnumExprTupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, RustParser.RULE_enumExprTuple);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1652;
	        this.pathInExpression();
	        this.state = 1653;
	        this.match(RustParser.LPAREN);
	        this.state = 1665;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1401625140) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 121634841) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 16308351) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 5542209) !== 0)) {
	            this.state = 1654;
	            this.expression(0);
	            this.state = 1659;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,214,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1655;
	                    this.match(RustParser.COMMA);
	                    this.state = 1656;
	                    this.expression(0); 
	                }
	                this.state = 1661;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,214,this._ctx);
	            }

	            this.state = 1663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 1662;
	                this.match(RustParser.COMMA);
	            }

	        }

	        this.state = 1667;
	        this.match(RustParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumExprFieldless() {
	    let localctx = new EnumExprFieldlessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, RustParser.RULE_enumExprFieldless);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1669;
	        this.pathInExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callParams() {
	    let localctx = new CallParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, RustParser.RULE_callParams);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1671;
	        this.expression(0);
	        this.state = 1676;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,217,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1672;
	                this.match(RustParser.COMMA);
	                this.state = 1673;
	                this.expression(0); 
	            }
	            this.state = 1678;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,217,this._ctx);
	        }

	        this.state = 1680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 1679;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closureExpression() {
	    let localctx = new ClosureExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, RustParser.RULE_closureExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 1682;
	            this.match(RustParser.KW_MOVE);
	        }

	        this.state = 1691;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 92:
	            this.state = 1685;
	            this.match(RustParser.OROR);
	            break;
	        case 90:
	            this.state = 1686;
	            this.match(RustParser.OR);
	            this.state = 1688;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	            if(la_===1) {
	                this.state = 1687;
	                this.closureParameters();

	            }
	            this.state = 1690;
	            this.match(RustParser.OR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1698;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 4:
	        case 5:
	        case 9:
	        case 11:
	        case 12:
	        case 16:
	        case 17:
	        case 19:
	        case 23:
	        case 24:
	        case 25:
	        case 28:
	        case 30:
	        case 32:
	        case 35:
	        case 36:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 80:
	        case 81:
	        case 83:
	        case 84:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 107:
	        case 113:
	        case 115:
	        case 119:
	        case 122:
	        case 125:
	        case 127:
	        case 129:
	            this.state = 1693;
	            this.expression(0);
	            break;
	        case 120:
	            this.state = 1694;
	            this.match(RustParser.RARROW);
	            this.state = 1695;
	            this.typeNoBounds();
	            this.state = 1696;
	            this.blockExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closureParameters() {
	    let localctx = new ClosureParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, RustParser.RULE_closureParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        this.closureParam();
	        this.state = 1705;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,223,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1701;
	                this.match(RustParser.COMMA);
	                this.state = 1702;
	                this.closureParam(); 
	            }
	            this.state = 1707;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,223,this._ctx);
	        }

	        this.state = 1709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 1708;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closureParam() {
	    let localctx = new ClosureParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, RustParser.RULE_closureParam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1714;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1711;
	            this.outerAttribute();
	            this.state = 1716;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1717;
	        this.pattern();
	        this.state = 1720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1718;
	            this.match(RustParser.COLON);
	            this.state = 1719;
	            this.type_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loopExpression() {
	    let localctx = new LoopExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, RustParser.RULE_loopExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===81) {
	            this.state = 1722;
	            this.loopLabel();
	        }

	        this.state = 1729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1725;
	            this.infiniteLoopExpression();
	            break;

	        case 2:
	            this.state = 1726;
	            this.predicateLoopExpression();
	            break;

	        case 3:
	            this.state = 1727;
	            this.predicatePatternLoopExpression();
	            break;

	        case 4:
	            this.state = 1728;
	            this.iteratorLoopExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	infiniteLoopExpression() {
	    let localctx = new InfiniteLoopExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, RustParser.RULE_infiniteLoopExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1731;
	        this.match(RustParser.KW_LOOP);
	        this.state = 1732;
	        this.blockExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicateLoopExpression() {
	    let localctx = new PredicateLoopExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, RustParser.RULE_predicateLoopExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1734;
	        this.match(RustParser.KW_WHILE);
	        this.state = 1735;
	        this.expression(0);
	        this.state = 1736;
	        this.blockExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicatePatternLoopExpression() {
	    let localctx = new PredicatePatternLoopExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, RustParser.RULE_predicatePatternLoopExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1738;
	        this.match(RustParser.KW_WHILE);
	        this.state = 1739;
	        this.match(RustParser.KW_LET);
	        this.state = 1740;
	        this.pattern();
	        this.state = 1741;
	        this.match(RustParser.EQ);
	        this.state = 1742;
	        this.expression(0);
	        this.state = 1743;
	        this.blockExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteratorLoopExpression() {
	    let localctx = new IteratorLoopExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, RustParser.RULE_iteratorLoopExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1745;
	        this.match(RustParser.KW_FOR);
	        this.state = 1746;
	        this.pattern();
	        this.state = 1747;
	        this.match(RustParser.KW_IN);
	        this.state = 1748;
	        this.expression(0);
	        this.state = 1749;
	        this.blockExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loopLabel() {
	    let localctx = new LoopLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, RustParser.RULE_loopLabel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1751;
	        this.match(RustParser.LIFETIME_OR_LABEL);
	        this.state = 1752;
	        this.match(RustParser.COLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExpression() {
	    let localctx = new IfExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, RustParser.RULE_ifExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1754;
	        this.match(RustParser.KW_IF);
	        this.state = 1755;
	        this.expression(0);
	        this.state = 1756;
	        this.blockExpression();
	        this.state = 1763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        if(la_===1) {
	            this.state = 1757;
	            this.match(RustParser.KW_ELSE);
	            this.state = 1761;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1758;
	                this.blockExpression();
	                break;

	            case 2:
	                this.state = 1759;
	                this.ifExpression();
	                break;

	            case 3:
	                this.state = 1760;
	                this.ifLetExpression();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifLetExpression() {
	    let localctx = new IfLetExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, RustParser.RULE_ifLetExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1765;
	        this.match(RustParser.KW_IF);
	        this.state = 1766;
	        this.match(RustParser.KW_LET);
	        this.state = 1767;
	        this.pattern();
	        this.state = 1768;
	        this.match(RustParser.EQ);
	        this.state = 1769;
	        this.expression(0);
	        this.state = 1770;
	        this.blockExpression();
	        this.state = 1777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	        if(la_===1) {
	            this.state = 1771;
	            this.match(RustParser.KW_ELSE);
	            this.state = 1775;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1772;
	                this.blockExpression();
	                break;

	            case 2:
	                this.state = 1773;
	                this.ifExpression();
	                break;

	            case 3:
	                this.state = 1774;
	                this.ifLetExpression();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchExpression() {
	    let localctx = new MatchExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, RustParser.RULE_matchExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1779;
	        this.match(RustParser.KW_MATCH);
	        this.state = 1780;
	        this.expression(0);
	        this.state = 1781;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1785;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,233,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1782;
	                this.innerAttribute(); 
	            }
	            this.state = 1787;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,233,this._ctx);
	        }

	        this.state = 1789;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1397752352) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 608141341) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 1094975495) !== 0) || ((((_la - 122)) & ~0x1f) === 0 && ((1 << (_la - 122)) & 161) !== 0)) {
	            this.state = 1788;
	            this.matchArms();
	        }

	        this.state = 1791;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchArms() {
	    let localctx = new MatchArmsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, RustParser.RULE_matchArms);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1799;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,235,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1793;
	                this.matchArm();
	                this.state = 1794;
	                this.match(RustParser.FATARROW);
	                this.state = 1795;
	                this.matchArmExpression(); 
	            }
	            this.state = 1801;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,235,this._ctx);
	        }

	        this.state = 1802;
	        this.matchArm();
	        this.state = 1803;
	        this.match(RustParser.FATARROW);
	        this.state = 1804;
	        this.expression(0);
	        this.state = 1806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 1805;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchArmExpression() {
	    let localctx = new MatchArmExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, RustParser.RULE_matchArmExpression);
	    var _la = 0;
	    try {
	        this.state = 1815;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1808;
	            this.expression(0);
	            this.state = 1809;
	            this.match(RustParser.COMMA);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1811;
	            this.expressionWithBlock();
	            this.state = 1813;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 1812;
	                this.match(RustParser.COMMA);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchArm() {
	    let localctx = new MatchArmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, RustParser.RULE_matchArm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1817;
	            this.outerAttribute();
	            this.state = 1822;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1823;
	        this.pattern();
	        this.state = 1825;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 1824;
	            this.matchArmGuard();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchArmGuard() {
	    let localctx = new MatchArmGuardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, RustParser.RULE_matchArmGuard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.match(RustParser.KW_IF);
	        this.state = 1828;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, RustParser.RULE_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1831;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1830;
	            this.match(RustParser.OR);
	        }

	        this.state = 1833;
	        this.patternNoTopAlt();
	        this.state = 1838;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1834;
	                this.match(RustParser.OR);
	                this.state = 1835;
	                this.patternNoTopAlt(); 
	            }
	            this.state = 1840;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternNoTopAlt() {
	    let localctx = new PatternNoTopAltContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, RustParser.RULE_patternNoTopAlt);
	    try {
	        this.state = 1843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1841;
	            this.patternWithoutRange();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1842;
	            this.rangePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternWithoutRange() {
	    let localctx = new PatternWithoutRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, RustParser.RULE_patternWithoutRange);
	    try {
	        this.state = 1857;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1845;
	            this.literalPattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1846;
	            this.identifierPattern();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1847;
	            this.wildcardPattern();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1848;
	            this.restPattern();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1849;
	            this.referencePattern();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1850;
	            this.structPattern();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1851;
	            this.tupleStructPattern();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1852;
	            this.tuplePattern();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1853;
	            this.groupedPattern();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1854;
	            this.slicePattern();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1855;
	            this.pathPattern();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1856;
	            this.macroInvocation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalPattern() {
	    let localctx = new LiteralPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, RustParser.RULE_literalPattern);
	    var _la = 0;
	    try {
	        this.state = 1875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1859;
	            this.match(RustParser.KW_TRUE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1860;
	            this.match(RustParser.KW_FALSE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1861;
	            this.match(RustParser.CHAR_LITERAL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1862;
	            this.match(RustParser.BYTE_LITERAL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1863;
	            this.match(RustParser.STRING_LITERAL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1864;
	            this.match(RustParser.RAW_STRING_LITERAL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1865;
	            this.match(RustParser.BYTE_STRING_LITERAL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1866;
	            this.match(RustParser.RAW_BYTE_STRING_LITERAL);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83) {
	                this.state = 1867;
	                this.match(RustParser.MINUS);
	            }

	            this.state = 1870;
	            this.match(RustParser.INTEGER_LITERAL);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1872;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83) {
	                this.state = 1871;
	                this.match(RustParser.MINUS);
	            }

	            this.state = 1874;
	            this.match(RustParser.FLOAT_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierPattern() {
	    let localctx = new IdentifierPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, RustParser.RULE_identifierPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1878;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22) {
	            this.state = 1877;
	            this.match(RustParser.KW_REF);
	        }

	        this.state = 1881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 1880;
	            this.match(RustParser.KW_MUT);
	        }

	        this.state = 1883;
	        this.identifier();
	        this.state = 1886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===110) {
	            this.state = 1884;
	            this.match(RustParser.AT);
	            this.state = 1885;
	            this.pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcardPattern() {
	    let localctx = new WildcardPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, RustParser.RULE_wildcardPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1888;
	        this.match(RustParser.UNDERSCORE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restPattern() {
	    let localctx = new RestPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, RustParser.RULE_restPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1890;
	        this.match(RustParser.DOTDOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangePattern() {
	    let localctx = new RangePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, RustParser.RULE_rangePattern);
	    try {
	        this.state = 1903;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new InclusiveRangePatternContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1892;
	            this.rangePatternBound();
	            this.state = 1893;
	            this.match(RustParser.DOTDOTEQ);
	            this.state = 1894;
	            this.rangePatternBound();
	            break;

	        case 2:
	            localctx = new HalfOpenRangePatternContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1896;
	            this.rangePatternBound();
	            this.state = 1897;
	            this.match(RustParser.DOTDOT);
	            break;

	        case 3:
	            localctx = new ObsoleteRangePatternContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1899;
	            this.rangePatternBound();
	            this.state = 1900;
	            this.match(RustParser.DOTDOTDOT);
	            this.state = 1901;
	            this.rangePatternBound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangePatternBound() {
	    let localctx = new RangePatternBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, RustParser.RULE_rangePatternBound);
	    var _la = 0;
	    try {
	        this.state = 1916;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1905;
	            this.match(RustParser.CHAR_LITERAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1906;
	            this.match(RustParser.BYTE_LITERAL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1908;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83) {
	                this.state = 1907;
	                this.match(RustParser.MINUS);
	            }

	            this.state = 1910;
	            this.match(RustParser.INTEGER_LITERAL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83) {
	                this.state = 1911;
	                this.match(RustParser.MINUS);
	            }

	            this.state = 1914;
	            this.match(RustParser.FLOAT_LITERAL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1915;
	            this.pathPattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referencePattern() {
	    let localctx = new ReferencePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, RustParser.RULE_referencePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1918;
	        _la = this._input.LA(1);
	        if(!(_la===89 || _la===91)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1920;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	        if(la_===1) {
	            this.state = 1919;
	            this.match(RustParser.KW_MUT);

	        }
	        this.state = 1922;
	        this.patternWithoutRange();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structPattern() {
	    let localctx = new StructPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, RustParser.RULE_structPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1924;
	        this.pathInExpression();
	        this.state = 1925;
	        this.match(RustParser.LCURLYBRACE);
	        this.state = 1927;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20 || _la===22 || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 2097177) !== 0) || _la===113 || _la===122) {
	            this.state = 1926;
	            this.structPatternElements();
	        }

	        this.state = 1929;
	        this.match(RustParser.RCURLYBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structPatternElements() {
	    let localctx = new StructPatternElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, RustParser.RULE_structPatternElements);
	    var _la = 0;
	    try {
	        this.state = 1939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1931;
	            this.structPatternFields();
	            this.state = 1936;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 1932;
	                this.match(RustParser.COMMA);
	                this.state = 1934;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===113 || _la===122) {
	                    this.state = 1933;
	                    this.structPatternEtCetera();
	                }

	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1938;
	            this.structPatternEtCetera();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structPatternFields() {
	    let localctx = new StructPatternFieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, RustParser.RULE_structPatternFields);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1941;
	        this.structPatternField();
	        this.state = 1946;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,260,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1942;
	                this.match(RustParser.COMMA);
	                this.state = 1943;
	                this.structPatternField(); 
	            }
	            this.state = 1948;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,260,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structPatternField() {
	    let localctx = new StructPatternFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, RustParser.RULE_structPatternField);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1952;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1949;
	            this.outerAttribute();
	            this.state = 1954;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1970;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1955;
	            this.tupleIndex();
	            this.state = 1956;
	            this.match(RustParser.COLON);
	            this.state = 1957;
	            this.pattern();
	            break;

	        case 2:
	            this.state = 1959;
	            this.identifier();
	            this.state = 1960;
	            this.match(RustParser.COLON);
	            this.state = 1961;
	            this.pattern();
	            break;

	        case 3:
	            this.state = 1964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===22) {
	                this.state = 1963;
	                this.match(RustParser.KW_REF);
	            }

	            this.state = 1967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1966;
	                this.match(RustParser.KW_MUT);
	            }

	            this.state = 1969;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structPatternEtCetera() {
	    let localctx = new StructPatternEtCeteraContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, RustParser.RULE_structPatternEtCetera);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1975;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1972;
	            this.outerAttribute();
	            this.state = 1977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1978;
	        this.match(RustParser.DOTDOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleStructPattern() {
	    let localctx = new TupleStructPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, RustParser.RULE_tupleStructPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1980;
	        this.pathInExpression();
	        this.state = 1981;
	        this.match(RustParser.LPAREN);
	        this.state = 1983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1397752352) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 608141341) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 1094975495) !== 0) || _la===127 || _la===129) {
	            this.state = 1982;
	            this.tupleStructItems();
	        }

	        this.state = 1985;
	        this.match(RustParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleStructItems() {
	    let localctx = new TupleStructItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, RustParser.RULE_tupleStructItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1987;
	        this.pattern();
	        this.state = 1992;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,267,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1988;
	                this.match(RustParser.COMMA);
	                this.state = 1989;
	                this.pattern(); 
	            }
	            this.state = 1994;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,267,this._ctx);
	        }

	        this.state = 1996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 1995;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuplePattern() {
	    let localctx = new TuplePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, RustParser.RULE_tuplePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1998;
	        this.match(RustParser.LPAREN);
	        this.state = 2000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1397752352) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 608141341) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 1094975495) !== 0) || _la===127 || _la===129) {
	            this.state = 1999;
	            this.tuplePatternItems();
	        }

	        this.state = 2002;
	        this.match(RustParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuplePatternItems() {
	    let localctx = new TuplePatternItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, RustParser.RULE_tuplePatternItems);
	    var _la = 0;
	    try {
	        this.state = 2018;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2004;
	            this.pattern();
	            this.state = 2005;
	            this.match(RustParser.COMMA);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2007;
	            this.restPattern();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2008;
	            this.pattern();
	            this.state = 2011; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2009;
	            		this.match(RustParser.COMMA);
	            		this.state = 2010;
	            		this.pattern();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2013; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,270, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 2016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 2015;
	                this.match(RustParser.COMMA);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupedPattern() {
	    let localctx = new GroupedPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, RustParser.RULE_groupedPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2020;
	        this.match(RustParser.LPAREN);
	        this.state = 2021;
	        this.pattern();
	        this.state = 2022;
	        this.match(RustParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slicePattern() {
	    let localctx = new SlicePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, RustParser.RULE_slicePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2024;
	        this.match(RustParser.LSQUAREBRACKET);
	        this.state = 2026;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1397752352) !== 0) || ((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 608141341) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 1094975495) !== 0) || _la===127 || _la===129) {
	            this.state = 2025;
	            this.slicePatternItems();
	        }

	        this.state = 2028;
	        this.match(RustParser.RSQUAREBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slicePatternItems() {
	    let localctx = new SlicePatternItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, RustParser.RULE_slicePatternItems);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2030;
	        this.pattern();
	        this.state = 2035;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,274,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2031;
	                this.match(RustParser.COMMA);
	                this.state = 2032;
	                this.pattern(); 
	            }
	            this.state = 2037;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,274,this._ctx);
	        }

	        this.state = 2039;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 2038;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPattern() {
	    let localctx = new PathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, RustParser.RULE_pathPattern);
	    try {
	        this.state = 2043;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 24:
	        case 25:
	        case 28:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 119:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2041;
	            this.pathInExpression();
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2042;
	            this.qualifiedPathInExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, RustParser.RULE_type_);
	    try {
	        this.state = 2048;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2045;
	            this.typeNoBounds();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2046;
	            this.implTraitType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2047;
	            this.traitObjectType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNoBounds() {
	    let localctx = new TypeNoBoundsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, RustParser.RULE_typeNoBounds);
	    try {
	        this.state = 2064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2050;
	            this.parenthesizedType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2051;
	            this.implTraitTypeOneBound();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2052;
	            this.traitObjectTypeOneBound();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2053;
	            this.typePath();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2054;
	            this.tupleType();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2055;
	            this.neverType();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2056;
	            this.rawPointerType();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2057;
	            this.referenceType();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2058;
	            this.arrayType();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2059;
	            this.sliceType();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2060;
	            this.inferredType();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2061;
	            this.qualifiedPathInType();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2062;
	            this.bareFunctionType();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2063;
	            this.macroInvocation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedType() {
	    let localctx = new ParenthesizedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, RustParser.RULE_parenthesizedType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2066;
	        this.match(RustParser.LPAREN);
	        this.state = 2067;
	        this.type_();
	        this.state = 2068;
	        this.match(RustParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	neverType() {
	    let localctx = new NeverTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, RustParser.RULE_neverType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2070;
	        this.match(RustParser.NOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleType() {
	    let localctx = new TupleTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, RustParser.RULE_tupleType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2072;
	        this.match(RustParser.LPAREN);
	        this.state = 2083;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 318778656) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 132120641) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 1140851081) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1313) !== 0)) {
	            this.state = 2076; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2073;
	            		this.type_();
	            		this.state = 2074;
	            		this.match(RustParser.COMMA);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2078; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,279, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 2081;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 318778656) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 132120641) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 1140851081) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1313) !== 0)) {
	                this.state = 2080;
	                this.type_();
	            }

	        }

	        this.state = 2085;
	        this.match(RustParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, RustParser.RULE_arrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2087;
	        this.match(RustParser.LSQUAREBRACKET);
	        this.state = 2088;
	        this.type_();
	        this.state = 2089;
	        this.match(RustParser.SEMI);
	        this.state = 2090;
	        this.expression(0);
	        this.state = 2091;
	        this.match(RustParser.RSQUAREBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sliceType() {
	    let localctx = new SliceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, RustParser.RULE_sliceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2093;
	        this.match(RustParser.LSQUAREBRACKET);
	        this.state = 2094;
	        this.type_();
	        this.state = 2095;
	        this.match(RustParser.RSQUAREBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceType() {
	    let localctx = new ReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, RustParser.RULE_referenceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2097;
	        this.match(RustParser.AND);
	        this.state = 2099;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 268435461) !== 0)) {
	            this.state = 2098;
	            this.lifetime();
	        }

	        this.state = 2102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 2101;
	            this.match(RustParser.KW_MUT);
	        }

	        this.state = 2104;
	        this.typeNoBounds();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rawPointerType() {
	    let localctx = new RawPointerTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, RustParser.RULE_rawPointerType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2106;
	        this.match(RustParser.STAR);
	        this.state = 2107;
	        _la = this._input.LA(1);
	        if(!(_la===3 || _la===20)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2108;
	        this.typeNoBounds();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bareFunctionType() {
	    let localctx = new BareFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, RustParser.RULE_bareFunctionType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 2110;
	            this.forLifetimes();
	        }

	        this.state = 2113;
	        this.functionTypeQualifiers();
	        this.state = 2114;
	        this.match(RustParser.KW_FN);
	        this.state = 2115;
	        this.match(RustParser.LPAREN);
	        this.state = 2117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 318778656) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 132120641) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 1140851081) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1321) !== 0)) {
	            this.state = 2116;
	            this.functionParametersMaybeNamedVariadic();
	        }

	        this.state = 2119;
	        this.match(RustParser.RPAREN);
	        this.state = 2121;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	        if(la_===1) {
	            this.state = 2120;
	            this.bareFunctionReturnType();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeQualifiers() {
	    let localctx = new FunctionTypeQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, RustParser.RULE_functionTypeQualifiers);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2124;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 2123;
	            this.match(RustParser.KW_UNSAFE);
	        }

	        this.state = 2130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 2126;
	            this.match(RustParser.KW_EXTERN);
	            this.state = 2128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===70 || _la===71) {
	                this.state = 2127;
	                this.abi();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bareFunctionReturnType() {
	    let localctx = new BareFunctionReturnTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, RustParser.RULE_bareFunctionReturnType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2132;
	        this.match(RustParser.RARROW);
	        this.state = 2133;
	        this.typeNoBounds();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParametersMaybeNamedVariadic() {
	    let localctx = new FunctionParametersMaybeNamedVariadicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, RustParser.RULE_functionParametersMaybeNamedVariadic);
	    try {
	        this.state = 2137;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2135;
	            this.maybeNamedFunctionParameters();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2136;
	            this.maybeNamedFunctionParametersVariadic();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maybeNamedFunctionParameters() {
	    let localctx = new MaybeNamedFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, RustParser.RULE_maybeNamedFunctionParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2139;
	        this.maybeNamedParam();
	        this.state = 2144;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,291,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2140;
	                this.match(RustParser.COMMA);
	                this.state = 2141;
	                this.maybeNamedParam(); 
	            }
	            this.state = 2146;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,291,this._ctx);
	        }

	        this.state = 2148;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 2147;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maybeNamedParam() {
	    let localctx = new MaybeNamedParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, RustParser.RULE_maybeNamedParam);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 2150;
	            this.outerAttribute();
	            this.state = 2155;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2161;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        if(la_===1) {
	            this.state = 2158;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 54:
	            case 57:
	            case 58:
	                this.state = 2156;
	                this.identifier();
	                break;
	            case 111:
	                this.state = 2157;
	                this.match(RustParser.UNDERSCORE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2160;
	            this.match(RustParser.COLON);

	        }
	        this.state = 2163;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maybeNamedFunctionParametersVariadic() {
	    let localctx = new MaybeNamedFunctionParametersVariadicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, RustParser.RULE_maybeNamedFunctionParametersVariadic);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2170;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,296,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2165;
	                this.maybeNamedParam();
	                this.state = 2166;
	                this.match(RustParser.COMMA); 
	            }
	            this.state = 2172;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,296,this._ctx);
	        }

	        this.state = 2173;
	        this.maybeNamedParam();
	        this.state = 2174;
	        this.match(RustParser.COMMA);
	        this.state = 2178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 2175;
	            this.outerAttribute();
	            this.state = 2180;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2181;
	        this.match(RustParser.DOTDOTDOT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitObjectType() {
	    let localctx = new TraitObjectTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, RustParser.RULE_traitObjectType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 2183;
	            this.match(RustParser.KW_DYN);
	        }

	        this.state = 2186;
	        this.typeParamBounds();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitObjectTypeOneBound() {
	    let localctx = new TraitObjectTypeOneBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, RustParser.RULE_traitObjectTypeOneBound);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 2188;
	            this.match(RustParser.KW_DYN);
	        }

	        this.state = 2191;
	        this.traitBound();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implTraitType() {
	    let localctx = new ImplTraitTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, RustParser.RULE_implTraitType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2193;
	        this.match(RustParser.KW_IMPL);
	        this.state = 2194;
	        this.typeParamBounds();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implTraitTypeOneBound() {
	    let localctx = new ImplTraitTypeOneBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, RustParser.RULE_implTraitTypeOneBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2196;
	        this.match(RustParser.KW_IMPL);
	        this.state = 2197;
	        this.traitBound();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inferredType() {
	    let localctx = new InferredTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, RustParser.RULE_inferredType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2199;
	        this.match(RustParser.UNDERSCORE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParamBounds() {
	    let localctx = new TypeParamBoundsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, RustParser.RULE_typeParamBounds);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2201;
	        this.typeParamBound();
	        this.state = 2206;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,300,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2202;
	                this.match(RustParser.PLUS);
	                this.state = 2203;
	                this.typeParamBound(); 
	            }
	            this.state = 2208;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,300,this._ctx);
	        }

	        this.state = 2210;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	        if(la_===1) {
	            this.state = 2209;
	            this.match(RustParser.PLUS);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParamBound() {
	    let localctx = new TypeParamBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, RustParser.RULE_typeParamBound);
	    try {
	        this.state = 2214;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	        case 55:
	        case 81:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2212;
	            this.lifetime();
	            break;
	        case 5:
	        case 11:
	        case 24:
	        case 25:
	        case 28:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 119:
	        case 124:
	        case 129:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2213;
	            this.traitBound();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	traitBound() {
	    let localctx = new TraitBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, RustParser.RULE_traitBound);
	    var _la = 0;
	    try {
	        this.state = 2233;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 11:
	        case 24:
	        case 25:
	        case 28:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 119:
	        case 124:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===124) {
	                this.state = 2216;
	                this.match(RustParser.QUESTION);
	            }

	            this.state = 2220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===11) {
	                this.state = 2219;
	                this.forLifetimes();
	            }

	            this.state = 2222;
	            this.typePath();
	            break;
	        case 129:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2223;
	            this.match(RustParser.LPAREN);
	            this.state = 2225;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===124) {
	                this.state = 2224;
	                this.match(RustParser.QUESTION);
	            }

	            this.state = 2228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===11) {
	                this.state = 2227;
	                this.forLifetimes();
	            }

	            this.state = 2230;
	            this.typePath();
	            this.state = 2231;
	            this.match(RustParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lifetimeBounds() {
	    let localctx = new LifetimeBoundsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, RustParser.RULE_lifetimeBounds);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2240;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,308,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2235;
	                this.lifetime();
	                this.state = 2236;
	                this.match(RustParser.PLUS); 
	            }
	            this.state = 2242;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,308,this._ctx);
	        }

	        this.state = 2244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 268435461) !== 0)) {
	            this.state = 2243;
	            this.lifetime();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lifetime() {
	    let localctx = new LifetimeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, RustParser.RULE_lifetime);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2246;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 268435461) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplePath() {
	    let localctx = new SimplePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, RustParser.RULE_simplePath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===119) {
	            this.state = 2248;
	            this.match(RustParser.PATHSEP);
	        }

	        this.state = 2251;
	        this.simplePathSegment();
	        this.state = 2256;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,311,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2252;
	                this.match(RustParser.PATHSEP);
	                this.state = 2253;
	                this.simplePathSegment(); 
	            }
	            this.state = 2258;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,311,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplePathSegment() {
	    let localctx = new SimplePathSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, RustParser.RULE_simplePathSegment);
	    try {
	        this.state = 2264;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 57:
	        case 58:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2259;
	            this.identifier();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2260;
	            this.match(RustParser.KW_SUPER);
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2261;
	            this.match(RustParser.KW_SELFVALUE);
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2262;
	            this.match(RustParser.KW_CRATE);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2263;
	            this.match(RustParser.KW_DOLLARCRATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathInExpression() {
	    let localctx = new PathInExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, RustParser.RULE_pathInExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2267;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===119) {
	            this.state = 2266;
	            this.match(RustParser.PATHSEP);
	        }

	        this.state = 2269;
	        this.pathExprSegment();
	        this.state = 2274;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,314,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2270;
	                this.match(RustParser.PATHSEP);
	                this.state = 2271;
	                this.pathExprSegment(); 
	            }
	            this.state = 2276;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,314,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathExprSegment() {
	    let localctx = new PathExprSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, RustParser.RULE_pathExprSegment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2277;
	        this.pathIdentSegment();
	        this.state = 2280;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	        if(la_===1) {
	            this.state = 2278;
	            this.match(RustParser.PATHSEP);
	            this.state = 2279;
	            this.genericArgs();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathIdentSegment() {
	    let localctx = new PathIdentSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, RustParser.RULE_pathIdentSegment);
	    try {
	        this.state = 2288;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	        case 57:
	        case 58:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2282;
	            this.identifier();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2283;
	            this.match(RustParser.KW_SUPER);
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2284;
	            this.match(RustParser.KW_SELFVALUE);
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2285;
	            this.match(RustParser.KW_SELFTYPE);
	            break;
	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2286;
	            this.match(RustParser.KW_CRATE);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2287;
	            this.match(RustParser.KW_DOLLARCRATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericArgs() {
	    let localctx = new GenericArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, RustParser.RULE_genericArgs);
	    var _la = 0;
	    try {
	        this.state = 2333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2290;
	            this.match(RustParser.LT);
	            this.state = 2291;
	            this.match(RustParser.GT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2292;
	            this.match(RustParser.LT);
	            this.state = 2293;
	            this.genericArgsLifetimes();
	            this.state = 2296;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
	            if(la_===1) {
	                this.state = 2294;
	                this.match(RustParser.COMMA);
	                this.state = 2295;
	                this.genericArgsTypes();

	            }
	            this.state = 2300;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	            if(la_===1) {
	                this.state = 2298;
	                this.match(RustParser.COMMA);
	                this.state = 2299;
	                this.genericArgsBindings();

	            }
	            this.state = 2303;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 2302;
	                this.match(RustParser.COMMA);
	            }

	            this.state = 2305;
	            this.match(RustParser.GT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2307;
	            this.match(RustParser.LT);
	            this.state = 2308;
	            this.genericArgsTypes();
	            this.state = 2311;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
	            if(la_===1) {
	                this.state = 2309;
	                this.match(RustParser.COMMA);
	                this.state = 2310;
	                this.genericArgsBindings();

	            }
	            this.state = 2314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 2313;
	                this.match(RustParser.COMMA);
	            }

	            this.state = 2316;
	            this.match(RustParser.GT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2318;
	            this.match(RustParser.LT);
	            this.state = 2324;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,322,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2319;
	                    this.genericArg();
	                    this.state = 2320;
	                    this.match(RustParser.COMMA); 
	                }
	                this.state = 2326;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,322,this._ctx);
	            }

	            this.state = 2327;
	            this.genericArg();
	            this.state = 2329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===116) {
	                this.state = 2328;
	                this.match(RustParser.COMMA);
	            }

	            this.state = 2331;
	            this.match(RustParser.GT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericArg() {
	    let localctx = new GenericArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, RustParser.RULE_genericArg);
	    try {
	        this.state = 2339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2335;
	            this.lifetime();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2336;
	            this.type_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2337;
	            this.genericArgsConst();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2338;
	            this.genericArgsBinding();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericArgsConst() {
	    let localctx = new GenericArgsConstContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, RustParser.RULE_genericArgsConst);
	    var _la = 0;
	    try {
	        this.state = 2347;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2341;
	            this.blockExpression();
	            break;
	        case 9:
	        case 30:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 80:
	        case 83:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83) {
	                this.state = 2342;
	                this.match(RustParser.MINUS);
	            }

	            this.state = 2345;
	            this.literalExpression();
	            break;
	        case 5:
	        case 24:
	        case 28:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2346;
	            this.simplePathSegment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericArgsLifetimes() {
	    let localctx = new GenericArgsLifetimesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, RustParser.RULE_genericArgsLifetimes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2349;
	        this.lifetime();
	        this.state = 2354;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,328,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2350;
	                this.match(RustParser.COMMA);
	                this.state = 2351;
	                this.lifetime(); 
	            }
	            this.state = 2356;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,328,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericArgsTypes() {
	    let localctx = new GenericArgsTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, RustParser.RULE_genericArgsTypes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2357;
	        this.type_();
	        this.state = 2362;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,329,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2358;
	                this.match(RustParser.COMMA);
	                this.state = 2359;
	                this.type_(); 
	            }
	            this.state = 2364;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,329,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericArgsBindings() {
	    let localctx = new GenericArgsBindingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, RustParser.RULE_genericArgsBindings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2365;
	        this.genericArgsBinding();
	        this.state = 2370;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,330,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2366;
	                this.match(RustParser.COMMA);
	                this.state = 2367;
	                this.genericArgsBinding(); 
	            }
	            this.state = 2372;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,330,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericArgsBinding() {
	    let localctx = new GenericArgsBindingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, RustParser.RULE_genericArgsBinding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2373;
	        this.identifier();
	        this.state = 2374;
	        this.match(RustParser.EQ);
	        this.state = 2375;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedPathInExpression() {
	    let localctx = new QualifiedPathInExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, RustParser.RULE_qualifiedPathInExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2377;
	        this.qualifiedPathType();
	        this.state = 2380; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2378;
	        		this.match(RustParser.PATHSEP);
	        		this.state = 2379;
	        		this.pathExprSegment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2382; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,331, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedPathType() {
	    let localctx = new QualifiedPathTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, RustParser.RULE_qualifiedPathType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2384;
	        this.match(RustParser.LT);
	        this.state = 2385;
	        this.type_();
	        this.state = 2388;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 2386;
	            this.match(RustParser.KW_AS);
	            this.state = 2387;
	            this.typePath();
	        }

	        this.state = 2390;
	        this.match(RustParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedPathInType() {
	    let localctx = new QualifiedPathInTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, RustParser.RULE_qualifiedPathInType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2392;
	        this.qualifiedPathType();
	        this.state = 2395; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2393;
	        		this.match(RustParser.PATHSEP);
	        		this.state = 2394;
	        		this.typePathSegment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2397; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,333, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typePath() {
	    let localctx = new TypePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, RustParser.RULE_typePath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===119) {
	            this.state = 2399;
	            this.match(RustParser.PATHSEP);
	        }

	        this.state = 2402;
	        this.typePathSegment();
	        this.state = 2407;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,335,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2403;
	                this.match(RustParser.PATHSEP);
	                this.state = 2404;
	                this.typePathSegment(); 
	            }
	            this.state = 2409;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,335,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typePathSegment() {
	    let localctx = new TypePathSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, RustParser.RULE_typePathSegment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2410;
	        this.pathIdentSegment();
	        this.state = 2412;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	        if(la_===1) {
	            this.state = 2411;
	            this.match(RustParser.PATHSEP);

	        }
	        this.state = 2416;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	        if(la_===1) {
	            this.state = 2414;
	            this.genericArgs();

	        } else if(la_===2) {
	            this.state = 2415;
	            this.typePathFn();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typePathFn() {
	    let localctx = new TypePathFnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, RustParser.RULE_typePathFn);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2418;
	        this.match(RustParser.LPAREN);
	        this.state = 2420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 318778656) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 132120641) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 1140851081) !== 0) || ((((_la - 119)) & ~0x1f) === 0 && ((1 << (_la - 119)) & 1313) !== 0)) {
	            this.state = 2419;
	            this.typePathInputs();
	        }

	        this.state = 2422;
	        this.match(RustParser.RPAREN);
	        this.state = 2425;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	        if(la_===1) {
	            this.state = 2423;
	            this.match(RustParser.RARROW);
	            this.state = 2424;
	            this.type_();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typePathInputs() {
	    let localctx = new TypePathInputsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, RustParser.RULE_typePathInputs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2427;
	        this.type_();
	        this.state = 2432;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,340,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2428;
	                this.match(RustParser.COMMA);
	                this.state = 2429;
	                this.type_(); 
	            }
	            this.state = 2434;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,340,this._ctx);
	        }

	        this.state = 2436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 2435;
	            this.match(RustParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	visibility() {
	    let localctx = new VisibilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, RustParser.RULE_visibility);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2438;
	        this.match(RustParser.KW_PUB);
	        this.state = 2448;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	        if(la_===1) {
	            this.state = 2439;
	            this.match(RustParser.LPAREN);
	            this.state = 2445;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 5:
	                this.state = 2440;
	                this.match(RustParser.KW_CRATE);
	                break;
	            case 24:
	                this.state = 2441;
	                this.match(RustParser.KW_SELFVALUE);
	                break;
	            case 28:
	                this.state = 2442;
	                this.match(RustParser.KW_SUPER);
	                break;
	            case 14:
	                this.state = 2443;
	                this.match(RustParser.KW_IN);
	                this.state = 2444;
	                this.simplePath();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2447;
	            this.match(RustParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, RustParser.RULE_identifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2450;
	        _la = this._input.LA(1);
	        if(!(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 25) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, RustParser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2452;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4194303) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroIdentifierLikeToken() {
	    let localctx = new MacroIdentifierLikeTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, RustParser.RULE_macroIdentifierLikeToken);
	    try {
	        this.state = 2460;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2454;
	            this.keyword();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2455;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2456;
	            this.match(RustParser.KW_MACRORULES);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2457;
	            this.match(RustParser.KW_UNDERLINELIFETIME);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2458;
	            this.match(RustParser.KW_DOLLARCRATE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2459;
	            this.match(RustParser.LIFETIME_OR_LABEL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroLiteralToken() {
	    let localctx = new MacroLiteralTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, RustParser.RULE_macroLiteralToken);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2462;
	        this.literalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	macroPunctuationToken() {
	    let localctx = new MacroPunctuationTokenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, RustParser.RULE_macroPunctuationToken);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2464;
	        _la = this._input.LA(1);
	        if(!(((((_la - 83)) & ~0x1f) === 0 && ((1 << (_la - 83)) & 4294967293) !== 0) || ((((_la - 115)) & ~0x1f) === 0 && ((1 << (_la - 115)) & 255) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shl() {
	    let localctx = new ShlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, RustParser.RULE_shl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2466;
	        this.match(RustParser.LT);
	        this.state = 2467;
	        if (!( this.next('<'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.next('<')");
	        }
	        this.state = 2468;
	        this.match(RustParser.LT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shr() {
	    let localctx = new ShrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, RustParser.RULE_shr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2470;
	        this.match(RustParser.GT);
	        this.state = 2471;
	        if (!( this.next('>'))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.next('>')");
	        }
	        this.state = 2472;
	        this.match(RustParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

RustParser.EOF = antlr4.Token.EOF;
RustParser.KW_AS = 1;
RustParser.KW_BREAK = 2;
RustParser.KW_CONST = 3;
RustParser.KW_CONTINUE = 4;
RustParser.KW_CRATE = 5;
RustParser.KW_ELSE = 6;
RustParser.KW_ENUM = 7;
RustParser.KW_EXTERN = 8;
RustParser.KW_FALSE = 9;
RustParser.KW_FN = 10;
RustParser.KW_FOR = 11;
RustParser.KW_IF = 12;
RustParser.KW_IMPL = 13;
RustParser.KW_IN = 14;
RustParser.KW_LET = 15;
RustParser.KW_LOOP = 16;
RustParser.KW_MATCH = 17;
RustParser.KW_MOD = 18;
RustParser.KW_MOVE = 19;
RustParser.KW_MUT = 20;
RustParser.KW_PUB = 21;
RustParser.KW_REF = 22;
RustParser.KW_RETURN = 23;
RustParser.KW_SELFVALUE = 24;
RustParser.KW_SELFTYPE = 25;
RustParser.KW_STATIC = 26;
RustParser.KW_STRUCT = 27;
RustParser.KW_SUPER = 28;
RustParser.KW_TRAIT = 29;
RustParser.KW_TRUE = 30;
RustParser.KW_TYPE = 31;
RustParser.KW_UNSAFE = 32;
RustParser.KW_USE = 33;
RustParser.KW_WHERE = 34;
RustParser.KW_WHILE = 35;
RustParser.KW_ASYNC = 36;
RustParser.KW_AWAIT = 37;
RustParser.KW_DYN = 38;
RustParser.KW_ABSTRACT = 39;
RustParser.KW_BECOME = 40;
RustParser.KW_BOX = 41;
RustParser.KW_DO = 42;
RustParser.KW_FINAL = 43;
RustParser.KW_MACRO = 44;
RustParser.KW_OVERRIDE = 45;
RustParser.KW_PRIV = 46;
RustParser.KW_TYPEOF = 47;
RustParser.KW_UNSIZED = 48;
RustParser.KW_VIRTUAL = 49;
RustParser.KW_YIELD = 50;
RustParser.KW_TRY = 51;
RustParser.KW_UNION = 52;
RustParser.KW_STATICLIFETIME = 53;
RustParser.KW_MACRORULES = 54;
RustParser.KW_UNDERLINELIFETIME = 55;
RustParser.KW_DOLLARCRATE = 56;
RustParser.NON_KEYWORD_IDENTIFIER = 57;
RustParser.RAW_IDENTIFIER = 58;
RustParser.LINE_COMMENT = 59;
RustParser.BLOCK_COMMENT = 60;
RustParser.INNER_LINE_DOC = 61;
RustParser.INNER_BLOCK_DOC = 62;
RustParser.OUTER_LINE_DOC = 63;
RustParser.OUTER_BLOCK_DOC = 64;
RustParser.BLOCK_COMMENT_OR_DOC = 65;
RustParser.SHEBANG = 66;
RustParser.WHITESPACE = 67;
RustParser.NEWLINE = 68;
RustParser.CHAR_LITERAL = 69;
RustParser.STRING_LITERAL = 70;
RustParser.RAW_STRING_LITERAL = 71;
RustParser.BYTE_LITERAL = 72;
RustParser.BYTE_STRING_LITERAL = 73;
RustParser.RAW_BYTE_STRING_LITERAL = 74;
RustParser.INTEGER_LITERAL = 75;
RustParser.DEC_LITERAL = 76;
RustParser.HEX_LITERAL = 77;
RustParser.OCT_LITERAL = 78;
RustParser.BIN_LITERAL = 79;
RustParser.FLOAT_LITERAL = 80;
RustParser.LIFETIME_OR_LABEL = 81;
RustParser.PLUS = 82;
RustParser.MINUS = 83;
RustParser.STAR = 84;
RustParser.SLASH = 85;
RustParser.PERCENT = 86;
RustParser.CARET = 87;
RustParser.NOT = 88;
RustParser.AND = 89;
RustParser.OR = 90;
RustParser.ANDAND = 91;
RustParser.OROR = 92;
RustParser.PLUSEQ = 93;
RustParser.MINUSEQ = 94;
RustParser.STAREQ = 95;
RustParser.SLASHEQ = 96;
RustParser.PERCENTEQ = 97;
RustParser.CARETEQ = 98;
RustParser.ANDEQ = 99;
RustParser.OREQ = 100;
RustParser.SHLEQ = 101;
RustParser.SHREQ = 102;
RustParser.EQ = 103;
RustParser.EQEQ = 104;
RustParser.NE = 105;
RustParser.GT = 106;
RustParser.LT = 107;
RustParser.GE = 108;
RustParser.LE = 109;
RustParser.AT = 110;
RustParser.UNDERSCORE = 111;
RustParser.DOT = 112;
RustParser.DOTDOT = 113;
RustParser.DOTDOTDOT = 114;
RustParser.DOTDOTEQ = 115;
RustParser.COMMA = 116;
RustParser.SEMI = 117;
RustParser.COLON = 118;
RustParser.PATHSEP = 119;
RustParser.RARROW = 120;
RustParser.FATARROW = 121;
RustParser.POUND = 122;
RustParser.DOLLAR = 123;
RustParser.QUESTION = 124;
RustParser.LCURLYBRACE = 125;
RustParser.RCURLYBRACE = 126;
RustParser.LSQUAREBRACKET = 127;
RustParser.RSQUAREBRACKET = 128;
RustParser.LPAREN = 129;
RustParser.RPAREN = 130;

RustParser.RULE_crate = 0;
RustParser.RULE_macroInvocation = 1;
RustParser.RULE_delimTokenTree = 2;
RustParser.RULE_tokenTree = 3;
RustParser.RULE_tokenTreeToken = 4;
RustParser.RULE_macroInvocationSemi = 5;
RustParser.RULE_macroRulesDefinition = 6;
RustParser.RULE_macroRulesDef = 7;
RustParser.RULE_macroRules = 8;
RustParser.RULE_macroRule = 9;
RustParser.RULE_macroMatcher = 10;
RustParser.RULE_macroMatch = 11;
RustParser.RULE_macroMatchToken = 12;
RustParser.RULE_macroFragSpec = 13;
RustParser.RULE_macroRepSep = 14;
RustParser.RULE_macroRepOp = 15;
RustParser.RULE_macroTranscriber = 16;
RustParser.RULE_item = 17;
RustParser.RULE_visItem = 18;
RustParser.RULE_macroItem = 19;
RustParser.RULE_module = 20;
RustParser.RULE_externCrate = 21;
RustParser.RULE_crateRef = 22;
RustParser.RULE_asClause = 23;
RustParser.RULE_useDeclaration = 24;
RustParser.RULE_useTree = 25;
RustParser.RULE_function_ = 26;
RustParser.RULE_functionQualifiers = 27;
RustParser.RULE_abi = 28;
RustParser.RULE_functionParameters = 29;
RustParser.RULE_selfParam = 30;
RustParser.RULE_shorthandSelf = 31;
RustParser.RULE_typedSelf = 32;
RustParser.RULE_functionParam = 33;
RustParser.RULE_functionParamPattern = 34;
RustParser.RULE_functionReturnType = 35;
RustParser.RULE_typeAlias = 36;
RustParser.RULE_struct_ = 37;
RustParser.RULE_structStruct = 38;
RustParser.RULE_tupleStruct = 39;
RustParser.RULE_structFields = 40;
RustParser.RULE_structField = 41;
RustParser.RULE_tupleFields = 42;
RustParser.RULE_tupleField = 43;
RustParser.RULE_enumeration = 44;
RustParser.RULE_enumItems = 45;
RustParser.RULE_enumItem = 46;
RustParser.RULE_enumItemTuple = 47;
RustParser.RULE_enumItemStruct = 48;
RustParser.RULE_enumItemDiscriminant = 49;
RustParser.RULE_union_ = 50;
RustParser.RULE_constantItem = 51;
RustParser.RULE_staticItem = 52;
RustParser.RULE_trait_ = 53;
RustParser.RULE_implementation = 54;
RustParser.RULE_inherentImpl = 55;
RustParser.RULE_traitImpl = 56;
RustParser.RULE_externBlock = 57;
RustParser.RULE_externalItem = 58;
RustParser.RULE_genericParams = 59;
RustParser.RULE_genericParam = 60;
RustParser.RULE_lifetimeParam = 61;
RustParser.RULE_typeParam = 62;
RustParser.RULE_constParam = 63;
RustParser.RULE_whereClause = 64;
RustParser.RULE_whereClauseItem = 65;
RustParser.RULE_lifetimeWhereClauseItem = 66;
RustParser.RULE_typeBoundWhereClauseItem = 67;
RustParser.RULE_forLifetimes = 68;
RustParser.RULE_associatedItem = 69;
RustParser.RULE_innerAttribute = 70;
RustParser.RULE_outerAttribute = 71;
RustParser.RULE_attr = 72;
RustParser.RULE_attrInput = 73;
RustParser.RULE_statement = 74;
RustParser.RULE_letStatement = 75;
RustParser.RULE_expressionStatement = 76;
RustParser.RULE_expression = 77;
RustParser.RULE_comparisonOperator = 78;
RustParser.RULE_compoundAssignOperator = 79;
RustParser.RULE_expressionWithBlock = 80;
RustParser.RULE_literalExpression = 81;
RustParser.RULE_pathExpression = 82;
RustParser.RULE_blockExpression = 83;
RustParser.RULE_statements = 84;
RustParser.RULE_asyncBlockExpression = 85;
RustParser.RULE_unsafeBlockExpression = 86;
RustParser.RULE_arrayElements = 87;
RustParser.RULE_tupleElements = 88;
RustParser.RULE_tupleIndex = 89;
RustParser.RULE_structExpression = 90;
RustParser.RULE_structExprStruct = 91;
RustParser.RULE_structExprFields = 92;
RustParser.RULE_structExprField = 93;
RustParser.RULE_structBase = 94;
RustParser.RULE_structExprTuple = 95;
RustParser.RULE_structExprUnit = 96;
RustParser.RULE_enumerationVariantExpression = 97;
RustParser.RULE_enumExprStruct = 98;
RustParser.RULE_enumExprFields = 99;
RustParser.RULE_enumExprField = 100;
RustParser.RULE_enumExprTuple = 101;
RustParser.RULE_enumExprFieldless = 102;
RustParser.RULE_callParams = 103;
RustParser.RULE_closureExpression = 104;
RustParser.RULE_closureParameters = 105;
RustParser.RULE_closureParam = 106;
RustParser.RULE_loopExpression = 107;
RustParser.RULE_infiniteLoopExpression = 108;
RustParser.RULE_predicateLoopExpression = 109;
RustParser.RULE_predicatePatternLoopExpression = 110;
RustParser.RULE_iteratorLoopExpression = 111;
RustParser.RULE_loopLabel = 112;
RustParser.RULE_ifExpression = 113;
RustParser.RULE_ifLetExpression = 114;
RustParser.RULE_matchExpression = 115;
RustParser.RULE_matchArms = 116;
RustParser.RULE_matchArmExpression = 117;
RustParser.RULE_matchArm = 118;
RustParser.RULE_matchArmGuard = 119;
RustParser.RULE_pattern = 120;
RustParser.RULE_patternNoTopAlt = 121;
RustParser.RULE_patternWithoutRange = 122;
RustParser.RULE_literalPattern = 123;
RustParser.RULE_identifierPattern = 124;
RustParser.RULE_wildcardPattern = 125;
RustParser.RULE_restPattern = 126;
RustParser.RULE_rangePattern = 127;
RustParser.RULE_rangePatternBound = 128;
RustParser.RULE_referencePattern = 129;
RustParser.RULE_structPattern = 130;
RustParser.RULE_structPatternElements = 131;
RustParser.RULE_structPatternFields = 132;
RustParser.RULE_structPatternField = 133;
RustParser.RULE_structPatternEtCetera = 134;
RustParser.RULE_tupleStructPattern = 135;
RustParser.RULE_tupleStructItems = 136;
RustParser.RULE_tuplePattern = 137;
RustParser.RULE_tuplePatternItems = 138;
RustParser.RULE_groupedPattern = 139;
RustParser.RULE_slicePattern = 140;
RustParser.RULE_slicePatternItems = 141;
RustParser.RULE_pathPattern = 142;
RustParser.RULE_type_ = 143;
RustParser.RULE_typeNoBounds = 144;
RustParser.RULE_parenthesizedType = 145;
RustParser.RULE_neverType = 146;
RustParser.RULE_tupleType = 147;
RustParser.RULE_arrayType = 148;
RustParser.RULE_sliceType = 149;
RustParser.RULE_referenceType = 150;
RustParser.RULE_rawPointerType = 151;
RustParser.RULE_bareFunctionType = 152;
RustParser.RULE_functionTypeQualifiers = 153;
RustParser.RULE_bareFunctionReturnType = 154;
RustParser.RULE_functionParametersMaybeNamedVariadic = 155;
RustParser.RULE_maybeNamedFunctionParameters = 156;
RustParser.RULE_maybeNamedParam = 157;
RustParser.RULE_maybeNamedFunctionParametersVariadic = 158;
RustParser.RULE_traitObjectType = 159;
RustParser.RULE_traitObjectTypeOneBound = 160;
RustParser.RULE_implTraitType = 161;
RustParser.RULE_implTraitTypeOneBound = 162;
RustParser.RULE_inferredType = 163;
RustParser.RULE_typeParamBounds = 164;
RustParser.RULE_typeParamBound = 165;
RustParser.RULE_traitBound = 166;
RustParser.RULE_lifetimeBounds = 167;
RustParser.RULE_lifetime = 168;
RustParser.RULE_simplePath = 169;
RustParser.RULE_simplePathSegment = 170;
RustParser.RULE_pathInExpression = 171;
RustParser.RULE_pathExprSegment = 172;
RustParser.RULE_pathIdentSegment = 173;
RustParser.RULE_genericArgs = 174;
RustParser.RULE_genericArg = 175;
RustParser.RULE_genericArgsConst = 176;
RustParser.RULE_genericArgsLifetimes = 177;
RustParser.RULE_genericArgsTypes = 178;
RustParser.RULE_genericArgsBindings = 179;
RustParser.RULE_genericArgsBinding = 180;
RustParser.RULE_qualifiedPathInExpression = 181;
RustParser.RULE_qualifiedPathType = 182;
RustParser.RULE_qualifiedPathInType = 183;
RustParser.RULE_typePath = 184;
RustParser.RULE_typePathSegment = 185;
RustParser.RULE_typePathFn = 186;
RustParser.RULE_typePathInputs = 187;
RustParser.RULE_visibility = 188;
RustParser.RULE_identifier = 189;
RustParser.RULE_keyword = 190;
RustParser.RULE_macroIdentifierLikeToken = 191;
RustParser.RULE_macroLiteralToken = 192;
RustParser.RULE_macroPunctuationToken = 193;
RustParser.RULE_shl = 194;
RustParser.RULE_shr = 195;

class CrateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_crate;
    }

	EOF() {
	    return this.getToken(RustParser.EOF, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ItemContext);
	    } else {
	        return this.getTypedRuleContext(ItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterCrate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitCrate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitCrate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroInvocation;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	NOT() {
	    return this.getToken(RustParser.NOT, 0);
	};

	delimTokenTree() {
	    return this.getTypedRuleContext(DelimTokenTreeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroInvocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroInvocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DelimTokenTreeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_delimTokenTree;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	tokenTree = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokenTreeContext);
	    } else {
	        return this.getTypedRuleContext(TokenTreeContext,i);
	    }
	};

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterDelimTokenTree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitDelimTokenTree(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitDelimTokenTree(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TokenTreeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tokenTree;
    }

	tokenTreeToken = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokenTreeTokenContext);
	    } else {
	        return this.getTypedRuleContext(TokenTreeTokenContext,i);
	    }
	};

	delimTokenTree() {
	    return this.getTypedRuleContext(DelimTokenTreeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTokenTree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTokenTree(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTokenTree(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TokenTreeTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tokenTreeToken;
    }

	macroIdentifierLikeToken() {
	    return this.getTypedRuleContext(MacroIdentifierLikeTokenContext,0);
	};

	macroLiteralToken() {
	    return this.getTypedRuleContext(MacroLiteralTokenContext,0);
	};

	macroPunctuationToken() {
	    return this.getTypedRuleContext(MacroPunctuationTokenContext,0);
	};

	macroRepOp() {
	    return this.getTypedRuleContext(MacroRepOpContext,0);
	};

	DOLLAR() {
	    return this.getToken(RustParser.DOLLAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTokenTreeToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTokenTreeToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTokenTreeToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroInvocationSemiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroInvocationSemi;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	NOT() {
	    return this.getToken(RustParser.NOT, 0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	tokenTree = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TokenTreeContext);
	    } else {
	        return this.getTypedRuleContext(TokenTreeContext,i);
	    }
	};

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroInvocationSemi(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroInvocationSemi(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroInvocationSemi(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroRulesDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroRulesDefinition;
    }

	KW_MACRORULES() {
	    return this.getToken(RustParser.KW_MACRORULES, 0);
	};

	NOT() {
	    return this.getToken(RustParser.NOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	macroRulesDef() {
	    return this.getTypedRuleContext(MacroRulesDefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroRulesDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroRulesDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroRulesDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroRulesDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroRulesDef;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	macroRules() {
	    return this.getTypedRuleContext(MacroRulesContext,0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroRulesDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroRulesDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroRulesDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroRulesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroRules;
    }

	macroRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MacroRuleContext);
	    } else {
	        return this.getTypedRuleContext(MacroRuleContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.SEMI);
	    } else {
	        return this.getToken(RustParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroRules(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroRules(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroRules(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroRule;
    }

	macroMatcher() {
	    return this.getTypedRuleContext(MacroMatcherContext,0);
	};

	FATARROW() {
	    return this.getToken(RustParser.FATARROW, 0);
	};

	macroTranscriber() {
	    return this.getTypedRuleContext(MacroTranscriberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroMatcherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroMatcher;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	macroMatch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MacroMatchContext);
	    } else {
	        return this.getTypedRuleContext(MacroMatchContext,i);
	    }
	};

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroMatcher(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroMatcher(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroMatcher(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroMatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroMatch;
    }

	macroMatchToken = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MacroMatchTokenContext);
	    } else {
	        return this.getTypedRuleContext(MacroMatchTokenContext,i);
	    }
	};

	macroMatcher() {
	    return this.getTypedRuleContext(MacroMatcherContext,0);
	};

	DOLLAR() {
	    return this.getToken(RustParser.DOLLAR, 0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	macroFragSpec() {
	    return this.getTypedRuleContext(MacroFragSpecContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SELFVALUE() {
	    return this.getToken(RustParser.KW_SELFVALUE, 0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	macroRepOp() {
	    return this.getTypedRuleContext(MacroRepOpContext,0);
	};

	macroMatch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MacroMatchContext);
	    } else {
	        return this.getTypedRuleContext(MacroMatchContext,i);
	    }
	};

	macroRepSep() {
	    return this.getTypedRuleContext(MacroRepSepContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroMatch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroMatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroMatchTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroMatchToken;
    }

	macroIdentifierLikeToken() {
	    return this.getTypedRuleContext(MacroIdentifierLikeTokenContext,0);
	};

	macroLiteralToken() {
	    return this.getTypedRuleContext(MacroLiteralTokenContext,0);
	};

	macroPunctuationToken() {
	    return this.getTypedRuleContext(MacroPunctuationTokenContext,0);
	};

	macroRepOp() {
	    return this.getTypedRuleContext(MacroRepOpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroMatchToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroMatchToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroMatchToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroFragSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroFragSpec;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroFragSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroFragSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroFragSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroRepSepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroRepSep;
    }

	macroIdentifierLikeToken() {
	    return this.getTypedRuleContext(MacroIdentifierLikeTokenContext,0);
	};

	macroLiteralToken() {
	    return this.getTypedRuleContext(MacroLiteralTokenContext,0);
	};

	macroPunctuationToken() {
	    return this.getTypedRuleContext(MacroPunctuationTokenContext,0);
	};

	DOLLAR() {
	    return this.getToken(RustParser.DOLLAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroRepSep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroRepSep(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroRepSep(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroRepOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroRepOp;
    }

	STAR() {
	    return this.getToken(RustParser.STAR, 0);
	};

	PLUS() {
	    return this.getToken(RustParser.PLUS, 0);
	};

	QUESTION() {
	    return this.getToken(RustParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroRepOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroRepOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroRepOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroTranscriberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroTranscriber;
    }

	delimTokenTree() {
	    return this.getTypedRuleContext(DelimTokenTreeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroTranscriber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroTranscriber(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroTranscriber(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_item;
    }

	visItem() {
	    return this.getTypedRuleContext(VisItemContext,0);
	};

	macroItem() {
	    return this.getTypedRuleContext(MacroItemContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VisItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_visItem;
    }

	module() {
	    return this.getTypedRuleContext(ModuleContext,0);
	};

	externCrate() {
	    return this.getTypedRuleContext(ExternCrateContext,0);
	};

	useDeclaration() {
	    return this.getTypedRuleContext(UseDeclarationContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	typeAlias() {
	    return this.getTypedRuleContext(TypeAliasContext,0);
	};

	struct_() {
	    return this.getTypedRuleContext(Struct_Context,0);
	};

	enumeration() {
	    return this.getTypedRuleContext(EnumerationContext,0);
	};

	union_() {
	    return this.getTypedRuleContext(Union_Context,0);
	};

	constantItem() {
	    return this.getTypedRuleContext(ConstantItemContext,0);
	};

	staticItem() {
	    return this.getTypedRuleContext(StaticItemContext,0);
	};

	trait_() {
	    return this.getTypedRuleContext(Trait_Context,0);
	};

	implementation() {
	    return this.getTypedRuleContext(ImplementationContext,0);
	};

	externBlock() {
	    return this.getTypedRuleContext(ExternBlockContext,0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterVisItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitVisItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitVisItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroItem;
    }

	macroInvocationSemi() {
	    return this.getTypedRuleContext(MacroInvocationSemiContext,0);
	};

	macroRulesDefinition() {
	    return this.getTypedRuleContext(MacroRulesDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_module;
    }

	KW_MOD() {
	    return this.getToken(RustParser.KW_MOD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	KW_UNSAFE() {
	    return this.getToken(RustParser.KW_UNSAFE, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ItemContext);
	    } else {
	        return this.getTypedRuleContext(ItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitModule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitModule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternCrateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_externCrate;
    }

	KW_EXTERN() {
	    return this.getToken(RustParser.KW_EXTERN, 0);
	};

	KW_CRATE() {
	    return this.getToken(RustParser.KW_CRATE, 0);
	};

	crateRef() {
	    return this.getTypedRuleContext(CrateRefContext,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	asClause() {
	    return this.getTypedRuleContext(AsClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterExternCrate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitExternCrate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitExternCrate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CrateRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_crateRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SELFVALUE() {
	    return this.getToken(RustParser.KW_SELFVALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterCrateRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitCrateRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitCrateRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_asClause;
    }

	KW_AS() {
	    return this.getToken(RustParser.KW_AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	UNDERSCORE() {
	    return this.getToken(RustParser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_useDeclaration;
    }

	KW_USE() {
	    return this.getToken(RustParser.KW_USE, 0);
	};

	useTree() {
	    return this.getTypedRuleContext(UseTreeContext,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterUseDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitUseDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitUseDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseTreeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_useTree;
    }

	STAR() {
	    return this.getToken(RustParser.STAR, 0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	PATHSEP() {
	    return this.getToken(RustParser.PATHSEP, 0);
	};

	useTree = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UseTreeContext);
	    } else {
	        return this.getTypedRuleContext(UseTreeContext,i);
	    }
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	KW_AS() {
	    return this.getToken(RustParser.KW_AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	UNDERSCORE() {
	    return this.getToken(RustParser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterUseTree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitUseTree(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitUseTree(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_function_;
    }

	functionQualifiers() {
	    return this.getTypedRuleContext(FunctionQualifiersContext,0);
	};

	KW_FN() {
	    return this.getToken(RustParser.KW_FN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	functionParameters() {
	    return this.getTypedRuleContext(FunctionParametersContext,0);
	};

	functionReturnType() {
	    return this.getTypedRuleContext(FunctionReturnTypeContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFunction_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFunction_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFunction_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_functionQualifiers;
    }

	KW_CONST() {
	    return this.getToken(RustParser.KW_CONST, 0);
	};

	KW_ASYNC() {
	    return this.getToken(RustParser.KW_ASYNC, 0);
	};

	KW_UNSAFE() {
	    return this.getToken(RustParser.KW_UNSAFE, 0);
	};

	KW_EXTERN() {
	    return this.getToken(RustParser.KW_EXTERN, 0);
	};

	abi() {
	    return this.getTypedRuleContext(AbiContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFunctionQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFunctionQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFunctionQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_abi;
    }

	STRING_LITERAL() {
	    return this.getToken(RustParser.STRING_LITERAL, 0);
	};

	RAW_STRING_LITERAL() {
	    return this.getToken(RustParser.RAW_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAbi(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAbi(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAbi(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_functionParameters;
    }

	selfParam() {
	    return this.getTypedRuleContext(SelfParamContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	functionParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParamContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParamContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelfParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_selfParam;
    }

	shorthandSelf() {
	    return this.getTypedRuleContext(ShorthandSelfContext,0);
	};

	typedSelf() {
	    return this.getTypedRuleContext(TypedSelfContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterSelfParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitSelfParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitSelfParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShorthandSelfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_shorthandSelf;
    }

	KW_SELFVALUE() {
	    return this.getToken(RustParser.KW_SELFVALUE, 0);
	};

	AND() {
	    return this.getToken(RustParser.AND, 0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	lifetime() {
	    return this.getTypedRuleContext(LifetimeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterShorthandSelf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitShorthandSelf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitShorthandSelf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypedSelfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typedSelf;
    }

	KW_SELFVALUE() {
	    return this.getToken(RustParser.KW_SELFVALUE, 0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypedSelf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypedSelf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypedSelf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_functionParam;
    }

	functionParamPattern() {
	    return this.getTypedRuleContext(FunctionParamPatternContext,0);
	};

	DOTDOTDOT() {
	    return this.getToken(RustParser.DOTDOTDOT, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFunctionParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFunctionParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFunctionParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionParamPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_functionParamPattern;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	DOTDOTDOT() {
	    return this.getToken(RustParser.DOTDOTDOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFunctionParamPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFunctionParamPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFunctionParamPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionReturnTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_functionReturnType;
    }

	RARROW() {
	    return this.getToken(RustParser.RARROW, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFunctionReturnType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFunctionReturnType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFunctionReturnType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typeAlias;
    }

	KW_TYPE() {
	    return this.getToken(RustParser.KW_TYPE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypeAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypeAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypeAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_struct_;
    }

	structStruct() {
	    return this.getTypedRuleContext(StructStructContext,0);
	};

	tupleStruct() {
	    return this.getTypedRuleContext(TupleStructContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStruct_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStruct_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStruct_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structStruct;
    }

	KW_STRUCT() {
	    return this.getToken(RustParser.KW_STRUCT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	structFields() {
	    return this.getTypedRuleContext(StructFieldsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructStruct(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructStruct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tupleStruct;
    }

	KW_STRUCT() {
	    return this.getToken(RustParser.KW_STRUCT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	tupleFields() {
	    return this.getTypedRuleContext(TupleFieldsContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleStruct(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleStruct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructFieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structFields;
    }

	structField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructFieldContext);
	    } else {
	        return this.getTypedRuleContext(StructFieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructFields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructFields(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructFields(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structField;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleFieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tupleFields;
    }

	tupleField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TupleFieldContext);
	    } else {
	        return this.getTypedRuleContext(TupleFieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleFields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleFields(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleFields(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tupleField;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumerationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumeration;
    }

	KW_ENUM() {
	    return this.getToken(RustParser.KW_ENUM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enumItems() {
	    return this.getTypedRuleContext(EnumItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumeration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumeration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumItems;
    }

	enumItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumItemContext);
	    } else {
	        return this.getTypedRuleContext(EnumItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumItem;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enumItemTuple() {
	    return this.getTypedRuleContext(EnumItemTupleContext,0);
	};

	enumItemStruct() {
	    return this.getTypedRuleContext(EnumItemStructContext,0);
	};

	enumItemDiscriminant() {
	    return this.getTypedRuleContext(EnumItemDiscriminantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumItemTupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumItemTuple;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	tupleFields() {
	    return this.getTypedRuleContext(TupleFieldsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumItemTuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumItemTuple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumItemTuple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumItemStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumItemStruct;
    }

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	structFields() {
	    return this.getTypedRuleContext(StructFieldsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumItemStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumItemStruct(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumItemStruct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumItemDiscriminantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumItemDiscriminant;
    }

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumItemDiscriminant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumItemDiscriminant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumItemDiscriminant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Union_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_union_;
    }

	KW_UNION() {
	    return this.getToken(RustParser.KW_UNION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	structFields() {
	    return this.getTypedRuleContext(StructFieldsContext,0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterUnion_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitUnion_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitUnion_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_constantItem;
    }

	KW_CONST() {
	    return this.getToken(RustParser.KW_CONST, 0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	UNDERSCORE() {
	    return this.getToken(RustParser.UNDERSCORE, 0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterConstantItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitConstantItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitConstantItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StaticItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_staticItem;
    }

	KW_STATIC() {
	    return this.getToken(RustParser.KW_STATIC, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStaticItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStaticItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStaticItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Trait_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_trait_;
    }

	KW_TRAIT() {
	    return this.getToken(RustParser.KW_TRAIT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	KW_UNSAFE() {
	    return this.getToken(RustParser.KW_UNSAFE, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	associatedItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssociatedItemContext);
	    } else {
	        return this.getTypedRuleContext(AssociatedItemContext,i);
	    }
	};

	typeParamBounds() {
	    return this.getTypedRuleContext(TypeParamBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTrait_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTrait_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTrait_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImplementationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_implementation;
    }

	inherentImpl() {
	    return this.getTypedRuleContext(InherentImplContext,0);
	};

	traitImpl() {
	    return this.getTypedRuleContext(TraitImplContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterImplementation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitImplementation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitImplementation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InherentImplContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_inherentImpl;
    }

	KW_IMPL() {
	    return this.getToken(RustParser.KW_IMPL, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	associatedItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssociatedItemContext);
	    } else {
	        return this.getTypedRuleContext(AssociatedItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterInherentImpl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitInherentImpl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitInherentImpl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TraitImplContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_traitImpl;
    }

	KW_IMPL() {
	    return this.getToken(RustParser.KW_IMPL, 0);
	};

	typePath() {
	    return this.getTypedRuleContext(TypePathContext,0);
	};

	KW_FOR() {
	    return this.getToken(RustParser.KW_FOR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	KW_UNSAFE() {
	    return this.getToken(RustParser.KW_UNSAFE, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	NOT() {
	    return this.getToken(RustParser.NOT, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	associatedItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssociatedItemContext);
	    } else {
	        return this.getTypedRuleContext(AssociatedItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTraitImpl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTraitImpl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTraitImpl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_externBlock;
    }

	KW_EXTERN() {
	    return this.getToken(RustParser.KW_EXTERN, 0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	KW_UNSAFE() {
	    return this.getToken(RustParser.KW_UNSAFE, 0);
	};

	abi() {
	    return this.getTypedRuleContext(AbiContext,0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	externalItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExternalItemContext);
	    } else {
	        return this.getTypedRuleContext(ExternalItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterExternBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitExternBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitExternBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternalItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_externalItem;
    }

	macroInvocationSemi() {
	    return this.getTypedRuleContext(MacroInvocationSemiContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	staticItem() {
	    return this.getTypedRuleContext(StaticItemContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterExternalItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitExternalItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitExternalItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericParams;
    }

	LT() {
	    return this.getToken(RustParser.LT, 0);
	};

	GT() {
	    return this.getToken(RustParser.GT, 0);
	};

	genericParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GenericParamContext);
	    } else {
	        return this.getTypedRuleContext(GenericParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericParams(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericParams(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericParam;
    }

	lifetimeParam() {
	    return this.getTypedRuleContext(LifetimeParamContext,0);
	};

	typeParam() {
	    return this.getTypedRuleContext(TypeParamContext,0);
	};

	constParam() {
	    return this.getTypedRuleContext(ConstParamContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LifetimeParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_lifetimeParam;
    }

	LIFETIME_OR_LABEL() {
	    return this.getToken(RustParser.LIFETIME_OR_LABEL, 0);
	};

	outerAttribute() {
	    return this.getTypedRuleContext(OuterAttributeContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	lifetimeBounds() {
	    return this.getTypedRuleContext(LifetimeBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLifetimeParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLifetimeParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLifetimeParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typeParam;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	outerAttribute() {
	    return this.getTypedRuleContext(OuterAttributeContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	typeParamBounds() {
	    return this.getTypedRuleContext(TypeParamBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypeParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypeParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypeParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_constParam;
    }

	KW_CONST() {
	    return this.getToken(RustParser.KW_CONST, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterConstParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitConstParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitConstParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_whereClause;
    }

	KW_WHERE() {
	    return this.getToken(RustParser.KW_WHERE, 0);
	};

	whereClauseItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhereClauseItemContext);
	    } else {
	        return this.getTypedRuleContext(WhereClauseItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_whereClauseItem;
    }

	lifetimeWhereClauseItem() {
	    return this.getTypedRuleContext(LifetimeWhereClauseItemContext,0);
	};

	typeBoundWhereClauseItem() {
	    return this.getTypedRuleContext(TypeBoundWhereClauseItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterWhereClauseItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitWhereClauseItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitWhereClauseItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LifetimeWhereClauseItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_lifetimeWhereClauseItem;
    }

	lifetime() {
	    return this.getTypedRuleContext(LifetimeContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	lifetimeBounds() {
	    return this.getTypedRuleContext(LifetimeBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLifetimeWhereClauseItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLifetimeWhereClauseItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLifetimeWhereClauseItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeBoundWhereClauseItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typeBoundWhereClauseItem;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	forLifetimes() {
	    return this.getTypedRuleContext(ForLifetimesContext,0);
	};

	typeParamBounds() {
	    return this.getTypedRuleContext(TypeParamBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypeBoundWhereClauseItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypeBoundWhereClauseItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypeBoundWhereClauseItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForLifetimesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_forLifetimes;
    }

	KW_FOR() {
	    return this.getToken(RustParser.KW_FOR, 0);
	};

	genericParams() {
	    return this.getTypedRuleContext(GenericParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterForLifetimes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitForLifetimes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitForLifetimes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssociatedItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_associatedItem;
    }

	macroInvocationSemi() {
	    return this.getTypedRuleContext(MacroInvocationSemiContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	typeAlias() {
	    return this.getTypedRuleContext(TypeAliasContext,0);
	};

	constantItem() {
	    return this.getTypedRuleContext(ConstantItemContext,0);
	};

	function_() {
	    return this.getTypedRuleContext(Function_Context,0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAssociatedItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAssociatedItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAssociatedItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InnerAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_innerAttribute;
    }

	POUND() {
	    return this.getToken(RustParser.POUND, 0);
	};

	NOT() {
	    return this.getToken(RustParser.NOT, 0);
	};

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	attr() {
	    return this.getTypedRuleContext(AttrContext,0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterInnerAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitInnerAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitInnerAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OuterAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_outerAttribute;
    }

	POUND() {
	    return this.getToken(RustParser.POUND, 0);
	};

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	attr() {
	    return this.getTypedRuleContext(AttrContext,0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterOuterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitOuterAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitOuterAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_attr;
    }

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	attrInput() {
	    return this.getTypedRuleContext(AttrInputContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAttr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAttr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAttr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttrInputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_attrInput;
    }

	delimTokenTree() {
	    return this.getTypedRuleContext(DelimTokenTreeContext,0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	literalExpression() {
	    return this.getTypedRuleContext(LiteralExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAttrInput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAttrInput(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAttrInput(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_statement;
    }

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	item() {
	    return this.getTypedRuleContext(ItemContext,0);
	};

	letStatement() {
	    return this.getTypedRuleContext(LetStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	macroInvocationSemi() {
	    return this.getTypedRuleContext(MacroInvocationSemiContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_letStatement;
    }

	KW_LET() {
	    return this.getToken(RustParser.KW_LET, 0);
	};

	patternNoTopAlt() {
	    return this.getTypedRuleContext(PatternNoTopAltContext,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLetStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLetStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_expressionStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	expressionWithBlock() {
	    return this.getTypedRuleContext(ExpressionWithBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TypeCastExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	KW_AS() {
	    return this.getToken(RustParser.KW_AS, 0);
	};

	typeNoBounds() {
	    return this.getTypedRuleContext(TypeNoBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypeCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypeCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypeCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.TypeCastExpressionContext = TypeCastExpressionContext;

class PathExpression_Context extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathExpression() {
	    return this.getTypedRuleContext(PathExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPathExpression_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPathExpression_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPathExpression_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.PathExpression_Context = PathExpression_Context;

class TupleExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	tupleElements() {
	    return this.getTypedRuleContext(TupleElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.TupleExpressionContext = TupleExpressionContext;

class IndexExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterIndexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitIndexExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitIndexExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.IndexExpressionContext = IndexExpressionContext;

class RangeExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOTDOT() {
	    return this.getToken(RustParser.DOTDOT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DOTDOTEQ() {
	    return this.getToken(RustParser.DOTDOTEQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterRangeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitRangeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitRangeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.RangeExpressionContext = RangeExpressionContext;

class MacroInvocationAsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	macroInvocation() {
	    return this.getTypedRuleContext(MacroInvocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroInvocationAsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroInvocationAsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroInvocationAsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.MacroInvocationAsExpressionContext = MacroInvocationAsExpressionContext;

class ReturnExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KW_RETURN() {
	    return this.getToken(RustParser.KW_RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterReturnExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitReturnExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitReturnExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ReturnExpressionContext = ReturnExpressionContext;

class AwaitExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DOT() {
	    return this.getToken(RustParser.DOT, 0);
	};

	KW_AWAIT() {
	    return this.getToken(RustParser.KW_AWAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAwaitExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAwaitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAwaitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.AwaitExpressionContext = AwaitExpressionContext;

class ErrorPropagationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	QUESTION() {
	    return this.getToken(RustParser.QUESTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterErrorPropagationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitErrorPropagationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitErrorPropagationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ErrorPropagationExpressionContext = ErrorPropagationExpressionContext;

class ContinueExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KW_CONTINUE() {
	    return this.getToken(RustParser.KW_CONTINUE, 0);
	};

	LIFETIME_OR_LABEL() {
	    return this.getToken(RustParser.LIFETIME_OR_LABEL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterContinueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitContinueExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitContinueExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ContinueExpressionContext = ContinueExpressionContext;

class AssignmentExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.AssignmentExpressionContext = AssignmentExpressionContext;

class MethodCallExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DOT() {
	    return this.getToken(RustParser.DOT, 0);
	};

	pathExprSegment() {
	    return this.getTypedRuleContext(PathExprSegmentContext,0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	callParams() {
	    return this.getTypedRuleContext(CallParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMethodCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMethodCallExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMethodCallExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.MethodCallExpressionContext = MethodCallExpressionContext;

class LiteralExpression_Context extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literalExpression() {
	    return this.getTypedRuleContext(LiteralExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLiteralExpression_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLiteralExpression_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLiteralExpression_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.LiteralExpression_Context = LiteralExpression_Context;

class StructExpression_Context extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	structExpression() {
	    return this.getTypedRuleContext(StructExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructExpression_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructExpression_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructExpression_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.StructExpression_Context = StructExpression_Context;

class TupleIndexingExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DOT() {
	    return this.getToken(RustParser.DOT, 0);
	};

	tupleIndex() {
	    return this.getTypedRuleContext(TupleIndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleIndexingExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleIndexingExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleIndexingExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.TupleIndexingExpressionContext = TupleIndexingExpressionContext;

class NegationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(RustParser.MINUS, 0);
	};

	NOT() {
	    return this.getToken(RustParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterNegationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitNegationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitNegationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.NegationExpressionContext = NegationExpressionContext;

class CallExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	callParams() {
	    return this.getTypedRuleContext(CallParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitCallExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitCallExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.CallExpressionContext = CallExpressionContext;

class LazyBooleanExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ANDAND() {
	    return this.getToken(RustParser.ANDAND, 0);
	};

	OROR() {
	    return this.getToken(RustParser.OROR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLazyBooleanExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLazyBooleanExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLazyBooleanExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.LazyBooleanExpressionContext = LazyBooleanExpressionContext;

class DereferenceExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR() {
	    return this.getToken(RustParser.STAR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterDereferenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitDereferenceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitDereferenceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.DereferenceExpressionContext = DereferenceExpressionContext;

class ExpressionWithBlock_Context extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionWithBlock() {
	    return this.getTypedRuleContext(ExpressionWithBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterExpressionWithBlock_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitExpressionWithBlock_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitExpressionWithBlock_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ExpressionWithBlock_Context = ExpressionWithBlock_Context;

class GroupedExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGroupedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGroupedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGroupedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.GroupedExpressionContext = GroupedExpressionContext;

class BreakExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KW_BREAK() {
	    return this.getToken(RustParser.KW_BREAK, 0);
	};

	LIFETIME_OR_LABEL() {
	    return this.getToken(RustParser.LIFETIME_OR_LABEL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterBreakExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitBreakExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitBreakExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.BreakExpressionContext = BreakExpressionContext;

class ArithmeticOrLogicalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	STAR() {
	    return this.getToken(RustParser.STAR, 0);
	};

	SLASH() {
	    return this.getToken(RustParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(RustParser.PERCENT, 0);
	};

	PLUS() {
	    return this.getToken(RustParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(RustParser.MINUS, 0);
	};

	shl() {
	    return this.getTypedRuleContext(ShlContext,0);
	};

	shr() {
	    return this.getTypedRuleContext(ShrContext,0);
	};

	AND() {
	    return this.getToken(RustParser.AND, 0);
	};

	CARET() {
	    return this.getToken(RustParser.CARET, 0);
	};

	OR() {
	    return this.getToken(RustParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterArithmeticOrLogicalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitArithmeticOrLogicalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitArithmeticOrLogicalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ArithmeticOrLogicalExpressionContext = ArithmeticOrLogicalExpressionContext;

class FieldExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DOT() {
	    return this.getToken(RustParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFieldExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFieldExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFieldExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.FieldExpressionContext = FieldExpressionContext;

class EnumerationVariantExpression_Context extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	enumerationVariantExpression() {
	    return this.getTypedRuleContext(EnumerationVariantExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumerationVariantExpression_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumerationVariantExpression_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumerationVariantExpression_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.EnumerationVariantExpression_Context = EnumerationVariantExpression_Context;

class ComparisonExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitComparisonExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitComparisonExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ComparisonExpressionContext = ComparisonExpressionContext;

class AttributedExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAttributedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAttributedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAttributedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.AttributedExpressionContext = AttributedExpressionContext;

class BorrowExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AND() {
	    return this.getToken(RustParser.AND, 0);
	};

	ANDAND() {
	    return this.getToken(RustParser.ANDAND, 0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterBorrowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitBorrowExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitBorrowExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.BorrowExpressionContext = BorrowExpressionContext;

class CompoundAssignmentExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	compoundAssignOperator() {
	    return this.getTypedRuleContext(CompoundAssignOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterCompoundAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitCompoundAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitCompoundAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.CompoundAssignmentExpressionContext = CompoundAssignmentExpressionContext;

class ClosureExpression_Context extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	closureExpression() {
	    return this.getTypedRuleContext(ClosureExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterClosureExpression_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitClosureExpression_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitClosureExpression_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ClosureExpression_Context = ClosureExpression_Context;

class ArrayExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	arrayElements() {
	    return this.getTypedRuleContext(ArrayElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterArrayExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitArrayExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitArrayExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ArrayExpressionContext = ArrayExpressionContext;

class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_comparisonOperator;
    }

	EQEQ() {
	    return this.getToken(RustParser.EQEQ, 0);
	};

	NE() {
	    return this.getToken(RustParser.NE, 0);
	};

	GT() {
	    return this.getToken(RustParser.GT, 0);
	};

	LT() {
	    return this.getToken(RustParser.LT, 0);
	};

	GE() {
	    return this.getToken(RustParser.GE, 0);
	};

	LE() {
	    return this.getToken(RustParser.LE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitComparisonOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitComparisonOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundAssignOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_compoundAssignOperator;
    }

	PLUSEQ() {
	    return this.getToken(RustParser.PLUSEQ, 0);
	};

	MINUSEQ() {
	    return this.getToken(RustParser.MINUSEQ, 0);
	};

	STAREQ() {
	    return this.getToken(RustParser.STAREQ, 0);
	};

	SLASHEQ() {
	    return this.getToken(RustParser.SLASHEQ, 0);
	};

	PERCENTEQ() {
	    return this.getToken(RustParser.PERCENTEQ, 0);
	};

	ANDEQ() {
	    return this.getToken(RustParser.ANDEQ, 0);
	};

	OREQ() {
	    return this.getToken(RustParser.OREQ, 0);
	};

	CARETEQ() {
	    return this.getToken(RustParser.CARETEQ, 0);
	};

	SHLEQ() {
	    return this.getToken(RustParser.SHLEQ, 0);
	};

	SHREQ() {
	    return this.getToken(RustParser.SHREQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterCompoundAssignOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitCompoundAssignOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitCompoundAssignOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionWithBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_expressionWithBlock;
    }

	expressionWithBlock() {
	    return this.getTypedRuleContext(ExpressionWithBlockContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	asyncBlockExpression() {
	    return this.getTypedRuleContext(AsyncBlockExpressionContext,0);
	};

	unsafeBlockExpression() {
	    return this.getTypedRuleContext(UnsafeBlockExpressionContext,0);
	};

	loopExpression() {
	    return this.getTypedRuleContext(LoopExpressionContext,0);
	};

	ifExpression() {
	    return this.getTypedRuleContext(IfExpressionContext,0);
	};

	ifLetExpression() {
	    return this.getTypedRuleContext(IfLetExpressionContext,0);
	};

	matchExpression() {
	    return this.getTypedRuleContext(MatchExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterExpressionWithBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitExpressionWithBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitExpressionWithBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_literalExpression;
    }

	CHAR_LITERAL() {
	    return this.getToken(RustParser.CHAR_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(RustParser.STRING_LITERAL, 0);
	};

	RAW_STRING_LITERAL() {
	    return this.getToken(RustParser.RAW_STRING_LITERAL, 0);
	};

	BYTE_LITERAL() {
	    return this.getToken(RustParser.BYTE_LITERAL, 0);
	};

	BYTE_STRING_LITERAL() {
	    return this.getToken(RustParser.BYTE_STRING_LITERAL, 0);
	};

	RAW_BYTE_STRING_LITERAL() {
	    return this.getToken(RustParser.RAW_BYTE_STRING_LITERAL, 0);
	};

	INTEGER_LITERAL() {
	    return this.getToken(RustParser.INTEGER_LITERAL, 0);
	};

	FLOAT_LITERAL() {
	    return this.getToken(RustParser.FLOAT_LITERAL, 0);
	};

	KW_TRUE() {
	    return this.getToken(RustParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(RustParser.KW_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_pathExpression;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	qualifiedPathInExpression() {
	    return this.getTypedRuleContext(QualifiedPathInExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPathExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPathExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPathExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_blockExpression;
    }

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterBlockExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitBlockExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitBlockExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_statements;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AsyncBlockExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_asyncBlockExpression;
    }

	KW_ASYNC() {
	    return this.getToken(RustParser.KW_ASYNC, 0);
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	KW_MOVE() {
	    return this.getToken(RustParser.KW_MOVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterAsyncBlockExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitAsyncBlockExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitAsyncBlockExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnsafeBlockExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_unsafeBlockExpression;
    }

	KW_UNSAFE() {
	    return this.getToken(RustParser.KW_UNSAFE, 0);
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterUnsafeBlockExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitUnsafeBlockExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitUnsafeBlockExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_arrayElements;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterArrayElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitArrayElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitArrayElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tupleElements;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tupleIndex;
    }

	INTEGER_LITERAL() {
	    return this.getToken(RustParser.INTEGER_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structExpression;
    }

	structExprStruct() {
	    return this.getTypedRuleContext(StructExprStructContext,0);
	};

	structExprTuple() {
	    return this.getTypedRuleContext(StructExprTupleContext,0);
	};

	structExprUnit() {
	    return this.getTypedRuleContext(StructExprUnitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructExprStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structExprStruct;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	structExprFields() {
	    return this.getTypedRuleContext(StructExprFieldsContext,0);
	};

	structBase() {
	    return this.getTypedRuleContext(StructBaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructExprStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructExprStruct(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructExprStruct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructExprFieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structExprFields;
    }

	structExprField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructExprFieldContext);
	    } else {
	        return this.getTypedRuleContext(StructExprFieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	structBase() {
	    return this.getTypedRuleContext(StructBaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructExprFields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructExprFields(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructExprFields(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructExprFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structExprField;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	tupleIndex() {
	    return this.getTypedRuleContext(TupleIndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructExprField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructExprField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructExprField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structBase;
    }

	DOTDOT() {
	    return this.getToken(RustParser.DOTDOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructExprTupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structExprTuple;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructExprTuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructExprTuple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructExprTuple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructExprUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structExprUnit;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructExprUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructExprUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructExprUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumerationVariantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumerationVariantExpression;
    }

	enumExprStruct() {
	    return this.getTypedRuleContext(EnumExprStructContext,0);
	};

	enumExprTuple() {
	    return this.getTypedRuleContext(EnumExprTupleContext,0);
	};

	enumExprFieldless() {
	    return this.getTypedRuleContext(EnumExprFieldlessContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumerationVariantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumerationVariantExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumerationVariantExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumExprStructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumExprStruct;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	enumExprFields() {
	    return this.getTypedRuleContext(EnumExprFieldsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumExprStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumExprStruct(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumExprStruct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumExprFieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumExprFields;
    }

	enumExprField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumExprFieldContext);
	    } else {
	        return this.getTypedRuleContext(EnumExprFieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumExprFields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumExprFields(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumExprFields(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumExprFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumExprField;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	tupleIndex() {
	    return this.getTypedRuleContext(TupleIndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumExprField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumExprField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumExprField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumExprTupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumExprTuple;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumExprTuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumExprTuple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumExprTuple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumExprFieldlessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_enumExprFieldless;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterEnumExprFieldless(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitEnumExprFieldless(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitEnumExprFieldless(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_callParams;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterCallParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitCallParams(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitCallParams(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClosureExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_closureExpression;
    }

	OROR() {
	    return this.getToken(RustParser.OROR, 0);
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.OR);
	    } else {
	        return this.getToken(RustParser.OR, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RARROW() {
	    return this.getToken(RustParser.RARROW, 0);
	};

	typeNoBounds() {
	    return this.getTypedRuleContext(TypeNoBoundsContext,0);
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	KW_MOVE() {
	    return this.getToken(RustParser.KW_MOVE, 0);
	};

	closureParameters() {
	    return this.getTypedRuleContext(ClosureParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterClosureExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitClosureExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitClosureExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClosureParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_closureParameters;
    }

	closureParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClosureParamContext);
	    } else {
	        return this.getTypedRuleContext(ClosureParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterClosureParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitClosureParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitClosureParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClosureParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_closureParam;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterClosureParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitClosureParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitClosureParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoopExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_loopExpression;
    }

	infiniteLoopExpression() {
	    return this.getTypedRuleContext(InfiniteLoopExpressionContext,0);
	};

	predicateLoopExpression() {
	    return this.getTypedRuleContext(PredicateLoopExpressionContext,0);
	};

	predicatePatternLoopExpression() {
	    return this.getTypedRuleContext(PredicatePatternLoopExpressionContext,0);
	};

	iteratorLoopExpression() {
	    return this.getTypedRuleContext(IteratorLoopExpressionContext,0);
	};

	loopLabel() {
	    return this.getTypedRuleContext(LoopLabelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLoopExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLoopExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLoopExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InfiniteLoopExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_infiniteLoopExpression;
    }

	KW_LOOP() {
	    return this.getToken(RustParser.KW_LOOP, 0);
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterInfiniteLoopExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitInfiniteLoopExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitInfiniteLoopExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateLoopExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_predicateLoopExpression;
    }

	KW_WHILE() {
	    return this.getToken(RustParser.KW_WHILE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPredicateLoopExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPredicateLoopExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPredicateLoopExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicatePatternLoopExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_predicatePatternLoopExpression;
    }

	KW_WHILE() {
	    return this.getToken(RustParser.KW_WHILE, 0);
	};

	KW_LET() {
	    return this.getToken(RustParser.KW_LET, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPredicatePatternLoopExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPredicatePatternLoopExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPredicatePatternLoopExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IteratorLoopExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_iteratorLoopExpression;
    }

	KW_FOR() {
	    return this.getToken(RustParser.KW_FOR, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	KW_IN() {
	    return this.getToken(RustParser.KW_IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterIteratorLoopExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitIteratorLoopExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitIteratorLoopExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoopLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_loopLabel;
    }

	LIFETIME_OR_LABEL() {
	    return this.getToken(RustParser.LIFETIME_OR_LABEL, 0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLoopLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLoopLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLoopLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_ifExpression;
    }

	KW_IF() {
	    return this.getToken(RustParser.KW_IF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	blockExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BlockExpressionContext,i);
	    }
	};

	KW_ELSE() {
	    return this.getToken(RustParser.KW_ELSE, 0);
	};

	ifExpression() {
	    return this.getTypedRuleContext(IfExpressionContext,0);
	};

	ifLetExpression() {
	    return this.getTypedRuleContext(IfLetExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterIfExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitIfExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitIfExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfLetExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_ifLetExpression;
    }

	KW_IF() {
	    return this.getToken(RustParser.KW_IF, 0);
	};

	KW_LET() {
	    return this.getToken(RustParser.KW_LET, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	blockExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BlockExpressionContext,i);
	    }
	};

	KW_ELSE() {
	    return this.getToken(RustParser.KW_ELSE, 0);
	};

	ifExpression() {
	    return this.getTypedRuleContext(IfExpressionContext,0);
	};

	ifLetExpression() {
	    return this.getTypedRuleContext(IfLetExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterIfLetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitIfLetExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitIfLetExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_matchExpression;
    }

	KW_MATCH() {
	    return this.getToken(RustParser.KW_MATCH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	innerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InnerAttributeContext);
	    } else {
	        return this.getTypedRuleContext(InnerAttributeContext,i);
	    }
	};

	matchArms() {
	    return this.getTypedRuleContext(MatchArmsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMatchExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMatchExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMatchExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchArmsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_matchArms;
    }

	matchArm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchArmContext);
	    } else {
	        return this.getTypedRuleContext(MatchArmContext,i);
	    }
	};

	FATARROW = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.FATARROW);
	    } else {
	        return this.getToken(RustParser.FATARROW, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	matchArmExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchArmExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MatchArmExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(RustParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMatchArms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMatchArms(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMatchArms(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchArmExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_matchArmExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COMMA() {
	    return this.getToken(RustParser.COMMA, 0);
	};

	expressionWithBlock() {
	    return this.getTypedRuleContext(ExpressionWithBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMatchArmExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMatchArmExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMatchArmExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchArmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_matchArm;
    }

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	matchArmGuard() {
	    return this.getTypedRuleContext(MatchArmGuardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMatchArm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMatchArm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMatchArm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchArmGuardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_matchArmGuard;
    }

	KW_IF() {
	    return this.getToken(RustParser.KW_IF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMatchArmGuard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMatchArmGuard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMatchArmGuard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_pattern;
    }

	patternNoTopAlt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternNoTopAltContext);
	    } else {
	        return this.getTypedRuleContext(PatternNoTopAltContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.OR);
	    } else {
	        return this.getToken(RustParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternNoTopAltContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_patternNoTopAlt;
    }

	patternWithoutRange() {
	    return this.getTypedRuleContext(PatternWithoutRangeContext,0);
	};

	rangePattern() {
	    return this.getTypedRuleContext(RangePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPatternNoTopAlt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPatternNoTopAlt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPatternNoTopAlt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternWithoutRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_patternWithoutRange;
    }

	literalPattern() {
	    return this.getTypedRuleContext(LiteralPatternContext,0);
	};

	identifierPattern() {
	    return this.getTypedRuleContext(IdentifierPatternContext,0);
	};

	wildcardPattern() {
	    return this.getTypedRuleContext(WildcardPatternContext,0);
	};

	restPattern() {
	    return this.getTypedRuleContext(RestPatternContext,0);
	};

	referencePattern() {
	    return this.getTypedRuleContext(ReferencePatternContext,0);
	};

	structPattern() {
	    return this.getTypedRuleContext(StructPatternContext,0);
	};

	tupleStructPattern() {
	    return this.getTypedRuleContext(TupleStructPatternContext,0);
	};

	tuplePattern() {
	    return this.getTypedRuleContext(TuplePatternContext,0);
	};

	groupedPattern() {
	    return this.getTypedRuleContext(GroupedPatternContext,0);
	};

	slicePattern() {
	    return this.getTypedRuleContext(SlicePatternContext,0);
	};

	pathPattern() {
	    return this.getTypedRuleContext(PathPatternContext,0);
	};

	macroInvocation() {
	    return this.getTypedRuleContext(MacroInvocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPatternWithoutRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPatternWithoutRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPatternWithoutRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_literalPattern;
    }

	KW_TRUE() {
	    return this.getToken(RustParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(RustParser.KW_FALSE, 0);
	};

	CHAR_LITERAL() {
	    return this.getToken(RustParser.CHAR_LITERAL, 0);
	};

	BYTE_LITERAL() {
	    return this.getToken(RustParser.BYTE_LITERAL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(RustParser.STRING_LITERAL, 0);
	};

	RAW_STRING_LITERAL() {
	    return this.getToken(RustParser.RAW_STRING_LITERAL, 0);
	};

	BYTE_STRING_LITERAL() {
	    return this.getToken(RustParser.BYTE_STRING_LITERAL, 0);
	};

	RAW_BYTE_STRING_LITERAL() {
	    return this.getToken(RustParser.RAW_BYTE_STRING_LITERAL, 0);
	};

	INTEGER_LITERAL() {
	    return this.getToken(RustParser.INTEGER_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(RustParser.MINUS, 0);
	};

	FLOAT_LITERAL() {
	    return this.getToken(RustParser.FLOAT_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLiteralPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLiteralPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLiteralPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_identifierPattern;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_REF() {
	    return this.getToken(RustParser.KW_REF, 0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	AT() {
	    return this.getToken(RustParser.AT, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterIdentifierPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitIdentifierPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitIdentifierPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildcardPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_wildcardPattern;
    }

	UNDERSCORE() {
	    return this.getToken(RustParser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterWildcardPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitWildcardPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitWildcardPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_restPattern;
    }

	DOTDOT() {
	    return this.getToken(RustParser.DOTDOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterRestPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitRestPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitRestPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_rangePattern;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class InclusiveRangePatternContext extends RangePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	rangePatternBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangePatternBoundContext);
	    } else {
	        return this.getTypedRuleContext(RangePatternBoundContext,i);
	    }
	};

	DOTDOTEQ() {
	    return this.getToken(RustParser.DOTDOTEQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterInclusiveRangePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitInclusiveRangePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitInclusiveRangePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.InclusiveRangePatternContext = InclusiveRangePatternContext;

class ObsoleteRangePatternContext extends RangePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	rangePatternBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangePatternBoundContext);
	    } else {
	        return this.getTypedRuleContext(RangePatternBoundContext,i);
	    }
	};

	DOTDOTDOT() {
	    return this.getToken(RustParser.DOTDOTDOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterObsoleteRangePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitObsoleteRangePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitObsoleteRangePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.ObsoleteRangePatternContext = ObsoleteRangePatternContext;

class HalfOpenRangePatternContext extends RangePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	rangePatternBound() {
	    return this.getTypedRuleContext(RangePatternBoundContext,0);
	};

	DOTDOT() {
	    return this.getToken(RustParser.DOTDOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterHalfOpenRangePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitHalfOpenRangePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitHalfOpenRangePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

RustParser.HalfOpenRangePatternContext = HalfOpenRangePatternContext;

class RangePatternBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_rangePatternBound;
    }

	CHAR_LITERAL() {
	    return this.getToken(RustParser.CHAR_LITERAL, 0);
	};

	BYTE_LITERAL() {
	    return this.getToken(RustParser.BYTE_LITERAL, 0);
	};

	INTEGER_LITERAL() {
	    return this.getToken(RustParser.INTEGER_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(RustParser.MINUS, 0);
	};

	FLOAT_LITERAL() {
	    return this.getToken(RustParser.FLOAT_LITERAL, 0);
	};

	pathPattern() {
	    return this.getTypedRuleContext(PathPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterRangePatternBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitRangePatternBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitRangePatternBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferencePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_referencePattern;
    }

	patternWithoutRange() {
	    return this.getTypedRuleContext(PatternWithoutRangeContext,0);
	};

	AND() {
	    return this.getToken(RustParser.AND, 0);
	};

	ANDAND() {
	    return this.getToken(RustParser.ANDAND, 0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterReferencePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitReferencePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitReferencePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structPattern;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	LCURLYBRACE() {
	    return this.getToken(RustParser.LCURLYBRACE, 0);
	};

	RCURLYBRACE() {
	    return this.getToken(RustParser.RCURLYBRACE, 0);
	};

	structPatternElements() {
	    return this.getTypedRuleContext(StructPatternElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructPatternElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structPatternElements;
    }

	structPatternFields() {
	    return this.getTypedRuleContext(StructPatternFieldsContext,0);
	};

	COMMA() {
	    return this.getToken(RustParser.COMMA, 0);
	};

	structPatternEtCetera() {
	    return this.getTypedRuleContext(StructPatternEtCeteraContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructPatternElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructPatternElements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructPatternElements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructPatternFieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structPatternFields;
    }

	structPatternField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StructPatternFieldContext);
	    } else {
	        return this.getTypedRuleContext(StructPatternFieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructPatternFields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructPatternFields(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructPatternFields(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructPatternFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structPatternField;
    }

	tupleIndex() {
	    return this.getTypedRuleContext(TupleIndexContext,0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	KW_REF() {
	    return this.getToken(RustParser.KW_REF, 0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructPatternField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructPatternField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructPatternField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructPatternEtCeteraContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_structPatternEtCetera;
    }

	DOTDOT() {
	    return this.getToken(RustParser.DOTDOT, 0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterStructPatternEtCetera(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitStructPatternEtCetera(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitStructPatternEtCetera(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleStructPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tupleStructPattern;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	tupleStructItems() {
	    return this.getTypedRuleContext(TupleStructItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleStructPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleStructPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleStructPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleStructItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tupleStructItems;
    }

	pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternContext);
	    } else {
	        return this.getTypedRuleContext(PatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleStructItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleStructItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleStructItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TuplePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tuplePattern;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	tuplePatternItems() {
	    return this.getTypedRuleContext(TuplePatternItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTuplePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTuplePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTuplePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TuplePatternItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tuplePatternItems;
    }

	pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternContext);
	    } else {
	        return this.getTypedRuleContext(PatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	restPattern() {
	    return this.getTypedRuleContext(RestPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTuplePatternItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTuplePatternItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTuplePatternItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupedPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_groupedPattern;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGroupedPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGroupedPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGroupedPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SlicePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_slicePattern;
    }

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	slicePatternItems() {
	    return this.getTypedRuleContext(SlicePatternItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterSlicePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitSlicePattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitSlicePattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SlicePatternItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_slicePatternItems;
    }

	pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternContext);
	    } else {
	        return this.getTypedRuleContext(PatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterSlicePatternItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitSlicePatternItems(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitSlicePatternItems(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_pathPattern;
    }

	pathInExpression() {
	    return this.getTypedRuleContext(PathInExpressionContext,0);
	};

	qualifiedPathInExpression() {
	    return this.getTypedRuleContext(QualifiedPathInExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPathPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPathPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_type_;
    }

	typeNoBounds() {
	    return this.getTypedRuleContext(TypeNoBoundsContext,0);
	};

	implTraitType() {
	    return this.getTypedRuleContext(ImplTraitTypeContext,0);
	};

	traitObjectType() {
	    return this.getTypedRuleContext(TraitObjectTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitType_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitType_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNoBoundsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typeNoBounds;
    }

	parenthesizedType() {
	    return this.getTypedRuleContext(ParenthesizedTypeContext,0);
	};

	implTraitTypeOneBound() {
	    return this.getTypedRuleContext(ImplTraitTypeOneBoundContext,0);
	};

	traitObjectTypeOneBound() {
	    return this.getTypedRuleContext(TraitObjectTypeOneBoundContext,0);
	};

	typePath() {
	    return this.getTypedRuleContext(TypePathContext,0);
	};

	tupleType() {
	    return this.getTypedRuleContext(TupleTypeContext,0);
	};

	neverType() {
	    return this.getTypedRuleContext(NeverTypeContext,0);
	};

	rawPointerType() {
	    return this.getTypedRuleContext(RawPointerTypeContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	sliceType() {
	    return this.getTypedRuleContext(SliceTypeContext,0);
	};

	inferredType() {
	    return this.getTypedRuleContext(InferredTypeContext,0);
	};

	qualifiedPathInType() {
	    return this.getTypedRuleContext(QualifiedPathInTypeContext,0);
	};

	bareFunctionType() {
	    return this.getTypedRuleContext(BareFunctionTypeContext,0);
	};

	macroInvocation() {
	    return this.getTypedRuleContext(MacroInvocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypeNoBounds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypeNoBounds(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypeNoBounds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenthesizedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_parenthesizedType;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterParenthesizedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitParenthesizedType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitParenthesizedType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NeverTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_neverType;
    }

	NOT() {
	    return this.getToken(RustParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterNeverType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitNeverType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitNeverType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_tupleType;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTupleType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTupleType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTupleType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_arrayType;
    }

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitArrayType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitArrayType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SliceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_sliceType;
    }

	LSQUAREBRACKET() {
	    return this.getToken(RustParser.LSQUAREBRACKET, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	RSQUAREBRACKET() {
	    return this.getToken(RustParser.RSQUAREBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterSliceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitSliceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitSliceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_referenceType;
    }

	AND() {
	    return this.getToken(RustParser.AND, 0);
	};

	typeNoBounds() {
	    return this.getTypedRuleContext(TypeNoBoundsContext,0);
	};

	lifetime() {
	    return this.getTypedRuleContext(LifetimeContext,0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitReferenceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitReferenceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RawPointerTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_rawPointerType;
    }

	STAR() {
	    return this.getToken(RustParser.STAR, 0);
	};

	typeNoBounds() {
	    return this.getTypedRuleContext(TypeNoBoundsContext,0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	KW_CONST() {
	    return this.getToken(RustParser.KW_CONST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterRawPointerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitRawPointerType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitRawPointerType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BareFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_bareFunctionType;
    }

	functionTypeQualifiers() {
	    return this.getTypedRuleContext(FunctionTypeQualifiersContext,0);
	};

	KW_FN() {
	    return this.getToken(RustParser.KW_FN, 0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	forLifetimes() {
	    return this.getTypedRuleContext(ForLifetimesContext,0);
	};

	functionParametersMaybeNamedVariadic() {
	    return this.getTypedRuleContext(FunctionParametersMaybeNamedVariadicContext,0);
	};

	bareFunctionReturnType() {
	    return this.getTypedRuleContext(BareFunctionReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterBareFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitBareFunctionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitBareFunctionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionTypeQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_functionTypeQualifiers;
    }

	KW_UNSAFE() {
	    return this.getToken(RustParser.KW_UNSAFE, 0);
	};

	KW_EXTERN() {
	    return this.getToken(RustParser.KW_EXTERN, 0);
	};

	abi() {
	    return this.getTypedRuleContext(AbiContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFunctionTypeQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFunctionTypeQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFunctionTypeQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BareFunctionReturnTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_bareFunctionReturnType;
    }

	RARROW() {
	    return this.getToken(RustParser.RARROW, 0);
	};

	typeNoBounds() {
	    return this.getTypedRuleContext(TypeNoBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterBareFunctionReturnType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitBareFunctionReturnType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitBareFunctionReturnType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionParametersMaybeNamedVariadicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_functionParametersMaybeNamedVariadic;
    }

	maybeNamedFunctionParameters() {
	    return this.getTypedRuleContext(MaybeNamedFunctionParametersContext,0);
	};

	maybeNamedFunctionParametersVariadic() {
	    return this.getTypedRuleContext(MaybeNamedFunctionParametersVariadicContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterFunctionParametersMaybeNamedVariadic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitFunctionParametersMaybeNamedVariadic(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitFunctionParametersMaybeNamedVariadic(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MaybeNamedFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_maybeNamedFunctionParameters;
    }

	maybeNamedParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MaybeNamedParamContext);
	    } else {
	        return this.getTypedRuleContext(MaybeNamedParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMaybeNamedFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMaybeNamedFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMaybeNamedFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MaybeNamedParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_maybeNamedParam;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	UNDERSCORE() {
	    return this.getToken(RustParser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMaybeNamedParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMaybeNamedParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMaybeNamedParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MaybeNamedFunctionParametersVariadicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_maybeNamedFunctionParametersVariadic;
    }

	maybeNamedParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MaybeNamedParamContext);
	    } else {
	        return this.getTypedRuleContext(MaybeNamedParamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	DOTDOTDOT() {
	    return this.getToken(RustParser.DOTDOTDOT, 0);
	};

	outerAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OuterAttributeContext);
	    } else {
	        return this.getTypedRuleContext(OuterAttributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMaybeNamedFunctionParametersVariadic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMaybeNamedFunctionParametersVariadic(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMaybeNamedFunctionParametersVariadic(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TraitObjectTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_traitObjectType;
    }

	typeParamBounds() {
	    return this.getTypedRuleContext(TypeParamBoundsContext,0);
	};

	KW_DYN() {
	    return this.getToken(RustParser.KW_DYN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTraitObjectType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTraitObjectType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTraitObjectType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TraitObjectTypeOneBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_traitObjectTypeOneBound;
    }

	traitBound() {
	    return this.getTypedRuleContext(TraitBoundContext,0);
	};

	KW_DYN() {
	    return this.getToken(RustParser.KW_DYN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTraitObjectTypeOneBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTraitObjectTypeOneBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTraitObjectTypeOneBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImplTraitTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_implTraitType;
    }

	KW_IMPL() {
	    return this.getToken(RustParser.KW_IMPL, 0);
	};

	typeParamBounds() {
	    return this.getTypedRuleContext(TypeParamBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterImplTraitType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitImplTraitType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitImplTraitType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImplTraitTypeOneBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_implTraitTypeOneBound;
    }

	KW_IMPL() {
	    return this.getToken(RustParser.KW_IMPL, 0);
	};

	traitBound() {
	    return this.getTypedRuleContext(TraitBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterImplTraitTypeOneBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitImplTraitTypeOneBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitImplTraitTypeOneBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InferredTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_inferredType;
    }

	UNDERSCORE() {
	    return this.getToken(RustParser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterInferredType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitInferredType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitInferredType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParamBoundsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typeParamBounds;
    }

	typeParamBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParamBoundContext);
	    } else {
	        return this.getTypedRuleContext(TypeParamBoundContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.PLUS);
	    } else {
	        return this.getToken(RustParser.PLUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypeParamBounds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypeParamBounds(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypeParamBounds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParamBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typeParamBound;
    }

	lifetime() {
	    return this.getTypedRuleContext(LifetimeContext,0);
	};

	traitBound() {
	    return this.getTypedRuleContext(TraitBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypeParamBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypeParamBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypeParamBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TraitBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_traitBound;
    }

	typePath() {
	    return this.getTypedRuleContext(TypePathContext,0);
	};

	QUESTION() {
	    return this.getToken(RustParser.QUESTION, 0);
	};

	forLifetimes() {
	    return this.getTypedRuleContext(ForLifetimesContext,0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTraitBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTraitBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTraitBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LifetimeBoundsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_lifetimeBounds;
    }

	lifetime = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LifetimeContext);
	    } else {
	        return this.getTypedRuleContext(LifetimeContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.PLUS);
	    } else {
	        return this.getToken(RustParser.PLUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLifetimeBounds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLifetimeBounds(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLifetimeBounds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LifetimeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_lifetime;
    }

	LIFETIME_OR_LABEL() {
	    return this.getToken(RustParser.LIFETIME_OR_LABEL, 0);
	};

	KW_STATICLIFETIME() {
	    return this.getToken(RustParser.KW_STATICLIFETIME, 0);
	};

	KW_UNDERLINELIFETIME() {
	    return this.getToken(RustParser.KW_UNDERLINELIFETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterLifetime(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitLifetime(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitLifetime(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_simplePath;
    }

	simplePathSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplePathSegmentContext);
	    } else {
	        return this.getTypedRuleContext(SimplePathSegmentContext,i);
	    }
	};

	PATHSEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.PATHSEP);
	    } else {
	        return this.getToken(RustParser.PATHSEP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterSimplePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitSimplePath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitSimplePath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimplePathSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_simplePathSegment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SUPER() {
	    return this.getToken(RustParser.KW_SUPER, 0);
	};

	KW_SELFVALUE() {
	    return this.getToken(RustParser.KW_SELFVALUE, 0);
	};

	KW_CRATE() {
	    return this.getToken(RustParser.KW_CRATE, 0);
	};

	KW_DOLLARCRATE() {
	    return this.getToken(RustParser.KW_DOLLARCRATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterSimplePathSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitSimplePathSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitSimplePathSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathInExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_pathInExpression;
    }

	pathExprSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExprSegmentContext);
	    } else {
	        return this.getTypedRuleContext(PathExprSegmentContext,i);
	    }
	};

	PATHSEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.PATHSEP);
	    } else {
	        return this.getToken(RustParser.PATHSEP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPathInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPathInExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPathInExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathExprSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_pathExprSegment;
    }

	pathIdentSegment() {
	    return this.getTypedRuleContext(PathIdentSegmentContext,0);
	};

	PATHSEP() {
	    return this.getToken(RustParser.PATHSEP, 0);
	};

	genericArgs() {
	    return this.getTypedRuleContext(GenericArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPathExprSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPathExprSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPathExprSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathIdentSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_pathIdentSegment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_SUPER() {
	    return this.getToken(RustParser.KW_SUPER, 0);
	};

	KW_SELFVALUE() {
	    return this.getToken(RustParser.KW_SELFVALUE, 0);
	};

	KW_SELFTYPE() {
	    return this.getToken(RustParser.KW_SELFTYPE, 0);
	};

	KW_CRATE() {
	    return this.getToken(RustParser.KW_CRATE, 0);
	};

	KW_DOLLARCRATE() {
	    return this.getToken(RustParser.KW_DOLLARCRATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterPathIdentSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitPathIdentSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitPathIdentSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericArgs;
    }

	LT() {
	    return this.getToken(RustParser.LT, 0);
	};

	GT() {
	    return this.getToken(RustParser.GT, 0);
	};

	genericArgsLifetimes() {
	    return this.getTypedRuleContext(GenericArgsLifetimesContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	genericArgsTypes() {
	    return this.getTypedRuleContext(GenericArgsTypesContext,0);
	};

	genericArgsBindings() {
	    return this.getTypedRuleContext(GenericArgsBindingsContext,0);
	};

	genericArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GenericArgContext);
	    } else {
	        return this.getTypedRuleContext(GenericArgContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericArg;
    }

	lifetime() {
	    return this.getTypedRuleContext(LifetimeContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	genericArgsConst() {
	    return this.getTypedRuleContext(GenericArgsConstContext,0);
	};

	genericArgsBinding() {
	    return this.getTypedRuleContext(GenericArgsBindingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericArgsConstContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericArgsConst;
    }

	blockExpression() {
	    return this.getTypedRuleContext(BlockExpressionContext,0);
	};

	literalExpression() {
	    return this.getTypedRuleContext(LiteralExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(RustParser.MINUS, 0);
	};

	simplePathSegment() {
	    return this.getTypedRuleContext(SimplePathSegmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericArgsConst(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericArgsConst(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericArgsConst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericArgsLifetimesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericArgsLifetimes;
    }

	lifetime = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LifetimeContext);
	    } else {
	        return this.getTypedRuleContext(LifetimeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericArgsLifetimes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericArgsLifetimes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericArgsLifetimes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericArgsTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericArgsTypes;
    }

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericArgsTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericArgsTypes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericArgsTypes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericArgsBindingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericArgsBindings;
    }

	genericArgsBinding = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GenericArgsBindingContext);
	    } else {
	        return this.getTypedRuleContext(GenericArgsBindingContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericArgsBindings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericArgsBindings(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericArgsBindings(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenericArgsBindingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_genericArgsBinding;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterGenericArgsBinding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitGenericArgsBinding(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitGenericArgsBinding(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedPathInExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_qualifiedPathInExpression;
    }

	qualifiedPathType() {
	    return this.getTypedRuleContext(QualifiedPathTypeContext,0);
	};

	PATHSEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.PATHSEP);
	    } else {
	        return this.getToken(RustParser.PATHSEP, i);
	    }
	};


	pathExprSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathExprSegmentContext);
	    } else {
	        return this.getTypedRuleContext(PathExprSegmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterQualifiedPathInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitQualifiedPathInExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitQualifiedPathInExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedPathTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_qualifiedPathType;
    }

	LT() {
	    return this.getToken(RustParser.LT, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	GT() {
	    return this.getToken(RustParser.GT, 0);
	};

	KW_AS() {
	    return this.getToken(RustParser.KW_AS, 0);
	};

	typePath() {
	    return this.getTypedRuleContext(TypePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterQualifiedPathType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitQualifiedPathType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitQualifiedPathType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedPathInTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_qualifiedPathInType;
    }

	qualifiedPathType() {
	    return this.getTypedRuleContext(QualifiedPathTypeContext,0);
	};

	PATHSEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.PATHSEP);
	    } else {
	        return this.getToken(RustParser.PATHSEP, i);
	    }
	};


	typePathSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypePathSegmentContext);
	    } else {
	        return this.getTypedRuleContext(TypePathSegmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterQualifiedPathInType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitQualifiedPathInType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitQualifiedPathInType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typePath;
    }

	typePathSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypePathSegmentContext);
	    } else {
	        return this.getTypedRuleContext(TypePathSegmentContext,i);
	    }
	};

	PATHSEP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.PATHSEP);
	    } else {
	        return this.getToken(RustParser.PATHSEP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypePath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypePath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypePathSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typePathSegment;
    }

	pathIdentSegment() {
	    return this.getTypedRuleContext(PathIdentSegmentContext,0);
	};

	PATHSEP() {
	    return this.getToken(RustParser.PATHSEP, 0);
	};

	genericArgs() {
	    return this.getTypedRuleContext(GenericArgsContext,0);
	};

	typePathFn() {
	    return this.getTypedRuleContext(TypePathFnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypePathSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypePathSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypePathSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypePathFnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typePathFn;
    }

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	typePathInputs() {
	    return this.getTypedRuleContext(TypePathInputsContext,0);
	};

	RARROW() {
	    return this.getToken(RustParser.RARROW, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypePathFn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypePathFn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypePathFn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypePathInputsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_typePathInputs;
    }

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.COMMA);
	    } else {
	        return this.getToken(RustParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterTypePathInputs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitTypePathInputs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitTypePathInputs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VisibilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_visibility;
    }

	KW_PUB() {
	    return this.getToken(RustParser.KW_PUB, 0);
	};

	LPAREN() {
	    return this.getToken(RustParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(RustParser.RPAREN, 0);
	};

	KW_CRATE() {
	    return this.getToken(RustParser.KW_CRATE, 0);
	};

	KW_SELFVALUE() {
	    return this.getToken(RustParser.KW_SELFVALUE, 0);
	};

	KW_SUPER() {
	    return this.getToken(RustParser.KW_SUPER, 0);
	};

	KW_IN() {
	    return this.getToken(RustParser.KW_IN, 0);
	};

	simplePath() {
	    return this.getTypedRuleContext(SimplePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterVisibility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitVisibility(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitVisibility(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_identifier;
    }

	NON_KEYWORD_IDENTIFIER() {
	    return this.getToken(RustParser.NON_KEYWORD_IDENTIFIER, 0);
	};

	RAW_IDENTIFIER() {
	    return this.getToken(RustParser.RAW_IDENTIFIER, 0);
	};

	KW_MACRORULES() {
	    return this.getToken(RustParser.KW_MACRORULES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_keyword;
    }

	KW_AS() {
	    return this.getToken(RustParser.KW_AS, 0);
	};

	KW_BREAK() {
	    return this.getToken(RustParser.KW_BREAK, 0);
	};

	KW_CONST() {
	    return this.getToken(RustParser.KW_CONST, 0);
	};

	KW_CONTINUE() {
	    return this.getToken(RustParser.KW_CONTINUE, 0);
	};

	KW_CRATE() {
	    return this.getToken(RustParser.KW_CRATE, 0);
	};

	KW_ELSE() {
	    return this.getToken(RustParser.KW_ELSE, 0);
	};

	KW_ENUM() {
	    return this.getToken(RustParser.KW_ENUM, 0);
	};

	KW_EXTERN() {
	    return this.getToken(RustParser.KW_EXTERN, 0);
	};

	KW_FALSE() {
	    return this.getToken(RustParser.KW_FALSE, 0);
	};

	KW_FN() {
	    return this.getToken(RustParser.KW_FN, 0);
	};

	KW_FOR() {
	    return this.getToken(RustParser.KW_FOR, 0);
	};

	KW_IF() {
	    return this.getToken(RustParser.KW_IF, 0);
	};

	KW_IMPL() {
	    return this.getToken(RustParser.KW_IMPL, 0);
	};

	KW_IN() {
	    return this.getToken(RustParser.KW_IN, 0);
	};

	KW_LET() {
	    return this.getToken(RustParser.KW_LET, 0);
	};

	KW_LOOP() {
	    return this.getToken(RustParser.KW_LOOP, 0);
	};

	KW_MATCH() {
	    return this.getToken(RustParser.KW_MATCH, 0);
	};

	KW_MOD() {
	    return this.getToken(RustParser.KW_MOD, 0);
	};

	KW_MOVE() {
	    return this.getToken(RustParser.KW_MOVE, 0);
	};

	KW_MUT() {
	    return this.getToken(RustParser.KW_MUT, 0);
	};

	KW_PUB() {
	    return this.getToken(RustParser.KW_PUB, 0);
	};

	KW_REF() {
	    return this.getToken(RustParser.KW_REF, 0);
	};

	KW_RETURN() {
	    return this.getToken(RustParser.KW_RETURN, 0);
	};

	KW_SELFVALUE() {
	    return this.getToken(RustParser.KW_SELFVALUE, 0);
	};

	KW_SELFTYPE() {
	    return this.getToken(RustParser.KW_SELFTYPE, 0);
	};

	KW_STATIC() {
	    return this.getToken(RustParser.KW_STATIC, 0);
	};

	KW_STRUCT() {
	    return this.getToken(RustParser.KW_STRUCT, 0);
	};

	KW_SUPER() {
	    return this.getToken(RustParser.KW_SUPER, 0);
	};

	KW_TRAIT() {
	    return this.getToken(RustParser.KW_TRAIT, 0);
	};

	KW_TRUE() {
	    return this.getToken(RustParser.KW_TRUE, 0);
	};

	KW_TYPE() {
	    return this.getToken(RustParser.KW_TYPE, 0);
	};

	KW_UNSAFE() {
	    return this.getToken(RustParser.KW_UNSAFE, 0);
	};

	KW_USE() {
	    return this.getToken(RustParser.KW_USE, 0);
	};

	KW_WHERE() {
	    return this.getToken(RustParser.KW_WHERE, 0);
	};

	KW_WHILE() {
	    return this.getToken(RustParser.KW_WHILE, 0);
	};

	KW_ASYNC() {
	    return this.getToken(RustParser.KW_ASYNC, 0);
	};

	KW_AWAIT() {
	    return this.getToken(RustParser.KW_AWAIT, 0);
	};

	KW_DYN() {
	    return this.getToken(RustParser.KW_DYN, 0);
	};

	KW_ABSTRACT() {
	    return this.getToken(RustParser.KW_ABSTRACT, 0);
	};

	KW_BECOME() {
	    return this.getToken(RustParser.KW_BECOME, 0);
	};

	KW_BOX() {
	    return this.getToken(RustParser.KW_BOX, 0);
	};

	KW_DO() {
	    return this.getToken(RustParser.KW_DO, 0);
	};

	KW_FINAL() {
	    return this.getToken(RustParser.KW_FINAL, 0);
	};

	KW_MACRO() {
	    return this.getToken(RustParser.KW_MACRO, 0);
	};

	KW_OVERRIDE() {
	    return this.getToken(RustParser.KW_OVERRIDE, 0);
	};

	KW_PRIV() {
	    return this.getToken(RustParser.KW_PRIV, 0);
	};

	KW_TYPEOF() {
	    return this.getToken(RustParser.KW_TYPEOF, 0);
	};

	KW_UNSIZED() {
	    return this.getToken(RustParser.KW_UNSIZED, 0);
	};

	KW_VIRTUAL() {
	    return this.getToken(RustParser.KW_VIRTUAL, 0);
	};

	KW_YIELD() {
	    return this.getToken(RustParser.KW_YIELD, 0);
	};

	KW_TRY() {
	    return this.getToken(RustParser.KW_TRY, 0);
	};

	KW_UNION() {
	    return this.getToken(RustParser.KW_UNION, 0);
	};

	KW_STATICLIFETIME() {
	    return this.getToken(RustParser.KW_STATICLIFETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroIdentifierLikeTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroIdentifierLikeToken;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	KW_MACRORULES() {
	    return this.getToken(RustParser.KW_MACRORULES, 0);
	};

	KW_UNDERLINELIFETIME() {
	    return this.getToken(RustParser.KW_UNDERLINELIFETIME, 0);
	};

	KW_DOLLARCRATE() {
	    return this.getToken(RustParser.KW_DOLLARCRATE, 0);
	};

	LIFETIME_OR_LABEL() {
	    return this.getToken(RustParser.LIFETIME_OR_LABEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroIdentifierLikeToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroIdentifierLikeToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroIdentifierLikeToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroLiteralTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroLiteralToken;
    }

	literalExpression() {
	    return this.getTypedRuleContext(LiteralExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroLiteralToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroLiteralToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroLiteralToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MacroPunctuationTokenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_macroPunctuationToken;
    }

	MINUS() {
	    return this.getToken(RustParser.MINUS, 0);
	};

	SLASH() {
	    return this.getToken(RustParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(RustParser.PERCENT, 0);
	};

	CARET() {
	    return this.getToken(RustParser.CARET, 0);
	};

	NOT() {
	    return this.getToken(RustParser.NOT, 0);
	};

	AND() {
	    return this.getToken(RustParser.AND, 0);
	};

	OR() {
	    return this.getToken(RustParser.OR, 0);
	};

	ANDAND() {
	    return this.getToken(RustParser.ANDAND, 0);
	};

	OROR() {
	    return this.getToken(RustParser.OROR, 0);
	};

	PLUSEQ() {
	    return this.getToken(RustParser.PLUSEQ, 0);
	};

	MINUSEQ() {
	    return this.getToken(RustParser.MINUSEQ, 0);
	};

	STAREQ() {
	    return this.getToken(RustParser.STAREQ, 0);
	};

	SLASHEQ() {
	    return this.getToken(RustParser.SLASHEQ, 0);
	};

	PERCENTEQ() {
	    return this.getToken(RustParser.PERCENTEQ, 0);
	};

	CARETEQ() {
	    return this.getToken(RustParser.CARETEQ, 0);
	};

	ANDEQ() {
	    return this.getToken(RustParser.ANDEQ, 0);
	};

	OREQ() {
	    return this.getToken(RustParser.OREQ, 0);
	};

	SHLEQ() {
	    return this.getToken(RustParser.SHLEQ, 0);
	};

	SHREQ() {
	    return this.getToken(RustParser.SHREQ, 0);
	};

	EQ() {
	    return this.getToken(RustParser.EQ, 0);
	};

	EQEQ() {
	    return this.getToken(RustParser.EQEQ, 0);
	};

	NE() {
	    return this.getToken(RustParser.NE, 0);
	};

	GT() {
	    return this.getToken(RustParser.GT, 0);
	};

	LT() {
	    return this.getToken(RustParser.LT, 0);
	};

	GE() {
	    return this.getToken(RustParser.GE, 0);
	};

	LE() {
	    return this.getToken(RustParser.LE, 0);
	};

	AT() {
	    return this.getToken(RustParser.AT, 0);
	};

	UNDERSCORE() {
	    return this.getToken(RustParser.UNDERSCORE, 0);
	};

	DOT() {
	    return this.getToken(RustParser.DOT, 0);
	};

	DOTDOT() {
	    return this.getToken(RustParser.DOTDOT, 0);
	};

	DOTDOTDOT() {
	    return this.getToken(RustParser.DOTDOTDOT, 0);
	};

	DOTDOTEQ() {
	    return this.getToken(RustParser.DOTDOTEQ, 0);
	};

	COMMA() {
	    return this.getToken(RustParser.COMMA, 0);
	};

	SEMI() {
	    return this.getToken(RustParser.SEMI, 0);
	};

	COLON() {
	    return this.getToken(RustParser.COLON, 0);
	};

	PATHSEP() {
	    return this.getToken(RustParser.PATHSEP, 0);
	};

	RARROW() {
	    return this.getToken(RustParser.RARROW, 0);
	};

	FATARROW() {
	    return this.getToken(RustParser.FATARROW, 0);
	};

	POUND() {
	    return this.getToken(RustParser.POUND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterMacroPunctuationToken(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitMacroPunctuationToken(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitMacroPunctuationToken(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_shl;
    }

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.LT);
	    } else {
	        return this.getToken(RustParser.LT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterShl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitShl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitShl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = RustParser.RULE_shr;
    }

	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(RustParser.GT);
	    } else {
	        return this.getToken(RustParser.GT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.enterShr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof RustParserListener ) {
	        listener.exitShr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof RustParserVisitor ) {
	        return visitor.visitShr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




RustParser.CrateContext = CrateContext; 
RustParser.MacroInvocationContext = MacroInvocationContext; 
RustParser.DelimTokenTreeContext = DelimTokenTreeContext; 
RustParser.TokenTreeContext = TokenTreeContext; 
RustParser.TokenTreeTokenContext = TokenTreeTokenContext; 
RustParser.MacroInvocationSemiContext = MacroInvocationSemiContext; 
RustParser.MacroRulesDefinitionContext = MacroRulesDefinitionContext; 
RustParser.MacroRulesDefContext = MacroRulesDefContext; 
RustParser.MacroRulesContext = MacroRulesContext; 
RustParser.MacroRuleContext = MacroRuleContext; 
RustParser.MacroMatcherContext = MacroMatcherContext; 
RustParser.MacroMatchContext = MacroMatchContext; 
RustParser.MacroMatchTokenContext = MacroMatchTokenContext; 
RustParser.MacroFragSpecContext = MacroFragSpecContext; 
RustParser.MacroRepSepContext = MacroRepSepContext; 
RustParser.MacroRepOpContext = MacroRepOpContext; 
RustParser.MacroTranscriberContext = MacroTranscriberContext; 
RustParser.ItemContext = ItemContext; 
RustParser.VisItemContext = VisItemContext; 
RustParser.MacroItemContext = MacroItemContext; 
RustParser.ModuleContext = ModuleContext; 
RustParser.ExternCrateContext = ExternCrateContext; 
RustParser.CrateRefContext = CrateRefContext; 
RustParser.AsClauseContext = AsClauseContext; 
RustParser.UseDeclarationContext = UseDeclarationContext; 
RustParser.UseTreeContext = UseTreeContext; 
RustParser.Function_Context = Function_Context; 
RustParser.FunctionQualifiersContext = FunctionQualifiersContext; 
RustParser.AbiContext = AbiContext; 
RustParser.FunctionParametersContext = FunctionParametersContext; 
RustParser.SelfParamContext = SelfParamContext; 
RustParser.ShorthandSelfContext = ShorthandSelfContext; 
RustParser.TypedSelfContext = TypedSelfContext; 
RustParser.FunctionParamContext = FunctionParamContext; 
RustParser.FunctionParamPatternContext = FunctionParamPatternContext; 
RustParser.FunctionReturnTypeContext = FunctionReturnTypeContext; 
RustParser.TypeAliasContext = TypeAliasContext; 
RustParser.Struct_Context = Struct_Context; 
RustParser.StructStructContext = StructStructContext; 
RustParser.TupleStructContext = TupleStructContext; 
RustParser.StructFieldsContext = StructFieldsContext; 
RustParser.StructFieldContext = StructFieldContext; 
RustParser.TupleFieldsContext = TupleFieldsContext; 
RustParser.TupleFieldContext = TupleFieldContext; 
RustParser.EnumerationContext = EnumerationContext; 
RustParser.EnumItemsContext = EnumItemsContext; 
RustParser.EnumItemContext = EnumItemContext; 
RustParser.EnumItemTupleContext = EnumItemTupleContext; 
RustParser.EnumItemStructContext = EnumItemStructContext; 
RustParser.EnumItemDiscriminantContext = EnumItemDiscriminantContext; 
RustParser.Union_Context = Union_Context; 
RustParser.ConstantItemContext = ConstantItemContext; 
RustParser.StaticItemContext = StaticItemContext; 
RustParser.Trait_Context = Trait_Context; 
RustParser.ImplementationContext = ImplementationContext; 
RustParser.InherentImplContext = InherentImplContext; 
RustParser.TraitImplContext = TraitImplContext; 
RustParser.ExternBlockContext = ExternBlockContext; 
RustParser.ExternalItemContext = ExternalItemContext; 
RustParser.GenericParamsContext = GenericParamsContext; 
RustParser.GenericParamContext = GenericParamContext; 
RustParser.LifetimeParamContext = LifetimeParamContext; 
RustParser.TypeParamContext = TypeParamContext; 
RustParser.ConstParamContext = ConstParamContext; 
RustParser.WhereClauseContext = WhereClauseContext; 
RustParser.WhereClauseItemContext = WhereClauseItemContext; 
RustParser.LifetimeWhereClauseItemContext = LifetimeWhereClauseItemContext; 
RustParser.TypeBoundWhereClauseItemContext = TypeBoundWhereClauseItemContext; 
RustParser.ForLifetimesContext = ForLifetimesContext; 
RustParser.AssociatedItemContext = AssociatedItemContext; 
RustParser.InnerAttributeContext = InnerAttributeContext; 
RustParser.OuterAttributeContext = OuterAttributeContext; 
RustParser.AttrContext = AttrContext; 
RustParser.AttrInputContext = AttrInputContext; 
RustParser.StatementContext = StatementContext; 
RustParser.LetStatementContext = LetStatementContext; 
RustParser.ExpressionStatementContext = ExpressionStatementContext; 
RustParser.ExpressionContext = ExpressionContext; 
RustParser.ComparisonOperatorContext = ComparisonOperatorContext; 
RustParser.CompoundAssignOperatorContext = CompoundAssignOperatorContext; 
RustParser.ExpressionWithBlockContext = ExpressionWithBlockContext; 
RustParser.LiteralExpressionContext = LiteralExpressionContext; 
RustParser.PathExpressionContext = PathExpressionContext; 
RustParser.BlockExpressionContext = BlockExpressionContext; 
RustParser.StatementsContext = StatementsContext; 
RustParser.AsyncBlockExpressionContext = AsyncBlockExpressionContext; 
RustParser.UnsafeBlockExpressionContext = UnsafeBlockExpressionContext; 
RustParser.ArrayElementsContext = ArrayElementsContext; 
RustParser.TupleElementsContext = TupleElementsContext; 
RustParser.TupleIndexContext = TupleIndexContext; 
RustParser.StructExpressionContext = StructExpressionContext; 
RustParser.StructExprStructContext = StructExprStructContext; 
RustParser.StructExprFieldsContext = StructExprFieldsContext; 
RustParser.StructExprFieldContext = StructExprFieldContext; 
RustParser.StructBaseContext = StructBaseContext; 
RustParser.StructExprTupleContext = StructExprTupleContext; 
RustParser.StructExprUnitContext = StructExprUnitContext; 
RustParser.EnumerationVariantExpressionContext = EnumerationVariantExpressionContext; 
RustParser.EnumExprStructContext = EnumExprStructContext; 
RustParser.EnumExprFieldsContext = EnumExprFieldsContext; 
RustParser.EnumExprFieldContext = EnumExprFieldContext; 
RustParser.EnumExprTupleContext = EnumExprTupleContext; 
RustParser.EnumExprFieldlessContext = EnumExprFieldlessContext; 
RustParser.CallParamsContext = CallParamsContext; 
RustParser.ClosureExpressionContext = ClosureExpressionContext; 
RustParser.ClosureParametersContext = ClosureParametersContext; 
RustParser.ClosureParamContext = ClosureParamContext; 
RustParser.LoopExpressionContext = LoopExpressionContext; 
RustParser.InfiniteLoopExpressionContext = InfiniteLoopExpressionContext; 
RustParser.PredicateLoopExpressionContext = PredicateLoopExpressionContext; 
RustParser.PredicatePatternLoopExpressionContext = PredicatePatternLoopExpressionContext; 
RustParser.IteratorLoopExpressionContext = IteratorLoopExpressionContext; 
RustParser.LoopLabelContext = LoopLabelContext; 
RustParser.IfExpressionContext = IfExpressionContext; 
RustParser.IfLetExpressionContext = IfLetExpressionContext; 
RustParser.MatchExpressionContext = MatchExpressionContext; 
RustParser.MatchArmsContext = MatchArmsContext; 
RustParser.MatchArmExpressionContext = MatchArmExpressionContext; 
RustParser.MatchArmContext = MatchArmContext; 
RustParser.MatchArmGuardContext = MatchArmGuardContext; 
RustParser.PatternContext = PatternContext; 
RustParser.PatternNoTopAltContext = PatternNoTopAltContext; 
RustParser.PatternWithoutRangeContext = PatternWithoutRangeContext; 
RustParser.LiteralPatternContext = LiteralPatternContext; 
RustParser.IdentifierPatternContext = IdentifierPatternContext; 
RustParser.WildcardPatternContext = WildcardPatternContext; 
RustParser.RestPatternContext = RestPatternContext; 
RustParser.RangePatternContext = RangePatternContext; 
RustParser.RangePatternBoundContext = RangePatternBoundContext; 
RustParser.ReferencePatternContext = ReferencePatternContext; 
RustParser.StructPatternContext = StructPatternContext; 
RustParser.StructPatternElementsContext = StructPatternElementsContext; 
RustParser.StructPatternFieldsContext = StructPatternFieldsContext; 
RustParser.StructPatternFieldContext = StructPatternFieldContext; 
RustParser.StructPatternEtCeteraContext = StructPatternEtCeteraContext; 
RustParser.TupleStructPatternContext = TupleStructPatternContext; 
RustParser.TupleStructItemsContext = TupleStructItemsContext; 
RustParser.TuplePatternContext = TuplePatternContext; 
RustParser.TuplePatternItemsContext = TuplePatternItemsContext; 
RustParser.GroupedPatternContext = GroupedPatternContext; 
RustParser.SlicePatternContext = SlicePatternContext; 
RustParser.SlicePatternItemsContext = SlicePatternItemsContext; 
RustParser.PathPatternContext = PathPatternContext; 
RustParser.Type_Context = Type_Context; 
RustParser.TypeNoBoundsContext = TypeNoBoundsContext; 
RustParser.ParenthesizedTypeContext = ParenthesizedTypeContext; 
RustParser.NeverTypeContext = NeverTypeContext; 
RustParser.TupleTypeContext = TupleTypeContext; 
RustParser.ArrayTypeContext = ArrayTypeContext; 
RustParser.SliceTypeContext = SliceTypeContext; 
RustParser.ReferenceTypeContext = ReferenceTypeContext; 
RustParser.RawPointerTypeContext = RawPointerTypeContext; 
RustParser.BareFunctionTypeContext = BareFunctionTypeContext; 
RustParser.FunctionTypeQualifiersContext = FunctionTypeQualifiersContext; 
RustParser.BareFunctionReturnTypeContext = BareFunctionReturnTypeContext; 
RustParser.FunctionParametersMaybeNamedVariadicContext = FunctionParametersMaybeNamedVariadicContext; 
RustParser.MaybeNamedFunctionParametersContext = MaybeNamedFunctionParametersContext; 
RustParser.MaybeNamedParamContext = MaybeNamedParamContext; 
RustParser.MaybeNamedFunctionParametersVariadicContext = MaybeNamedFunctionParametersVariadicContext; 
RustParser.TraitObjectTypeContext = TraitObjectTypeContext; 
RustParser.TraitObjectTypeOneBoundContext = TraitObjectTypeOneBoundContext; 
RustParser.ImplTraitTypeContext = ImplTraitTypeContext; 
RustParser.ImplTraitTypeOneBoundContext = ImplTraitTypeOneBoundContext; 
RustParser.InferredTypeContext = InferredTypeContext; 
RustParser.TypeParamBoundsContext = TypeParamBoundsContext; 
RustParser.TypeParamBoundContext = TypeParamBoundContext; 
RustParser.TraitBoundContext = TraitBoundContext; 
RustParser.LifetimeBoundsContext = LifetimeBoundsContext; 
RustParser.LifetimeContext = LifetimeContext; 
RustParser.SimplePathContext = SimplePathContext; 
RustParser.SimplePathSegmentContext = SimplePathSegmentContext; 
RustParser.PathInExpressionContext = PathInExpressionContext; 
RustParser.PathExprSegmentContext = PathExprSegmentContext; 
RustParser.PathIdentSegmentContext = PathIdentSegmentContext; 
RustParser.GenericArgsContext = GenericArgsContext; 
RustParser.GenericArgContext = GenericArgContext; 
RustParser.GenericArgsConstContext = GenericArgsConstContext; 
RustParser.GenericArgsLifetimesContext = GenericArgsLifetimesContext; 
RustParser.GenericArgsTypesContext = GenericArgsTypesContext; 
RustParser.GenericArgsBindingsContext = GenericArgsBindingsContext; 
RustParser.GenericArgsBindingContext = GenericArgsBindingContext; 
RustParser.QualifiedPathInExpressionContext = QualifiedPathInExpressionContext; 
RustParser.QualifiedPathTypeContext = QualifiedPathTypeContext; 
RustParser.QualifiedPathInTypeContext = QualifiedPathInTypeContext; 
RustParser.TypePathContext = TypePathContext; 
RustParser.TypePathSegmentContext = TypePathSegmentContext; 
RustParser.TypePathFnContext = TypePathFnContext; 
RustParser.TypePathInputsContext = TypePathInputsContext; 
RustParser.VisibilityContext = VisibilityContext; 
RustParser.IdentifierContext = IdentifierContext; 
RustParser.KeywordContext = KeywordContext; 
RustParser.MacroIdentifierLikeTokenContext = MacroIdentifierLikeTokenContext; 
RustParser.MacroLiteralTokenContext = MacroLiteralTokenContext; 
RustParser.MacroPunctuationTokenContext = MacroPunctuationTokenContext; 
RustParser.ShlContext = ShlContext; 
RustParser.ShrContext = ShrContext; 
