
> python3_12@1.0.0 test
> mocha

Nome da variavelconst x
Valor da variavel5
Nome da variavellet ,y
Valor da variavel10
On crate,,main,,,,const x = 5;,let ,y = 10;,
[ [ [ [Array] ] ], undefined ]


  Python
    if statement
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting if_stmt
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting gt_bitwise_or
visitGt_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;
if (x > 0) {
		let x = 5;
}
      ✔ should generate correct JavaScript for a simple if statement (206ms)
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting if_stmt
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting gt_bitwise_or
visitGt_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;
Visiting elif_stmt
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting lt_bitwise_or
visitLt_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
y
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





6
RESULT





let y = 6;
Visiting else_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





6
Visiting augassign
visitAugassign
AUGASSIGN
+=
RESULT





let y += 6;
      ✔ should generate correct JavaScript for an if-elif-else statement
    Python to JavaScript translation: for statement
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
item
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





items
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





print,,item,
RESULT





print,,item,
      1) should generate correct JavaScript for a simple for loop
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
      ✔ should throw an error for async for loops
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
      ✔ should throw an error for a for loop with an else block
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
i
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





range,,0,,10,,2,
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





print,,i,
RESULT





print,,i,
      2) should handle a for loop with step increments in the range
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
i
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





range,,10,,0,,- 2,
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





print,,i,
RESULT





print,,i,
      3) should handle a for loop with negative step increments in the range
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
item
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





items
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





print,,item,
RESULT





print,,item,
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





1
Visiting augassign
visitAugassign
AUGASSIGN
+=
RESULT





let count += 1;
      4) should handle a for loop with multiple statements in the body
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
i
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





range,,3,
Visiting block
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
j
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





range,,2,
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





print,,i,,j,
RESULT





print,,i,,j,
      5) should handle nested for loops
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting for
Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
item
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





items
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
RESULT





/* pass */
      ✔ should handle an empty for loop
    Python to JavaScript translation: while statement
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting global
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting lt_bitwise_or
visitLt_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
y
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





1
RESULT





let y = 1;
      ✔ should generate correct JavaScript for a simple while loop
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting global
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting lt_bitwise_or
visitLt_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





1
RESULT





let x = 1;
Visiting else_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





0
RESULT





let x = 0;
      ✔ should generate correct JavaScript for a while loop with an else block
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting global
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting lt_bitwise_or
visitLt_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





1
RESULT





let x = 1;
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
y
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





1
RESULT





let y = 1;
      ✔ should handle a while loop with multiple statements in the body
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting global
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting lt_bitwise_or
visitLt_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





1
Visiting augassign
visitAugassign
AUGASSIGN
+=
RESULT





let x += 1;
Visiting else_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





0
RESULT





let x = 0;
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
y
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





1
RESULT





let y = 1;
      ✔ should handle a while loop with multiple statements in the else block
    except statement
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting Try_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;






except




<ref *1> Except_blockContext {
  parentCtx: Try_stmtContext {
    parentCtx: Compound_stmtContext {
      parentCtx: [StatementContext],
      invokingState: 434,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 10
    },
    invokingState: 480,
    children: [ [Fe], [Fe], [BlockContext], [Circular *1] ],
    start: vt {
      source: [Array],
      type: 26,
      channel: 0,
      start: 0,
      stop: 2,
      tokenIndex: 0,
      line: 1,
      column: 0,
      _text: null
    },
    stop: vt {
      source: [Array],
      type: 2,
      channel: 0,
      start: 44,
      stop: 43,
      tokenIndex: 27,
      line: 4,
      column: 10,
      _text: '<DEDENT>'
    },
    exception: null,
    except_block: [Function: except_block],
    except_star_block: [Function: except_star_block],
    parser: PythonParser {
      _listeners: [Array],
      _interp: [ne],
      _stateNumber: -1,
      _input: [Pe],
      _errHandler: [_e],
      _precedenceStack: [Array],
      _ctx: null,
      buildParseTrees: true,
      _tracer: null,
      _parseListeners: null,
      _syntaxErrors: 0,
      ruleNames: [Array],
      literalNames: [Array],
      symbolicNames: [Array]
    },
    ruleIndex: 58
  },
  invokingState: 991,
  children: [
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1018 },
    ExpressionContext {
      parentCtx: [Circular *1],
      invokingState: 1019,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      disjunction: [Function: disjunction],
      parser: [PythonParser],
      ruleIndex: 104
    },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1020 },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1021 },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1026 },
    BlockContext {
      parentCtx: [Circular *1],
      invokingState: 1027,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 30
    }
  ],
  start: vt {
    source: [ [PythonLexer], [ke] ],
    type: 14,
    channel: 0,
    start: 10,
    stop: 15,
    tokenIndex: 10,
    line: 3,
    column: 0,
    _text: null
  },
  stop: vt {
    source: [ [PythonLexer], [ke] ],
    type: 2,
    channel: 0,
    start: 44,
    stop: 43,
    tokenIndex: 27,
    line: 4,
    column: 10,
    _text: '<DEDENT>'
  },
  exception: null,
  parser: <ref *2> PythonParser {
    _listeners: [ [ErrorCollector] ],
    _interp: ne {
      atn: [j],
      sharedContextCache: [se],
      parser: [Circular *2],
      decisionToDFA: [Array],
      predictionMode: 1,
      _input: [Pe],
      _startIndex: 28,
      _outerContext: [StatementsContext],
      _dfa: null,
      mergeCache: null,
      debug: false,
      debug_closure: false,
      debug_add: false,
      trace_atn_sim: false,
      dfa_debug: false,
      retry_debug: false
    },
    _stateNumber: -1,
    _input: Pe {
      tokenSource: [PythonLexer],
      tokens: [Array],
      index: 28,
      fetchedEOF: true,
      channel: 0
    },
    _errHandler: _e {
      errorRecoveryMode: false,
      lastErrorIndex: -1,
      lastErrorStates: null,
      nextTokensContext: [StatementsContext],
      nextTokenState: -1,
      nextTokensState: 432
    },
    _precedenceStack: [ 0 ],
    _ctx: null,
    buildParseTrees: true,
    _tracer: null,
    _parseListeners: null,
    _syntaxErrors: 0,
    ruleNames: [
      'file_input',
      'interactive',
      'eval',
      'func_type',
      'fstring_input',
      'statements',
      'statement',
      'statement_newline',
      'simple_stmts',
      'simple_stmt',
      'compound_stmt',
      'assignment',
      'annotated_rhs',
      'augassign',
      'return_stmt',
      'raise_stmt',
      'global_stmt',
      'nonlocal_stmt',
      'del_stmt',
      'yield_stmt',
      'assert_stmt',
      'import_stmt',
      'import_name',
      'import_from',
      'import_from_targets',
      'import_from_as_names',
      'import_from_as_name',
      'dotted_as_names',
      'dotted_as_name',
      'dotted_name',
      'block',
      'decorators',
      'class_def',
      'class_def_raw',
      'function_def',
      'function_def_raw',
      'params',
      'parameters',
      'slash_no_default',
      'slash_with_default',
      'star_etc',
      'kwds',
      'param_no_default',
      'param_no_default_star_annotation',
      'param_with_default',
      'param_maybe_default',
      'param',
      'param_star_annotation',
      'annotation',
      'star_annotation',
      'default_assignment',
      'if_stmt',
      'elif_stmt',
      'else_block',
      'while_stmt',
      'for_stmt',
      'with_stmt',
      'with_item',
      'try_stmt',
      'except_block',
      'except_star_block',
      'finally_block',
      'match_stmt',
      'subject_expr',
      'case_block',
      'guard',
      'patterns',
      'pattern',
      'as_pattern',
      'or_pattern',
      'closed_pattern',
      'literal_pattern',
      'literal_expr',
      'complex_number',
      'signed_number',
      'signed_real_number',
      'real_number',
      'imaginary_number',
      'capture_pattern',
      'pattern_capture_target',
      'wildcard_pattern',
      'value_pattern',
      'attr',
      'name_or_attr',
      'group_pattern',
      'sequence_pattern',
      'open_sequence_pattern',
      'maybe_sequence_pattern',
      'maybe_star_pattern',
      'star_pattern',
      'mapping_pattern',
      'items_pattern',
      'key_value_pattern',
      'double_star_pattern',
      'class_pattern',
      'positional_patterns',
      'keyword_patterns',
      'keyword_pattern',
      'type_alias',
      'type_params',
      ... 98 more items
    ],
    literalNames: [
      null,         null,       null,       null,         null,
      null,         null,       "'False'",  "'await'",    "'else'",
      "'import'",   "'pass'",   "'None'",   "'break'",    "'except'",
      "'in'",       "'raise'",  "'True'",   "'class'",    "'finally'",
      "'is'",       "'return'", "'and'",    "'continue'", "'for'",
      "'lambda'",   "'try'",    "'as'",     "'def'",      "'from'",
      "'nonlocal'", "'while'",  "'assert'", "'del'",      "'global'",
      "'not'",      "'with'",   "'async'",  "'elif'",     "'if'",
      "'or'",       "'yield'",  "'('",      "'['",        null,
      "')'",        "']'",      null,       "'.'",        "':'",
      "','",        "';'",      "'+'",      "'-'",        "'*'",
      "'/'",        "'|'",      "'&'",      "'<'",        "'>'",
      "'='",        "'%'",      "'=='",     "'!='",       "'<='",
      "'>='",       "'~'",      "'^'",      "'<<'",       "'>>'",
      "'**'",       "'+='",     "'-='",     "'*='",       "'/='",
      "'%='",       "'&='",     "'|='",     "'^='",       "'<<='",
      "'>>='",      "'**='",    "'//'",     "'//='",      "'@'",
      "'@='",       "'->'",     "'...'",    "':='",       "'!'"
    ],
    symbolicNames: [
      null,                    'INDENT',         'DEDENT',
      'TYPE_COMMENT',          'FSTRING_START',  'FSTRING_MIDDLE',
      'FSTRING_END',           'FALSE',          'AWAIT',
      'ELSE',                  'IMPORT',         'PASS',
      'NONE',                  'BREAK',          'EXCEPT',
      'IN',                    'RAISE',          'TRUE',
      'CLASS',                 'FINALLY',        'IS',
      'RETURN',                'AND',            'CONTINUE',
      'FOR',                   'LAMBDA',         'TRY',
      'AS',                    'DEF',            'FROM',
      'NONLOCAL',              'WHILE',          'ASSERT',
      'DEL',                   'GLOBAL',         'NOT',
      'WITH',                  'ASYNC',          'ELIF',
      'IF',                    'OR',             'YIELD',
      'LPAR',                  'LSQB',           'LBRACE',
      'RPAR',                  'RSQB',           'RBRACE',
      'DOT',                   'COLON',          'COMMA',
      'SEMI',                  'PLUS',           'MINUS',
      'STAR',                  'SLASH',          'VBAR',
      'AMPER',                 'LESS',           'GREATER',
      'EQUAL',                 'PERCENT',        'EQEQUAL',
      'NOTEQUAL',              'LESSEQUAL',      'GREATEREQUAL',
      'TILDE',                 'CIRCUMFLEX',     'LEFTSHIFT',
      'RIGHTSHIFT',            'DOUBLESTAR',     'PLUSEQUAL',
      'MINEQUAL',              'STAREQUAL',      'SLASHEQUAL',
      'PERCENTEQUAL',          'AMPEREQUAL',     'VBAREQUAL',
      'CIRCUMFLEXEQUAL',       'LEFTSHIFTEQUAL', 'RIGHTSHIFTEQUAL',
      'DOUBLESTAREQUAL',       'DOUBLESLASH',    'DOUBLESLASHEQUAL',
      'AT',                    'ATEQUAL',        'RARROW',
      'ELLIPSIS',              'COLONEQUAL',     'EXCLAMATION',
      'NAME',                  'NUMBER',         'STRING',
      'NEWLINE',               'COMMENT',        'WS',
      'EXPLICIT_LINE_JOINING', 'ERRORTOKEN'
    ]
  },
  ruleIndex: 59
}
Visiting Except Block
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
error
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





e
RESULT





let error = e;
      ✔ should generate correct JavaScript for an except block with a specific exception type (76ms)
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting Try_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;






except




<ref *1> Except_blockContext {
  parentCtx: Try_stmtContext {
    parentCtx: Compound_stmtContext {
      parentCtx: [StatementContext],
      invokingState: 434,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 10
    },
    invokingState: 480,
    children: [ [Fe], [Fe], [BlockContext], [Circular *1] ],
    start: vt {
      source: [Array],
      type: 26,
      channel: 0,
      start: 0,
      stop: 2,
      tokenIndex: 0,
      line: 1,
      column: 0,
      _text: null
    },
    stop: vt {
      source: [Array],
      type: 2,
      channel: 0,
      start: 61,
      stop: 60,
      tokenIndex: 23,
      line: 4,
      column: 33,
      _text: '<DEDENT>'
    },
    exception: null,
    except_block: [Function: except_block],
    except_star_block: [Function: except_star_block],
    parser: PythonParser {
      _listeners: [Array],
      _interp: [ne],
      _stateNumber: -1,
      _input: [Pe],
      _errHandler: [_e],
      _precedenceStack: [Array],
      _ctx: null,
      buildParseTrees: true,
      _tracer: null,
      _parseListeners: null,
      _syntaxErrors: 0,
      ruleNames: [Array],
      literalNames: [Array],
      symbolicNames: [Array]
    },
    ruleIndex: 58
  },
  invokingState: 991,
  children: [
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1018 },
    ExpressionContext {
      parentCtx: [Circular *1],
      invokingState: 1019,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      disjunction: [Function: disjunction],
      parser: [PythonParser],
      ruleIndex: 104
    },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1026 },
    BlockContext {
      parentCtx: [Circular *1],
      invokingState: 1027,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 30
    }
  ],
  start: vt {
    source: [ [PythonLexer], [ke] ],
    type: 14,
    channel: 0,
    start: 10,
    stop: 15,
    tokenIndex: 10,
    line: 3,
    column: 0,
    _text: null
  },
  stop: vt {
    source: [ [PythonLexer], [ke] ],
    type: 2,
    channel: 0,
    start: 61,
    stop: 60,
    tokenIndex: 23,
    line: 4,
    column: 33,
    _text: '<DEDENT>'
  },
  exception: null,
  parser: <ref *2> PythonParser {
    _listeners: [ [ErrorCollector] ],
    _interp: ne {
      atn: [j],
      sharedContextCache: [se],
      parser: [Circular *2],
      decisionToDFA: [Array],
      predictionMode: 1,
      _input: [Pe],
      _startIndex: 24,
      _outerContext: [StatementsContext],
      _dfa: null,
      mergeCache: null,
      debug: false,
      debug_closure: false,
      debug_add: false,
      trace_atn_sim: false,
      dfa_debug: false,
      retry_debug: false
    },
    _stateNumber: -1,
    _input: Pe {
      tokenSource: [PythonLexer],
      tokens: [Array],
      index: 24,
      fetchedEOF: true,
      channel: 0
    },
    _errHandler: _e {
      errorRecoveryMode: false,
      lastErrorIndex: -1,
      lastErrorStates: null,
      nextTokensContext: [StatementsContext],
      nextTokenState: -1,
      nextTokensState: 432
    },
    _precedenceStack: [ 0 ],
    _ctx: null,
    buildParseTrees: true,
    _tracer: null,
    _parseListeners: null,
    _syntaxErrors: 0,
    ruleNames: [
      'file_input',
      'interactive',
      'eval',
      'func_type',
      'fstring_input',
      'statements',
      'statement',
      'statement_newline',
      'simple_stmts',
      'simple_stmt',
      'compound_stmt',
      'assignment',
      'annotated_rhs',
      'augassign',
      'return_stmt',
      'raise_stmt',
      'global_stmt',
      'nonlocal_stmt',
      'del_stmt',
      'yield_stmt',
      'assert_stmt',
      'import_stmt',
      'import_name',
      'import_from',
      'import_from_targets',
      'import_from_as_names',
      'import_from_as_name',
      'dotted_as_names',
      'dotted_as_name',
      'dotted_name',
      'block',
      'decorators',
      'class_def',
      'class_def_raw',
      'function_def',
      'function_def_raw',
      'params',
      'parameters',
      'slash_no_default',
      'slash_with_default',
      'star_etc',
      'kwds',
      'param_no_default',
      'param_no_default_star_annotation',
      'param_with_default',
      'param_maybe_default',
      'param',
      'param_star_annotation',
      'annotation',
      'star_annotation',
      'default_assignment',
      'if_stmt',
      'elif_stmt',
      'else_block',
      'while_stmt',
      'for_stmt',
      'with_stmt',
      'with_item',
      'try_stmt',
      'except_block',
      'except_star_block',
      'finally_block',
      'match_stmt',
      'subject_expr',
      'case_block',
      'guard',
      'patterns',
      'pattern',
      'as_pattern',
      'or_pattern',
      'closed_pattern',
      'literal_pattern',
      'literal_expr',
      'complex_number',
      'signed_number',
      'signed_real_number',
      'real_number',
      'imaginary_number',
      'capture_pattern',
      'pattern_capture_target',
      'wildcard_pattern',
      'value_pattern',
      'attr',
      'name_or_attr',
      'group_pattern',
      'sequence_pattern',
      'open_sequence_pattern',
      'maybe_sequence_pattern',
      'maybe_star_pattern',
      'star_pattern',
      'mapping_pattern',
      'items_pattern',
      'key_value_pattern',
      'double_star_pattern',
      'class_pattern',
      'positional_patterns',
      'keyword_patterns',
      'keyword_pattern',
      'type_alias',
      'type_params',
      ... 98 more items
    ],
    literalNames: [
      null,         null,       null,       null,         null,
      null,         null,       "'False'",  "'await'",    "'else'",
      "'import'",   "'pass'",   "'None'",   "'break'",    "'except'",
      "'in'",       "'raise'",  "'True'",   "'class'",    "'finally'",
      "'is'",       "'return'", "'and'",    "'continue'", "'for'",
      "'lambda'",   "'try'",    "'as'",     "'def'",      "'from'",
      "'nonlocal'", "'while'",  "'assert'", "'del'",      "'global'",
      "'not'",      "'with'",   "'async'",  "'elif'",     "'if'",
      "'or'",       "'yield'",  "'('",      "'['",        null,
      "')'",        "']'",      null,       "'.'",        "':'",
      "','",        "';'",      "'+'",      "'-'",        "'*'",
      "'/'",        "'|'",      "'&'",      "'<'",        "'>'",
      "'='",        "'%'",      "'=='",     "'!='",       "'<='",
      "'>='",       "'~'",      "'^'",      "'<<'",       "'>>'",
      "'**'",       "'+='",     "'-='",     "'*='",       "'/='",
      "'%='",       "'&='",     "'|='",     "'^='",       "'<<='",
      "'>>='",      "'**='",    "'//'",     "'//='",      "'@'",
      "'@='",       "'->'",     "'...'",    "':='",       "'!'"
    ],
    symbolicNames: [
      null,                    'INDENT',         'DEDENT',
      'TYPE_COMMENT',          'FSTRING_START',  'FSTRING_MIDDLE',
      'FSTRING_END',           'FALSE',          'AWAIT',
      'ELSE',                  'IMPORT',         'PASS',
      'NONE',                  'BREAK',          'EXCEPT',
      'IN',                    'RAISE',          'TRUE',
      'CLASS',                 'FINALLY',        'IS',
      'RETURN',                'AND',            'CONTINUE',
      'FOR',                   'LAMBDA',         'TRY',
      'AS',                    'DEF',            'FROM',
      'NONLOCAL',              'WHILE',          'ASSERT',
      'DEL',                   'GLOBAL',         'NOT',
      'WITH',                  'ASYNC',          'ELIF',
      'IF',                    'OR',             'YIELD',
      'LPAR',                  'LSQB',           'LBRACE',
      'RPAR',                  'RSQB',           'RBRACE',
      'DOT',                   'COLON',          'COMMA',
      'SEMI',                  'PLUS',           'MINUS',
      'STAR',                  'SLASH',          'VBAR',
      'AMPER',                 'LESS',           'GREATER',
      'EQUAL',                 'PERCENT',        'EQEQUAL',
      'NOTEQUAL',              'LESSEQUAL',      'GREATEREQUAL',
      'TILDE',                 'CIRCUMFLEX',     'LEFTSHIFT',
      'RIGHTSHIFT',            'DOUBLESTAR',     'PLUSEQUAL',
      'MINEQUAL',              'STAREQUAL',      'SLASHEQUAL',
      'PERCENTEQUAL',          'AMPEREQUAL',     'VBAREQUAL',
      'CIRCUMFLEXEQUAL',       'LEFTSHIFTEQUAL', 'RIGHTSHIFTEQUAL',
      'DOUBLESTAREQUAL',       'DOUBLESLASH',    'DOUBLESLASHEQUAL',
      'AT',                    'ATEQUAL',        'RARROW',
      'ELLIPSIS',              'COLONEQUAL',     'EXCLAMATION',
      'NAME',                  'NUMBER',         'STRING',
      'NEWLINE',               'COMMENT',        'WS',
      'EXPLICIT_LINE_JOINING', 'ERRORTOKEN'
    ]
  },
  ruleIndex: 59
}
Visiting Except Block
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
error
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visit Strings Atom
Visiting Strings
Visiting string
TESTE





"General error occurred"
RESULT





let error = "General error occurred";
IM RETURNING: catch (e) {
		let error = "General error occurred";
}
catch (e) {
		let error = "General error occurred";
}

catch (e) {
		let error = "General error occurred";
}

      6) should generate correct JavaScript for a general except block
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting Try_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;






except




<ref *1> Except_blockContext {
  parentCtx: Try_stmtContext {
    parentCtx: Compound_stmtContext {
      parentCtx: [StatementContext],
      invokingState: 434,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 10
    },
    invokingState: 480,
    children: [ [Fe], [Fe], [BlockContext], [Circular *1] ],
    start: vt {
      source: [Array],
      type: 26,
      channel: 0,
      start: 0,
      stop: 2,
      tokenIndex: 0,
      line: 1,
      column: 0,
      _text: null
    },
    stop: vt {
      source: [Array],
      type: 2,
      channel: 0,
      start: 48,
      stop: 47,
      tokenIndex: 27,
      line: 4,
      column: 12,
      _text: '<DEDENT>'
    },
    exception: null,
    except_block: [Function: except_block],
    except_star_block: [Function: except_star_block],
    parser: PythonParser {
      _listeners: [Array],
      _interp: [ne],
      _stateNumber: -1,
      _input: [Pe],
      _errHandler: [_e],
      _precedenceStack: [Array],
      _ctx: null,
      buildParseTrees: true,
      _tracer: null,
      _parseListeners: null,
      _syntaxErrors: 0,
      ruleNames: [Array],
      literalNames: [Array],
      symbolicNames: [Array]
    },
    ruleIndex: 58
  },
  invokingState: 991,
  children: [
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1018 },
    ExpressionContext {
      parentCtx: [Circular *1],
      invokingState: 1019,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      disjunction: [Function: disjunction],
      parser: [PythonParser],
      ruleIndex: 104
    },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1020 },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1021 },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1026 },
    BlockContext {
      parentCtx: [Circular *1],
      invokingState: 1027,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 30
    }
  ],
  start: vt {
    source: [ [PythonLexer], [ke] ],
    type: 14,
    channel: 0,
    start: 10,
    stop: 15,
    tokenIndex: 10,
    line: 3,
    column: 0,
    _text: null
  },
  stop: vt {
    source: [ [PythonLexer], [ke] ],
    type: 2,
    channel: 0,
    start: 48,
    stop: 47,
    tokenIndex: 27,
    line: 4,
    column: 12,
    _text: '<DEDENT>'
  },
  exception: null,
  parser: <ref *2> PythonParser {
    _listeners: [ [ErrorCollector] ],
    _interp: ne {
      atn: [j],
      sharedContextCache: [se],
      parser: [Circular *2],
      decisionToDFA: [Array],
      predictionMode: 1,
      _input: [Pe],
      _startIndex: 28,
      _outerContext: [StatementsContext],
      _dfa: null,
      mergeCache: null,
      debug: false,
      debug_closure: false,
      debug_add: false,
      trace_atn_sim: false,
      dfa_debug: false,
      retry_debug: false
    },
    _stateNumber: -1,
    _input: Pe {
      tokenSource: [PythonLexer],
      tokens: [Array],
      index: 28,
      fetchedEOF: true,
      channel: 0
    },
    _errHandler: _e {
      errorRecoveryMode: false,
      lastErrorIndex: -1,
      lastErrorStates: null,
      nextTokensContext: [StatementsContext],
      nextTokenState: -1,
      nextTokensState: 432
    },
    _precedenceStack: [ 0 ],
    _ctx: null,
    buildParseTrees: true,
    _tracer: null,
    _parseListeners: null,
    _syntaxErrors: 0,
    ruleNames: [
      'file_input',
      'interactive',
      'eval',
      'func_type',
      'fstring_input',
      'statements',
      'statement',
      'statement_newline',
      'simple_stmts',
      'simple_stmt',
      'compound_stmt',
      'assignment',
      'annotated_rhs',
      'augassign',
      'return_stmt',
      'raise_stmt',
      'global_stmt',
      'nonlocal_stmt',
      'del_stmt',
      'yield_stmt',
      'assert_stmt',
      'import_stmt',
      'import_name',
      'import_from',
      'import_from_targets',
      'import_from_as_names',
      'import_from_as_name',
      'dotted_as_names',
      'dotted_as_name',
      'dotted_name',
      'block',
      'decorators',
      'class_def',
      'class_def_raw',
      'function_def',
      'function_def_raw',
      'params',
      'parameters',
      'slash_no_default',
      'slash_with_default',
      'star_etc',
      'kwds',
      'param_no_default',
      'param_no_default_star_annotation',
      'param_with_default',
      'param_maybe_default',
      'param',
      'param_star_annotation',
      'annotation',
      'star_annotation',
      'default_assignment',
      'if_stmt',
      'elif_stmt',
      'else_block',
      'while_stmt',
      'for_stmt',
      'with_stmt',
      'with_item',
      'try_stmt',
      'except_block',
      'except_star_block',
      'finally_block',
      'match_stmt',
      'subject_expr',
      'case_block',
      'guard',
      'patterns',
      'pattern',
      'as_pattern',
      'or_pattern',
      'closed_pattern',
      'literal_pattern',
      'literal_expr',
      'complex_number',
      'signed_number',
      'signed_real_number',
      'real_number',
      'imaginary_number',
      'capture_pattern',
      'pattern_capture_target',
      'wildcard_pattern',
      'value_pattern',
      'attr',
      'name_or_attr',
      'group_pattern',
      'sequence_pattern',
      'open_sequence_pattern',
      'maybe_sequence_pattern',
      'maybe_star_pattern',
      'star_pattern',
      'mapping_pattern',
      'items_pattern',
      'key_value_pattern',
      'double_star_pattern',
      'class_pattern',
      'positional_patterns',
      'keyword_patterns',
      'keyword_pattern',
      'type_alias',
      'type_params',
      ... 98 more items
    ],
    literalNames: [
      null,         null,       null,       null,         null,
      null,         null,       "'False'",  "'await'",    "'else'",
      "'import'",   "'pass'",   "'None'",   "'break'",    "'except'",
      "'in'",       "'raise'",  "'True'",   "'class'",    "'finally'",
      "'is'",       "'return'", "'and'",    "'continue'", "'for'",
      "'lambda'",   "'try'",    "'as'",     "'def'",      "'from'",
      "'nonlocal'", "'while'",  "'assert'", "'del'",      "'global'",
      "'not'",      "'with'",   "'async'",  "'elif'",     "'if'",
      "'or'",       "'yield'",  "'('",      "'['",        null,
      "')'",        "']'",      null,       "'.'",        "':'",
      "','",        "';'",      "'+'",      "'-'",        "'*'",
      "'/'",        "'|'",      "'&'",      "'<'",        "'>'",
      "'='",        "'%'",      "'=='",     "'!='",       "'<='",
      "'>='",       "'~'",      "'^'",      "'<<'",       "'>>'",
      "'**'",       "'+='",     "'-='",     "'*='",       "'/='",
      "'%='",       "'&='",     "'|='",     "'^='",       "'<<='",
      "'>>='",      "'**='",    "'//'",     "'//='",      "'@'",
      "'@='",       "'->'",     "'...'",    "':='",       "'!'"
    ],
    symbolicNames: [
      null,                    'INDENT',         'DEDENT',
      'TYPE_COMMENT',          'FSTRING_START',  'FSTRING_MIDDLE',
      'FSTRING_END',           'FALSE',          'AWAIT',
      'ELSE',                  'IMPORT',         'PASS',
      'NONE',                  'BREAK',          'EXCEPT',
      'IN',                    'RAISE',          'TRUE',
      'CLASS',                 'FINALLY',        'IS',
      'RETURN',                'AND',            'CONTINUE',
      'FOR',                   'LAMBDA',         'TRY',
      'AS',                    'DEF',            'FROM',
      'NONLOCAL',              'WHILE',          'ASSERT',
      'DEL',                   'GLOBAL',         'NOT',
      'WITH',                  'ASYNC',          'ELIF',
      'IF',                    'OR',             'YIELD',
      'LPAR',                  'LSQB',           'LBRACE',
      'RPAR',                  'RSQB',           'RBRACE',
      'DOT',                   'COLON',          'COMMA',
      'SEMI',                  'PLUS',           'MINUS',
      'STAR',                  'SLASH',          'VBAR',
      'AMPER',                 'LESS',           'GREATER',
      'EQUAL',                 'PERCENT',        'EQEQUAL',
      'NOTEQUAL',              'LESSEQUAL',      'GREATEREQUAL',
      'TILDE',                 'CIRCUMFLEX',     'LEFTSHIFT',
      'RIGHTSHIFT',            'DOUBLESTAR',     'PLUSEQUAL',
      'MINEQUAL',              'STAREQUAL',      'SLASHEQUAL',
      'PERCENTEQUAL',          'AMPEREQUAL',     'VBAREQUAL',
      'CIRCUMFLEXEQUAL',       'LEFTSHIFTEQUAL', 'RIGHTSHIFTEQUAL',
      'DOUBLESTAREQUAL',       'DOUBLESLASH',    'DOUBLESLASHEQUAL',
      'AT',                    'ATEQUAL',        'RARROW',
      'ELLIPSIS',              'COLONEQUAL',     'EXCLAMATION',
      'NAME',                  'NUMBER',         'STRING',
      'NEWLINE',               'COMMENT',        'WS',
      'EXPLICIT_LINE_JOINING', 'ERRORTOKEN'
    ]
  },
  ruleIndex: 59
}
Visiting Except Block
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
error
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





err
RESULT





let error = err;
      ✔ should throw an error for unsupported exception types
    finally block
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting Try_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;






except





Visiting finally
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
cleanup
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true
RESULT





let cleanup = true;
      7) should generate correct JavaScript for a simple finally block
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting Try_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;






except





Visiting finally
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
cleanup1
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true
RESULT





let cleanup1 = true;
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
cleanup2
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





false
RESULT





let cleanup2 = false;
      8) should generate correct JavaScript for a finally block with multiple statements
    try statement
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting Try_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;






except




<ref *1> Except_blockContext {
  parentCtx: Try_stmtContext {
    parentCtx: Compound_stmtContext {
      parentCtx: [StatementContext],
      invokingState: 434,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 10
    },
    invokingState: 480,
    children: [
      [Fe],
      [Fe],
      [BlockContext],
      [Circular *1],
      [Finally_blockContext]
    ],
    start: vt {
      source: [Array],
      type: 26,
      channel: 0,
      start: 0,
      stop: 2,
      tokenIndex: 0,
      line: 1,
      column: 0,
      _text: null
    },
    stop: vt {
      source: [Array],
      type: 2,
      channel: 0,
      start: 68,
      stop: 67,
      tokenIndex: 39,
      line: 6,
      column: 15,
      _text: '<DEDENT>'
    },
    exception: null,
    except_block: [Function: except_block],
    except_star_block: [Function: except_star_block],
    parser: PythonParser {
      _listeners: [Array],
      _interp: [ne],
      _stateNumber: -1,
      _input: [Pe],
      _errHandler: [_e],
      _precedenceStack: [Array],
      _ctx: null,
      buildParseTrees: true,
      _tracer: null,
      _parseListeners: null,
      _syntaxErrors: 0,
      ruleNames: [Array],
      literalNames: [Array],
      symbolicNames: [Array]
    },
    ruleIndex: 58
  },
  invokingState: 991,
  children: [
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1018 },
    ExpressionContext {
      parentCtx: [Circular *1],
      invokingState: 1019,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      disjunction: [Function: disjunction],
      parser: [PythonParser],
      ruleIndex: 104
    },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1020 },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1021 },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1026 },
    BlockContext {
      parentCtx: [Circular *1],
      invokingState: 1027,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 30
    }
  ],
  start: vt {
    source: [ [PythonLexer], [ke] ],
    type: 14,
    channel: 0,
    start: 10,
    stop: 15,
    tokenIndex: 10,
    line: 3,
    column: 0,
    _text: null
  },
  stop: vt {
    source: [ [PythonLexer], [ke] ],
    type: 2,
    channel: 0,
    start: 44,
    stop: 43,
    tokenIndex: 27,
    line: 5,
    column: 0,
    _text: '<DEDENT>'
  },
  exception: null,
  parser: <ref *2> PythonParser {
    _listeners: [ [ErrorCollector] ],
    _interp: ne {
      atn: [j],
      sharedContextCache: [se],
      parser: [Circular *2],
      decisionToDFA: [Array],
      predictionMode: 1,
      _input: [Pe],
      _startIndex: 40,
      _outerContext: [StatementsContext],
      _dfa: null,
      mergeCache: null,
      debug: false,
      debug_closure: false,
      debug_add: false,
      trace_atn_sim: false,
      dfa_debug: false,
      retry_debug: false
    },
    _stateNumber: -1,
    _input: Pe {
      tokenSource: [PythonLexer],
      tokens: [Array],
      index: 40,
      fetchedEOF: true,
      channel: 0
    },
    _errHandler: _e {
      errorRecoveryMode: false,
      lastErrorIndex: -1,
      lastErrorStates: null,
      nextTokensContext: [StatementsContext],
      nextTokenState: -1,
      nextTokensState: 432
    },
    _precedenceStack: [ 0 ],
    _ctx: null,
    buildParseTrees: true,
    _tracer: null,
    _parseListeners: null,
    _syntaxErrors: 0,
    ruleNames: [
      'file_input',
      'interactive',
      'eval',
      'func_type',
      'fstring_input',
      'statements',
      'statement',
      'statement_newline',
      'simple_stmts',
      'simple_stmt',
      'compound_stmt',
      'assignment',
      'annotated_rhs',
      'augassign',
      'return_stmt',
      'raise_stmt',
      'global_stmt',
      'nonlocal_stmt',
      'del_stmt',
      'yield_stmt',
      'assert_stmt',
      'import_stmt',
      'import_name',
      'import_from',
      'import_from_targets',
      'import_from_as_names',
      'import_from_as_name',
      'dotted_as_names',
      'dotted_as_name',
      'dotted_name',
      'block',
      'decorators',
      'class_def',
      'class_def_raw',
      'function_def',
      'function_def_raw',
      'params',
      'parameters',
      'slash_no_default',
      'slash_with_default',
      'star_etc',
      'kwds',
      'param_no_default',
      'param_no_default_star_annotation',
      'param_with_default',
      'param_maybe_default',
      'param',
      'param_star_annotation',
      'annotation',
      'star_annotation',
      'default_assignment',
      'if_stmt',
      'elif_stmt',
      'else_block',
      'while_stmt',
      'for_stmt',
      'with_stmt',
      'with_item',
      'try_stmt',
      'except_block',
      'except_star_block',
      'finally_block',
      'match_stmt',
      'subject_expr',
      'case_block',
      'guard',
      'patterns',
      'pattern',
      'as_pattern',
      'or_pattern',
      'closed_pattern',
      'literal_pattern',
      'literal_expr',
      'complex_number',
      'signed_number',
      'signed_real_number',
      'real_number',
      'imaginary_number',
      'capture_pattern',
      'pattern_capture_target',
      'wildcard_pattern',
      'value_pattern',
      'attr',
      'name_or_attr',
      'group_pattern',
      'sequence_pattern',
      'open_sequence_pattern',
      'maybe_sequence_pattern',
      'maybe_star_pattern',
      'star_pattern',
      'mapping_pattern',
      'items_pattern',
      'key_value_pattern',
      'double_star_pattern',
      'class_pattern',
      'positional_patterns',
      'keyword_patterns',
      'keyword_pattern',
      'type_alias',
      'type_params',
      ... 98 more items
    ],
    literalNames: [
      null,         null,       null,       null,         null,
      null,         null,       "'False'",  "'await'",    "'else'",
      "'import'",   "'pass'",   "'None'",   "'break'",    "'except'",
      "'in'",       "'raise'",  "'True'",   "'class'",    "'finally'",
      "'is'",       "'return'", "'and'",    "'continue'", "'for'",
      "'lambda'",   "'try'",    "'as'",     "'def'",      "'from'",
      "'nonlocal'", "'while'",  "'assert'", "'del'",      "'global'",
      "'not'",      "'with'",   "'async'",  "'elif'",     "'if'",
      "'or'",       "'yield'",  "'('",      "'['",        null,
      "')'",        "']'",      null,       "'.'",        "':'",
      "','",        "';'",      "'+'",      "'-'",        "'*'",
      "'/'",        "'|'",      "'&'",      "'<'",        "'>'",
      "'='",        "'%'",      "'=='",     "'!='",       "'<='",
      "'>='",       "'~'",      "'^'",      "'<<'",       "'>>'",
      "'**'",       "'+='",     "'-='",     "'*='",       "'/='",
      "'%='",       "'&='",     "'|='",     "'^='",       "'<<='",
      "'>>='",      "'**='",    "'//'",     "'//='",      "'@'",
      "'@='",       "'->'",     "'...'",    "':='",       "'!'"
    ],
    symbolicNames: [
      null,                    'INDENT',         'DEDENT',
      'TYPE_COMMENT',          'FSTRING_START',  'FSTRING_MIDDLE',
      'FSTRING_END',           'FALSE',          'AWAIT',
      'ELSE',                  'IMPORT',         'PASS',
      'NONE',                  'BREAK',          'EXCEPT',
      'IN',                    'RAISE',          'TRUE',
      'CLASS',                 'FINALLY',        'IS',
      'RETURN',                'AND',            'CONTINUE',
      'FOR',                   'LAMBDA',         'TRY',
      'AS',                    'DEF',            'FROM',
      'NONLOCAL',              'WHILE',          'ASSERT',
      'DEL',                   'GLOBAL',         'NOT',
      'WITH',                  'ASYNC',          'ELIF',
      'IF',                    'OR',             'YIELD',
      'LPAR',                  'LSQB',           'LBRACE',
      'RPAR',                  'RSQB',           'RBRACE',
      'DOT',                   'COLON',          'COMMA',
      'SEMI',                  'PLUS',           'MINUS',
      'STAR',                  'SLASH',          'VBAR',
      'AMPER',                 'LESS',           'GREATER',
      'EQUAL',                 'PERCENT',        'EQEQUAL',
      'NOTEQUAL',              'LESSEQUAL',      'GREATEREQUAL',
      'TILDE',                 'CIRCUMFLEX',     'LEFTSHIFT',
      'RIGHTSHIFT',            'DOUBLESTAR',     'PLUSEQUAL',
      'MINEQUAL',              'STAREQUAL',      'SLASHEQUAL',
      'PERCENTEQUAL',          'AMPEREQUAL',     'VBAREQUAL',
      'CIRCUMFLEXEQUAL',       'LEFTSHIFTEQUAL', 'RIGHTSHIFTEQUAL',
      'DOUBLESTAREQUAL',       'DOUBLESLASH',    'DOUBLESLASHEQUAL',
      'AT',                    'ATEQUAL',        'RARROW',
      'ELLIPSIS',              'COLONEQUAL',     'EXCLAMATION',
      'NAME',                  'NUMBER',         'STRING',
      'NEWLINE',               'COMMENT',        'WS',
      'EXPLICIT_LINE_JOINING', 'ERRORTOKEN'
    ]
  },
  ruleIndex: 59
}
Visiting Except Block
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
error
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





e
RESULT





let error = e;
IM RETURNING: catch (e) {
		let error = e;
}
catch (e) {
		let error = e;
}

catch (e) {
		let error = e;
}

Visiting finally
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
cleanup
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true
RESULT





let cleanup = true;
      9) should generate correct JavaScript for a try statement with except and finally
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting Try_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;






except





Visiting Except star Block
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
error
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visit Strings Atom
Visiting Strings
Visiting string
TESTE





"General error"
RESULT





let error = "General error";
Visiting finally
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
cleanup
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true
RESULT





let cleanup = true;
      ✔ should generate correct JavaScript for a try statement with except* and finally
Visiting file_input
Visiting statements
Visiting statement
Visiting compound_stmt
Visiting Try_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;






except




<ref *1> Except_blockContext {
  parentCtx: Try_stmtContext {
    parentCtx: Compound_stmtContext {
      parentCtx: [StatementContext],
      invokingState: 434,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 10
    },
    invokingState: 480,
    children: [
      [Fe],
      [Fe],
      [BlockContext],
      [Circular *1],
      [Else_blockContext],
      [Finally_blockContext]
    ],
    start: vt {
      source: [Array],
      type: 26,
      channel: 0,
      start: 0,
      stop: 2,
      tokenIndex: 0,
      line: 1,
      column: 0,
      _text: null
    },
    stop: vt {
      source: [Array],
      type: 2,
      channel: 0,
      start: 91,
      stop: 90,
      tokenIndex: 47,
      line: 8,
      column: 15,
      _text: '<DEDENT>'
    },
    exception: null,
    except_block: [Function: except_block],
    except_star_block: [Function: except_star_block],
    parser: PythonParser {
      _listeners: [Array],
      _interp: [ne],
      _stateNumber: -1,
      _input: [Pe],
      _errHandler: [_e],
      _precedenceStack: [Array],
      _ctx: null,
      buildParseTrees: true,
      _tracer: null,
      _parseListeners: null,
      _syntaxErrors: 0,
      ruleNames: [Array],
      literalNames: [Array],
      symbolicNames: [Array]
    },
    ruleIndex: 58
  },
  invokingState: 991,
  children: [
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1018 },
    ExpressionContext {
      parentCtx: [Circular *1],
      invokingState: 1019,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      disjunction: [Function: disjunction],
      parser: [PythonParser],
      ruleIndex: 104
    },
    Fe { parentCtx: [Circular *1], symbol: [vt], invokingState: 1026 },
    BlockContext {
      parentCtx: [Circular *1],
      invokingState: 1027,
      children: [Array],
      start: [vt],
      stop: [vt],
      exception: null,
      parser: [PythonParser],
      ruleIndex: 30
    }
  ],
  start: vt {
    source: [ [PythonLexer], [ke] ],
    type: 14,
    channel: 0,
    start: 10,
    stop: 15,
    tokenIndex: 10,
    line: 3,
    column: 0,
    _text: null
  },
  stop: vt {
    source: [ [PythonLexer], [ke] ],
    type: 2,
    channel: 0,
    start: 45,
    stop: 44,
    tokenIndex: 23,
    line: 5,
    column: 0,
    _text: '<DEDENT>'
  },
  exception: null,
  parser: <ref *2> PythonParser {
    _listeners: [ [ErrorCollector] ],
    _interp: ne {
      atn: [j],
      sharedContextCache: [se],
      parser: [Circular *2],
      decisionToDFA: [Array],
      predictionMode: 1,
      _input: [Pe],
      _startIndex: 48,
      _outerContext: [StatementsContext],
      _dfa: null,
      mergeCache: null,
      debug: false,
      debug_closure: false,
      debug_add: false,
      trace_atn_sim: false,
      dfa_debug: false,
      retry_debug: false
    },
    _stateNumber: -1,
    _input: Pe {
      tokenSource: [PythonLexer],
      tokens: [Array],
      index: 48,
      fetchedEOF: true,
      channel: 0
    },
    _errHandler: _e {
      errorRecoveryMode: false,
      lastErrorIndex: -1,
      lastErrorStates: null,
      nextTokensContext: [StatementsContext],
      nextTokenState: -1,
      nextTokensState: 432
    },
    _precedenceStack: [ 0 ],
    _ctx: null,
    buildParseTrees: true,
    _tracer: null,
    _parseListeners: null,
    _syntaxErrors: 0,
    ruleNames: [
      'file_input',
      'interactive',
      'eval',
      'func_type',
      'fstring_input',
      'statements',
      'statement',
      'statement_newline',
      'simple_stmts',
      'simple_stmt',
      'compound_stmt',
      'assignment',
      'annotated_rhs',
      'augassign',
      'return_stmt',
      'raise_stmt',
      'global_stmt',
      'nonlocal_stmt',
      'del_stmt',
      'yield_stmt',
      'assert_stmt',
      'import_stmt',
      'import_name',
      'import_from',
      'import_from_targets',
      'import_from_as_names',
      'import_from_as_name',
      'dotted_as_names',
      'dotted_as_name',
      'dotted_name',
      'block',
      'decorators',
      'class_def',
      'class_def_raw',
      'function_def',
      'function_def_raw',
      'params',
      'parameters',
      'slash_no_default',
      'slash_with_default',
      'star_etc',
      'kwds',
      'param_no_default',
      'param_no_default_star_annotation',
      'param_with_default',
      'param_maybe_default',
      'param',
      'param_star_annotation',
      'annotation',
      'star_annotation',
      'default_assignment',
      'if_stmt',
      'elif_stmt',
      'else_block',
      'while_stmt',
      'for_stmt',
      'with_stmt',
      'with_item',
      'try_stmt',
      'except_block',
      'except_star_block',
      'finally_block',
      'match_stmt',
      'subject_expr',
      'case_block',
      'guard',
      'patterns',
      'pattern',
      'as_pattern',
      'or_pattern',
      'closed_pattern',
      'literal_pattern',
      'literal_expr',
      'complex_number',
      'signed_number',
      'signed_real_number',
      'real_number',
      'imaginary_number',
      'capture_pattern',
      'pattern_capture_target',
      'wildcard_pattern',
      'value_pattern',
      'attr',
      'name_or_attr',
      'group_pattern',
      'sequence_pattern',
      'open_sequence_pattern',
      'maybe_sequence_pattern',
      'maybe_star_pattern',
      'star_pattern',
      'mapping_pattern',
      'items_pattern',
      'key_value_pattern',
      'double_star_pattern',
      'class_pattern',
      'positional_patterns',
      'keyword_patterns',
      'keyword_pattern',
      'type_alias',
      'type_params',
      ... 98 more items
    ],
    literalNames: [
      null,         null,       null,       null,         null,
      null,         null,       "'False'",  "'await'",    "'else'",
      "'import'",   "'pass'",   "'None'",   "'break'",    "'except'",
      "'in'",       "'raise'",  "'True'",   "'class'",    "'finally'",
      "'is'",       "'return'", "'and'",    "'continue'", "'for'",
      "'lambda'",   "'try'",    "'as'",     "'def'",      "'from'",
      "'nonlocal'", "'while'",  "'assert'", "'del'",      "'global'",
      "'not'",      "'with'",   "'async'",  "'elif'",     "'if'",
      "'or'",       "'yield'",  "'('",      "'['",        null,
      "')'",        "']'",      null,       "'.'",        "':'",
      "','",        "';'",      "'+'",      "'-'",        "'*'",
      "'/'",        "'|'",      "'&'",      "'<'",        "'>'",
      "'='",        "'%'",      "'=='",     "'!='",       "'<='",
      "'>='",       "'~'",      "'^'",      "'<<'",       "'>>'",
      "'**'",       "'+='",     "'-='",     "'*='",       "'/='",
      "'%='",       "'&='",     "'|='",     "'^='",       "'<<='",
      "'>>='",      "'**='",    "'//'",     "'//='",      "'@'",
      "'@='",       "'->'",     "'...'",    "':='",       "'!'"
    ],
    symbolicNames: [
      null,                    'INDENT',         'DEDENT',
      'TYPE_COMMENT',          'FSTRING_START',  'FSTRING_MIDDLE',
      'FSTRING_END',           'FALSE',          'AWAIT',
      'ELSE',                  'IMPORT',         'PASS',
      'NONE',                  'BREAK',          'EXCEPT',
      'IN',                    'RAISE',          'TRUE',
      'CLASS',                 'FINALLY',        'IS',
      'RETURN',                'AND',            'CONTINUE',
      'FOR',                   'LAMBDA',         'TRY',
      'AS',                    'DEF',            'FROM',
      'NONLOCAL',              'WHILE',          'ASSERT',
      'DEL',                   'GLOBAL',         'NOT',
      'WITH',                  'ASYNC',          'ELIF',
      'IF',                    'OR',             'YIELD',
      'LPAR',                  'LSQB',           'LBRACE',
      'RPAR',                  'RSQB',           'RBRACE',
      'DOT',                   'COLON',          'COMMA',
      'SEMI',                  'PLUS',           'MINUS',
      'STAR',                  'SLASH',          'VBAR',
      'AMPER',                 'LESS',           'GREATER',
      'EQUAL',                 'PERCENT',        'EQEQUAL',
      'NOTEQUAL',              'LESSEQUAL',      'GREATEREQUAL',
      'TILDE',                 'CIRCUMFLEX',     'LEFTSHIFT',
      'RIGHTSHIFT',            'DOUBLESTAR',     'PLUSEQUAL',
      'MINEQUAL',              'STAREQUAL',      'SLASHEQUAL',
      'PERCENTEQUAL',          'AMPEREQUAL',     'VBAREQUAL',
      'CIRCUMFLEXEQUAL',       'LEFTSHIFTEQUAL', 'RIGHTSHIFTEQUAL',
      'DOUBLESTAREQUAL',       'DOUBLESLASH',    'DOUBLESLASHEQUAL',
      'AT',                    'ATEQUAL',        'RARROW',
      'ELLIPSIS',              'COLONEQUAL',     'EXCLAMATION',
      'NAME',                  'NUMBER',         'STRING',
      'NEWLINE',               'COMMENT',        'WS',
      'EXPLICIT_LINE_JOINING', 'ERRORTOKEN'
    ]
  },
  ruleIndex: 59
}
Visiting Except Block
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
error
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visit Strings Atom
Visiting Strings
Visiting string
TESTE





"Error"
RESULT





let error = "Error";
IM RETURNING: catch (e) {
		let error = "Error";
}
catch (e) {
		let error = "Error";
}

catch (e) {
		let error = "Error";
}

Visiting else_stmt
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
success
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true
RESULT





let success = true;
Visiting finally
Visiting block
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
cleanup
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true
RESULT





let cleanup = true;
      10) should generate correct JavaScript for a try statement with else and finally
    bitwise_or
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 | 3
RESULT





5 | 3
      ✔ should generate JavaScript for bitwise OR between two numbers
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





y | b
RESULT





y | b
      ✔ should generate JavaScript for bitwise OR between two variables
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 | 3 ) | ( 8 | 2 )
RESULT





( 5 | 3 ) | ( 8 | 2 )
      ✔ should generate JavaScript for complex bitwise OR operation
    comparison
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting eq_bitwise_or
visitEq_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





a == b
RESULT





a == b
      ✔ should generate JavaScript for a simple comparison between two operands
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting eq_bitwise_or
visitEq_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting noteq_bitwise_or
visitNoteq_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





a == b != c
RESULT





a == b != c
      ✔ should generate JavaScript for a comparison with multiple operands
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting lte_bitwise_or
visitLte_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting gt_bitwise_or
visitGt_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





a <= b > c
RESULT





a <= b > c
      ✔ should generate JavaScript for comparisons with different operators
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting eq_bitwise_or
visitEq_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting noteq_bitwise_or
visitNoteq_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting lte_bitwise_or
visitLte_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





a == b != c <= d
RESULT





a == b != c <= d
      ✔ should generate JavaScript for complex comparisons with multiple operators
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting eq_bitwise_or
visitEq_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting noteq_bitwise_or
visitNoteq_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting lte_bitwise_or
visitLte_bitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( a == b ) != ( c <= d )
RESULT





( a == b ) != ( c <= d )
      ✔ should generate JavaScript for nested comparisons
    bitwise_xor
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 ^ 3
RESULT





5 ^ 3
      ✔ should generate JavaScript for bitwise XOR between two numbers
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 ^ 3 ) ^ 2
RESULT





( 5 ^ 3 ) ^ 2
      ✔ should generate JavaScript for nested XOR operations
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





a ^ b
RESULT





a ^ b
      ✔ should generate JavaScript for XOR between variables
    bitwise_and
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 & 3
RESULT





5 & 3
      ✔ should generate JavaScript for bitwise AND between two numbers
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 & 3 ) & 1
RESULT





( 5 & 3 ) & 1
      ✔ should generate JavaScript for nested AND operations
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





a & b
RESULT





a & b
      ✔ should generate JavaScript for AND between variables
    shift_expr
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 << 1
RESULT





5 << 1
      ✔ should generate JavaScript for left shift
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 >> 1
RESULT





5 >> 1
      ✔ should generate JavaScript for right shift
    sum
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 + 2
RESULT





5 + 2
      ✔ should generate JavaScript for addition
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 - 2
RESULT





5 - 2
      ✔ should generate JavaScript for subtraction
    nonlocal
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting non local
RESULT






Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





7
RESULT





let x = 7;
      ✔ should generate javascript for non local assignment
    global
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting global
RESULT






Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





7
RESULT





let x = 7;
      ✔ should generate javascript for global
    term
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 * 2
RESULT





5 * 2
      ✔ should generate JavaScript for multiplication
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 / 2
RESULT





5 / 2
      ✔ should generate JavaScript for division
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





Math.floor(5 / 2)
RESULT





Math.floor(5 / 2)
      ✔ should generate JavaScript for floor division
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 % 2
RESULT





5 % 2
      ✔ should generate JavaScript for modulus
    factor
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





+ ( 5 )
RESULT





+ ( 5 )
      ✔ should generate JavaScript for unary plus
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





- ( 5 )
RESULT





- ( 5 )
      ✔ should generate JavaScript for unary minus
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





~ ( 5 )
RESULT





~ ( 5 )
      ✔ should generate JavaScript for bitwise NOT
    power
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





Math.pow(5,2)
RESULT





Math.pow(5,2)
      ✔ should generate JavaScript for exponentiation
    atom
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





5
      ✔ should generate integer number
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5.5
RESULT





5.5
      ✔ should generate float number
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true
RESULT





true
      ✔ should generate true boolean
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





false
RESULT





false
      ✔ should generate false boolean
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





null
RESULT





null
      ✔ should generate None
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visit Strings Atom
Visiting Strings
Visiting string
TESTE





'Hello'
RESULT





'Hello'
      ✔ should generate string
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting tuple
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting star_named_expressions
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





[1,2,3]
RESULT





[1,2,3]
      ✔ should generate tuple
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting list
Visiting star_named_expressions
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





[1,2,3]
RESULT





[1,2,3]
      ✔ should generate list
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting dict
Visiting double_starred_kvpairs
Visiting double_starred_kvpair
Visiting kvpair
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visit Strings Atom
Visiting Strings
Visiting string
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visit Strings Atom
Visiting Strings
Visiting string
Visiting double_starred_kvpair
Visiting kvpair
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visit Strings Atom
Visiting Strings
Visiting string
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





{"key":"value","number":1}
RESULT





{"key":"value","number":1}
      ✔ should generate dictionary
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting set
Visiting star_named_expressions
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





new Set([1,2,3])
RESULT





new Set([1,2,3])
      ✔ should generate set
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





...
RESULT





...
      ✔ should generate ellipsis
    return
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting Return
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





x + 1
RESULT





return x + 1;
      ✔ should generate JavaScript from Python return with expression
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting Return
RESULT





return;
      ✔ should generate JavaScript from Python return without expression
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting Return
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





x, y
RESULT





return [x, y];
      ✔ should generate JavaScript from Python return with multiple expressions
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting Return
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





foo,,5,
RESULT





return [foo,,5,];
      11) should generate JavaScript from Python return with a function call
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting Return
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





- x
RESULT





return - x;
      ✔ should generate JavaScript from Python return with a unary operator
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting Return
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





x * y
RESULT





return x * y;
      ✔ should generate JavaScript from Python return with a binary expression
    assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
Visiting star_targets_tuple_seq
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
(a, b)
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting tuple
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting star_named_expressions
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





[1,2]
RESULT





let (a, b) = [1,2];
      12) should generate JavaScript from Python tuple assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visit Strings Atom
Visiting Strings
Visiting fstring
Visiting fstring_middle
Visiting fstring_middle
Visiting fstring_replacement_field
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





value
TESTE





`teste ${ value }`
RESULT





let x = `teste ${ value }`;
      ✔ should generate JavaScript from Python f-string
      13) should generate JavaScript from Python subscript assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
Visiting star_target
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
...a, ...b
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting tuple
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting star_named_expressions
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





[1,2,3,4]
RESULT





let ...a, ...b = [1,2,3,4];
      14) should generate JavaScript from Python star target assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
a
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
a, b
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





2, 3
RESULT





let a = 5;; let a, b = 2, 3;
      15) should generate JavaScript from Python star target assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
+=
RESULT





let x += 5;
      ✔ should generate JavaScript from Python augmented assignment (+=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
+=
RESULT





let x += 5;
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





6
Visiting augassign
visitAugassign
AUGASSIGN
+=
RESULT





x += 6;
      ✔ should generate JavaScript from Python augmented assignment (+=) repeated
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
-=
RESULT





let x -= 5;
      ✔ should generate JavaScript from Python augmented assignment (-=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
*=
RESULT





let x *= 5;
      ✔ should generate JavaScript from Python augmented assignment (*=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
/=
RESULT





let x /= 5;
      ✔ should generate JavaScript from Python augmented assignment (/=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
%=
RESULT





let x %= 5;
      ✔ should generate JavaScript from Python augmented assignment (%=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
|=
RESULT





let x |= 5;
      ✔ should generate JavaScript from Python augmented assignment (|=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
&=
RESULT





let x &= 5;
      ✔ should generate JavaScript from Python augmented assignment (&=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
^=
RESULT





let x ^= 5;
      ✔ should generate JavaScript from Python augmented assignment (^=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
<<=
RESULT





let x <<= 5;
      ✔ should generate JavaScript from Python augmented assignment (<<=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting single_target
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
Visiting augassign
visitAugassign
AUGASSIGN
>>=
RESULT





let x >>= 5;
      ✔ should generate JavaScript from Python augmented assignment (>>=)
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

FIRST
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;
      ✔ should generate JavaScript from Python assignment with type comment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;
      ✔ should generate JavaScript from Python for simple assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5
RESULT





let x = 5;
      ✔ should generate JavaScript from Python for simple assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 + 2
RESULT





let x = 5 + 2;
      ✔ should generate JavaScript from Python sum assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 - 2
RESULT





let x = 5 - 2;
      ✔ should generate JavaScript from Python minus assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 * 2
RESULT





let x = 5 * 2;
      ✔ should generate JavaScript from Python multiplication assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 / 2
RESULT





let x = 5 / 2;
      ✔ should generate JavaScript from Python division assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 % 2
RESULT





let x = 5 % 2;
      ✔ should generate JavaScript from Python mod assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





Math.floor(5 / 2)
RESULT





let x = Math.floor(5 / 2);
      ✔ should generate JavaScript from Python floor division assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





+ ( 5 ) % 2
RESULT





let x = + ( 5 ) % 2;
      ✔ should generate JavaScript from Python + factor and plus assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





- ( 5 ) - 2
RESULT





let x = - ( 5 ) - 2;
      ✔ should generate JavaScript from Python - factor and minus assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





~ ( 5 ) + 2
RESULT





let x = ~ ( 5 ) + 2;
      ✔ should generate JavaScript from Python ~ factor and + assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 || 2 )
RESULT





let x = ( 5 || 2 );
      ✔ should generate JavaScript from Python - factor and logical OR assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





~ 5 || 2
RESULT





let x = ~ 5 || 2;
      ✔ should generate JavaScript from Python ~ factor and logical OR assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true || false || true
RESULT





let x = true || false || true;
      ✔ should generate JavaScript from Python with multiple ors as true and false
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 + 2 ) * 3
RESULT





let x = ( 5 + 2 ) * 3;
      ✔ should generate JavaScript from Python with multiple ors as true and false
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 + ( 6 * 3 ) ) * 3
RESULT





let x = ( 5 + ( 6 * 3 ) ) * 3;
      ✔ should generate JavaScript from Python with multiple ors as true and false
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 && 2 )
RESULT





let x = ( 5 && 2 );
      ✔ should generate JavaScript from Python - factor and logical AND assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





~ 5 && 2
RESULT





let x = ~ 5 && 2;
      ✔ should generate JavaScript from Python ~ factor and logical AND assignment
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





true && false && true
RESULT





let x = true && false && true;
      ✔ should generate JavaScript from Python with multiple ands as true and false
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





! ( true && false )
RESULT





let x = ! ( true && false );
      ✔ should handle complex logical expressions
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 | 3
RESULT





let x = 5 | 3;
      ✔ should generate JavaScript for bitwise OR between two numbers
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





y | b
RESULT





let x = y | b;
      ✔ should generate JavaScript for bitwise OR between two variables
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 | 3 ) | ( 8 | 2 )
RESULT





let x = ( 5 | 3 ) | ( 8 | 2 );
      ✔ should generate JavaScript for complex bitwise OR operation
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 ^ 3
RESULT





let x = 5 ^ 3;
      ✔ should generate JavaScript for bitwise XOR between two numbers
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 ^ 3 ) ^ 2
RESULT





let x = ( 5 ^ 3 ) ^ 2;
      ✔ should generate JavaScript for nested XOR operations
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





a ^ b
RESULT





let x = a ^ b;
      ✔ should generate JavaScript for XOR between variables
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





5 & 3
RESULT





let x = 5 & 3;
      ✔ should generate JavaScript for bitwise AND between two numbers
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting group
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





( 5 & 3 ) & 1
RESULT





let x = ( 5 & 3 ) & 1;
      ✔ should generate JavaScript for nested AND operations
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assignment
visitAssignment

Visiting star_targets
Visiting star_target
Visiting target_with_star_atom
Visiting star_atom
x
Visiting star expressions
Visiting star expression
Visiting disjunction
Visiting conjunction
Visiting inversion
Visiting comparison
visitComparison
Visiting bitwise_or
visitBitwise_or
Visiting bitwise_xor
visitBitwise_xor
Visiting bitwise_and
visitBitwise_and
Visiting bitwise_and
visitBitwise_and
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
Visiting shift_expr
visitShift_expr
Visiting sum
Visiting term
Visiting factor
Visiting power
Visiting await_primary
Visiting atom
TESTE





a & b
RESULT





let x = a & b;
      ✔ should generate JavaScript for AND between variables
    assert statement
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assert
RESULT





if (!(x==5)) {
  throw new Error("Assertion failed : x==5 ");
}
if (!(x==5)) {
  throw new Error("Assertion failed : x==5 ");
}
      ✔ should generate JavaScript for assert without a message
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting assert
RESULT





if (!(x==5)) {
  throw new Error("x should be 5");
}
if (!(x==5)) {
  throw new Error("x should be 5");
}
      ✔ should generate JavaScript for assert with a message
    Raise
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting Raise
RESULT





throw new Error("Something went wrong");
throw new Error("Something went wrong");
      ✔ should generate correct JavaScript for raise without from
Visiting file_input
Visiting statements
Visiting statement
Visiting simple_stmts
Visiting simple_stmt
Visiting Raise
RESULT





throw new Error("Something went wrong", { cause: e });
throw new Error("Something went wrong", { cause: e });
      ✔ should generate correct JavaScript for raise with from


  102 passing (1s)
  15 failing

  1) Python
       Python to JavaScript translation: for statement
         should generate correct JavaScript for a simple for loop:

      AssertionError: expected 'for (const item of items) {\n\t\tprin…' to equal 'for (const item of items) {\n\t\tcons…'
      + expected - actual

       for (const item of items) {
      -		print,,item,
      +		console.log(item);
       }
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:80:31)
      at process.processImmediate (node:internal/timers:478:21)

  2) Python
       Python to JavaScript translation: for statement
         should handle a for loop with step increments in the range:

      AssertionError: expected 'for (const i of range,,0,,10,,2,) {\n…' to equal 'for (let i = 0; i < 10; i += 2) {\n\t…'
      + expected - actual

      -for (const i of range,,0,,10,,2,) {
      -		print,,i,
      +for (let i = 0; i < 10; i += 2) {
      +		console.log(i);
       }
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:98:31)
      at process.processImmediate (node:internal/timers:478:21)

  3) Python
       Python to JavaScript translation: for statement
         should handle a for loop with negative step increments in the range:

      AssertionError: expected 'for (const i of range,,10,,0,,- 2,) {…' to equal 'for (let i = 10; i > 0; i -= 2) {\n\t…'
      + expected - actual

      -for (const i of range,,10,,0,,- 2,) {
      -		print,,i,
      +for (let i = 10; i > 0; i -= 2) {
      +		console.log(i);
       }
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:104:31)
      at process.processImmediate (node:internal/timers:478:21)

  4) Python
       Python to JavaScript translation: for statement
         should handle a for loop with multiple statements in the body:

      AssertionError: expected 'for (const item of items) {\n\t\tprin…' to equal 'for (const item of items) {\n\t\tcons…'
      + expected - actual

       for (const item of items) {
      -		print,,item,
      -		let count += 1;
      +		console.log(item);
      +		count += 1;
       }
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:110:31)
      at process.processImmediate (node:internal/timers:478:21)

  5) Python
       Python to JavaScript translation: for statement
         should handle nested for loops:

      AssertionError: expected 'for (const i of range,,3,) {\n\t\tfor…' to equal 'for (const i of range(3)) {\n\t\tfor …'
      + expected - actual

      -for (const i of range,,3,) {
      -		for (const j of range,,2,) {
      -				print,,i,,j,
      +for (const i of range(3)) {
      +		for (const j of range(2)) {
      +			console.log(i, j);
       		}
      -}
      +	}
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:116:31)
      at process.processImmediate (node:internal/timers:478:21)

  6) Python
       except statement
         should generate correct JavaScript for a general except block:

      AssertionError: expected 'try {\n\t\tlet x = 5;\n}\ncatch (e) {…' to equal 'try {\n\t\tlet x = 5;\n}\ncatch (e) {…'
      + expected - actual

       		let x = 5;
       }
       catch (e) {
       		let error = "General error occurred";
      -}
      +}
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:168:29)
      at process.processImmediate (node:internal/timers:478:21)

  7) Python
       finally block
         should generate correct JavaScript for a simple finally block:

      AssertionError: expected 'try {\n\t\tlet x = 5;\n}\n\nfinally {…' to equal 'try {\n\t\tlet x = 5;\n}\nfinally {\n…'
      + expected - actual

       try {
       		let x = 5;
       }
      -
       finally {
       		let cleanup = true;
       }
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:184:29)
      at process.processImmediate (node:internal/timers:478:21)

  8) Python
       finally block
         should generate correct JavaScript for a finally block with multiple statements:

      AssertionError: expected 'try {\n\t\tlet x = 5;\n}\n\nfinally {…' to equal 'try {\n\t\tlet x = 5;\n}\nfinally {\n…'
      + expected - actual

       try {
       		let x = 5;
       }
      -
       finally {
       		let cleanup1 = true;
       		let cleanup2 = false;
       }
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:190:29)
      at process.processImmediate (node:internal/timers:478:21)

  9) Python
       try statement
         should generate correct JavaScript for a try statement with except and finally:

      AssertionError: expected 'try {\n\t\tlet x = 5;\n}\ncatch (e) {…' to equal 'try {\n\t\tlet x = 5;\n}\ncatch (e) {…'
      + expected - actual

       }
       catch (e) {
       		let error = e;
       }
      -
       finally {
       		let cleanup = true;
       }
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:200:29)
      at process.processImmediate (node:internal/timers:478:21)

  10) Python
       try statement
         should generate correct JavaScript for a try statement with else and finally:

      AssertionError: expected 'try {\n\t\tlet x = 5;\n}\ncatch (e) {…' to equal 'try {\n\t\tlet x = 5;\n}\ncatch (e) {…'
      + expected - actual

       catch (e) {
       		let error = "Error";
       }
       else {
      -else {
       		let success = true;
      -}
      -}
      -finally {
      +} finally {
       		let cleanup = true;
       }
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:212:29)
      at process.processImmediate (node:internal/timers:478:21)

  11) Python
       return
         should generate JavaScript from Python return with a function call:

      AssertionError: expected 'return [foo,,5,];' to equal 'return foo(5);'
      + expected - actual

      -return [foo,,5,];
      +return foo(5);
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:577:31)
      at process.processImmediate (node:internal/timers:478:21)

  12) Python
       assignment
         should generate JavaScript from Python tuple assignment:

      AssertionError: expected 'let (a, b) = [1,2];' to equal 'let a = 1, b = 2;'
      + expected - actual

      -let (a, b) = [1,2];
      +let a = 1, b = 2;
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:602:31)
      at process.processImmediate (node:internal/timers:478:21)

  13) Python
       assignment
         should generate JavaScript from Python subscript assignment:

      AssertionError: expected 'Unexpected parsing error: o.reportAtt…' to equal 'let my_list[0] = 5;'
      + expected - actual

      -Unexpected parsing error: o.reportAttemptingFullContext is not a function
      +let my_list[0] = 5;
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:619:31)
      at process.processImmediate (node:internal/timers:478:21)

  14) Python
       assignment
         should generate JavaScript from Python star target assignment:

      AssertionError: expected 'let ...a, ...b = [1,2,3,4];' to equal 'let ...a = 1, ...b = 2, 3, 4;'
      + expected - actual

      -let ...a, ...b = [1,2,3,4];
      +let ...a = 1, ...b = 2, 3, 4;
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:627:31)
      at process.processImmediate (node:internal/timers:478:21)

  15) Python
       assignment
         should generate JavaScript from Python star target assignment:

      AssertionError: expected 'let a = 5;; let a, b = 2, 3;' to equal 'let ...a = 1, ...b = 2, 3, 4;'
      + expected - actual

      -let a = 5;; let a, b = 2, 3;
      +let ...a = 1, ...b = 2, 3, 4;
      
      at Context.<anonymous> (file:///home/brenin/mestrado/Disserta%C3%A7%C3%A3o/transpilerToJs/src/test/assignmentUnitTests.js:634:31)
      at process.processImmediate (node:internal/timers:478:21)



